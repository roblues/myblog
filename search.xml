<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Ktor 入门]]></title>
      <url>%2F2019%2F02%2F02%2FKtor-%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[前言最近要使用 netty 作为消息推送，之前一直想着集成在 Springboot 中使用，但是转念一想，netty 本身就可以作为服务器，为什么不再开一个服务呢？于是就想到了使用 Ktor 构建一个服务。 Ktor 是一个使用强大的 Kotlin 语言在互联系统中构建异步服务器与客户端的框架。并且正在努力的向其他平台构建，比如 JavaScript，iOS 和 Android ，且逐步尝试支持原生环境( Native )。 使用 Ktor 可以很快的写出一个 HelloWorld 工欲善其事必先利其器ktor 是以 kotlin 为基础的一个异步框架，那么开发采用 IDEA 成了我们更加友好的选择。 在 IDEA 中 setting Plugins 中的 MarketPlace 搜索 Ktor 。我们安装这个插件将更快的初始化我们的项目。 完成了基础工作，就可以开始我们的 Ktor 之旅了。 Hello World 暂时不需要选择任何模块。之后便可以下一步 下一步等，直到项目建立。 在 gradle 界面选择 auto-import 此时只要耐心等待所有的依赖安装完成 如果多次安装失败可以修改一下gradle的地址,将原有地址注释掉，修改为 阿里镜像。这样安装速度会很快，而且不容易失败 12345repositories &#123; mavenLocal() //jcenter() maven &#123; url 'https://maven.aliyun.com/nexus/content/groups/public' &#125; 当项目构建完成的时候，在 src 目录下 Application.kt 中已经为我们生成了部分代码。 123456fun main(args: Array&lt;String&gt;): Unit = io.ktor.server.netty.EngineMain.main(args)@Suppress("unused") // Referenced in application.conf@kotlin.jvm.JvmOverloadsfun Application.module(testing: Boolean = false) &#123;&#125; 开始编写我们的代码。 在 Application.module 中，编写我们要使用的路由。 1234567fun Application.module(testing: Boolean = false) &#123; routing &#123; get("/") &#123; call.respondText("Hello World") &#125; &#125;&#125; 启动项目，访问 http://127.0.0.1:8080 此时就可以看到我们的 Hello World。 routing 是 Ktor 中的核心模块，所以我们可以直接去使用。 构建一个 HTML 页面ktor 中有 HTML DSL ，所以我们可以直接使用 Kotlin代码构建一个 html 页面。添加 html dsl 依赖 1compile "io.ktor:ktor-html-builder:$ktor_version" 之后就可以愉快的写 dsl 了 12345678910111213141516171819202122232425262728293031323334get("/") &#123; call.respondHtml &#123; head &#123; title &#123; +"Ktor 入门" &#125; &#125; body &#123; a &#123; href = "http://127.0.0.1:8080/register" +"注册" &#125; form &#123; action = "http://127.0.0.1：8080/user/login" method=FormMethod.post input &#123; type = InputType.text value = "" name="username" &#125; input &#123; type = InputType.password value = "" name="password" &#125; input &#123; type = InputType.submit value = "登录" &#125; &#125; &#125; &#125; &#125; 重新启动一下 此时 我们的页面就出现了。 目前这个 表单无法访问 action 地址 已向 ktor 提交 Issues 用Locations路由但是当我们的路由很多的时候，如果都写在一个文件里，不仅仅文件回变得很大，而且不利于维护和团队协作。所以有了另一个模块 locations 。 首先要安装这个模块，在 gradle 中添加，注 ：功能目前还是实验性功能 123dependencies &#123; compile &quot;io.ktor:ktor-locations:$ktor_version&quot;&#125; 安装完成后启动我们的模块。 123456fun Application.module(testing: Boolean = false) &#123; install(Locations) // 启用 Locations routing &#123; // ... &#125;&#125; 首先是编写 route 采用 class 的形式 12345678@Location("/user")class User &#123; @Location("/login") data class UserLogin(val username: String, val password: String) @Location("/register") data class UserRegister(val username: String, val password: String)&#125; 该代码目前必须和 Application 在一起。 我们这样就编写了我们的路由和子路由。 新建一个 UserController.kt 1234567891011fun Route.user() &#123; post&lt;User.UserLogin&gt; &#123; call.respondText("登录成功") &#125; post&lt;User.UserRegister&gt; &#123; user -&gt; run &#123; call.respondText("用户 $&#123;user.username&#125; $&#123;user.password&#125;") &#125; &#125;&#125; 并且在我们的 Application 文件中声明该路由即可。 123456routing &#123; // ………… user() //…………&#125; 此时访问的时候就可以访问到我们的子路由。 参考资料Ktor 中文网 https://ktor.kotlincn.net/ 打个广告开发的小程序 生活小程序]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular 管道]]></title>
      <url>%2F2019%2F01%2F26%2FAngular-%E7%AE%A1%E9%81%93%2F</url>
      <content type="text"><![CDATA[什么是管道在 Angular 中有一个管道(pipe)的概念，可以把它理解为一个数据格式化工具，可以将已有的数据进行不同的转换。通过管道，我们可以把日常数据格式化这个工作变得异常简单与便捷。 Angular 中的管道在 Angular 中已经有很多内置管道了，有17个 而且我们还可以自定义管道 AsyncPipe 当我们使用响应式编程的时候，必须对 Observable 进行订阅才会执行，当我们使用该管道的时候就会代替我们手动订阅。 CurrencyPipe 把数字格式化为金额，而且可以本地化，设置金额格式等。 DatePipe 将日期进行格式化 DecimalPipe DeprecatedCurrencyPipe DeprecatedDatePipe DeprecatedDecimalPipe DeprecatedPercentPipe I18nPluralPipe I18nSelectPipe JsonPipe KeyValuePipe LowerCasePipe PercentPipe SlicePipe TitleCasePipe UpperCasePipe 除了官方给出的管道我们还可以自定义管道]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Spring Boot Security 跨域请求配置]]></title>
      <url>%2F2019%2F01%2F26%2FSpring-Boot-Security-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[前言之前的项目一直没有加 token 作为校验，这样的话势必会出现安全隐患。所以在项目维护的时候就添加了 JWT 和 Spring Security 作为安全防护。然而紧接着出现了一个问题，无法进行跨域请求。 项目介绍这个项目是我之前一直在做的一个在线自动评测系统，包括客观题和主观题。后端采用 Spring Boot ，前端之前使用 vue，结果写前端的同学找工作去了，而且前端的代码很多不规范的地方，所以借此机会就打算把前端重写一次。写之前比较了 vue react 和 angular。最后选择了 Angular， 毕竟 typescript 和 依赖注入 还有 Rxjs 这几个技术太骚了。😂 遇到问题当重写前端的时候，采用 .http 文件测试也是可以发送和接收到请求的，然而通过 Angular 的时候发现，请求报错，出现了跨域的问题，这里说明一下，之前没有使用 Security 的时候也是处理的跨域的问题。这里贴一下代码。 123456789101112131415@Configurationclass CorsConfig : WebMvcConfigurer &#123; /** * 跨域请求配置 * @param registry 跨域请求 */ override fun addCorsMappings(registry: CorsRegistry) &#123; registry.addMapping("/**") .allowedOrigins("*") .allowedMethods("GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS") .allowCredentials(false) .maxAge(3600) &#125;&#125; 我一直认为是前端没有处理好跨域的问题，查看了很多 Angular 的文档，并没有找到问题，于是乎我感觉到了，一定是后端的问题。紧接着想到了 Security 里面的一个参数 cors 当我想到了这个问题的时候立马打开了后端代码。果然 我的后端代码里，并没有写出来 这个跨域问题。 1234567891011121314151617@Configuration@EnableGlobalMethodSecurity(prePostEnabled = true)class WebSecurityConfig : WebSecurityConfigurerAdapter() &#123; /** * 拦截请求配置 * @param http 要拦截的请求 */ @Throws(Exception::class) override fun configure(http: HttpSecurity) &#123; // 跨域配置 http.cors() // 下面代码省略 ... &#125;&#125; 此时我们重启应用，前端再次发送请求，请求成功。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Apriori算法]]></title>
      <url>%2F2018%2F05%2F25%2FApriori%E7%AE%97%E6%B3%95%2F</url>
      <content type="text"><![CDATA[前言下文所有内容基本总结于 《数据挖掘概念与技术 第三版》机械工业出版社 最近复习数据挖掘课程，就把复习的几个算法记录一下。 什么是Apriori算法Apriori算法是 Agrawal 和 R.Srikant 与1994 提出的，为布尔关联规则挖掘频繁项集的原创性算法。Apriori算法使用一宗称为逐层搜索的迭代方法，其中 k 项集用于探索 (k+1) 项。 基本为扫描数据库，累计每个项的计数，并且收集满足最小支持度的项，找出频繁1项集的集合。该集合记为L1。然后，使用L1找出频繁2项集的集合L2，如此一直找下去，知道不能再找到频繁k项集，找出每个Lk需要一次数据库的完整扫描。 寻找频繁项集先验性质为了提高频繁项集逐层产生的效率，一种称为先验性质的重要性质用于压缩搜索空间。 先验性质：频繁项集的所有非空子集也一定是频繁的。 该表是一个事务数据库D。该数据库有9个事务，即|D|=9。假设最小支持度为2 TID 商品ID的列表 TID 商品ID的列表 T100 I1,I2,I5 T600 I2,I3 T200 I2,I4 T700 I1,I3 T300 I2,I3 T800 I1,I2,I3,I5 T400 I1,I2,I4 T900 I1,I2,I3 T500 I1,I3 在算法第一次迭代的时候，每个项都是候选1项集的集合C1的成员。算法扫描，统计出每个项出现的次数。 可以确定频繁1项集的集合L1，它由满足最小支持段的候选1项集组成。 为发现频繁2项集的集合L2，算法使用L1 🔗 L1产生候选2项集的集合C2。注意剪枝，没有候选的C2中删除，因为这些候选的每个子集也是频繁的。 扫描D中的事务，累计C2中的每个候选项集的支持技术。 然后确定频繁2项集的集合L2，它由C2中满足最小支持度的候选2项集组成。 ………… 重复以上步骤，直到Cn = ∅，此算法终止，找出所有的频繁项集。 由频繁项集产生关联规则一旦由数据库D中的事务找出频繁项集，就可以直接由它们产生强关联规则。对于置信度，可以用下面的公式计算。 confidence(A ＝&gt;B) = P（A | B）= support_count(A ∪ B) / support_count(A) 继续使用上面的案例，该数据包含频繁项集 x = {I1,I2,I5},可有X产生哪些关联规则，并且计算{I1,I2},{I1,I5},{I1}置信度 产生的关联规则 {I1,I2},{I1,I5},{I2,I5},{I1},{I2},{I5} {I1,I2} =&gt; I5, confidence = 2 / 4 = 50% {I1,I5} =&gt; I2, confidence = 2 / 2 = 100%]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vscode 配置c/c++环境]]></title>
      <url>%2F2018%2F05%2F07%2Fvscode-%E9%85%8D%E7%BD%AEc-c-%E7%8E%AF%E5%A2%83%2F</url>
      <content type="text"><![CDATA[前言 工欲善其事，必先利其器 最近重新开始了学习c语言和数据结构的过程，毕竟考研要用，所以 clon 在windows上的表现一直感觉不如在linux上，而且也重量，所以不打算使用 clon,而是打算用微软的vscode+gcc完成。 # 基于命令行运行首先肯定要下载和安装好 visual studio code 和下载 minGW。这里不在赘述，安装好 minGW 记得配置环境变量。在终端中敲入 gcc -v 查看 然后我们新建一个文件夹并且在文件夹里新建一个 Hello.cpp 文件并且用 vscode 打开，此时 vscode 会提示你安装插件。 此时我们在Hello.cpp中书写我们的代码 123456#include "stdio.h"int main()&#123; printf("Hello World \n"); return 0;&#125; 打开终端，使用 gcc Hello.cpp 进行编译，会形成一个a.exe的文件。然后输入 a.exe 就可以运行 gcc Hello.cpp a.exe 这样就会编译和运行一个HelloWorld]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[大创项目总结]]></title>
      <url>%2F2018%2F04%2F27%2F%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[前言已经好久没有更新博客了，这个博客一直想写，也一直没有写。 大创是从 2017 年 1 月开始的，直到 2018 年 4 月底才结束，并不是项目难或者什么,而是项目时间就是这么长😂。然而时间长并不是一件好事情，时间越长反而对人的意志消磨就越厉害。一开始，四个人打算开始申报，现在细细想想其实就是两个人，和对象一直忙前忙后，做 ppt，准备小漫画…… 项目过程不管怎么样，经过辛辛苦苦的准备，到最好好歹还是个校级项目，也算没有白白付出了努力。刚刚开始的时候，大家还满怀热情和希望的在做，终究没有利益关系啊，最后剩下的还是两个人。其他两个人的代码基本不能看。刚刚开始打算是原生Android写，四个人的任务剩下两个人，也开始慢慢的怠慢，进度越来越慢，到最后几乎是要停止的节奏。我俩几乎也筋疲力尽想要放弃了。 转机一年的时间很快，在此期间和对象放弃了好几个小假期对之前的项目进行推翻重构。在去年冬天的时候，做课程设计选题为一个自动评测系统。 要求教师可以出题，可以对选择题，填空题，简答题和代码题进行评分，学生可以进行答题等一些功能。 这个题和我们的大创中一些模块其实差不多。两周的时间来写这个小课设，经过两周的时间基本完成了一个小 DEMO，答辩的时候老师很满意。但是老师已经很本地的一个教育机构合作开发一个系统，我的这个模块为系统内部的一个子系统。在寒假期间，该教育机构于我进行了联系，我全面负责学生端功能和自动评测模块。对课程设计的 DEMO 用 Kotlin 进行了重写，对项目中不完善的地方进行了完善。考虑了一些并发情况。在于该机构交流的过程中发现了该机构的水平其实一般般。目前该系统基本已经稳定的运行在学院，给大一的学生做章节测试用。🙉 上面的有点扯得有点多，但是就是这个项目基本完成了我们大创的项目，加上 vue.js 的知识，进行了跨平台的开发，学生端主要是对象开发，教师端是我开发。用 vue.js 开发客户端比原生开发容易多了，速度也快。 总结作为一个负责人，这其中由我自己很大的错，没有能把一个团队紧密的联合起来，这是我的能力不足，但是一个团队，人有私心的时候，那么这个团队基本也要解散了。各有私心，想得到好处又不想付出。 这周二刚刚进行完答辩，目前还没有出来成绩，不够感觉还可以，毕竟当初立项了那么多，最后才有6个组进行结题答辩。 最后是答辩的时候的演示视频]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[RabbitMQ 和 Spring Boot 的集成]]></title>
      <url>%2F2018%2F02%2F23%2FRabbitMQ-%E5%92%8C-Spring-Boot-%E7%9A%84%E9%9B%86%E6%88%90%2F</url>
      <content type="text"><![CDATA[前言在最近的项目中使用了 RabbitMQ。 主要是用来起到一个消峰作用。 安装安装这里分为 windows 和 linux。 我主要的开发环境是在 windows 10 上， 运行环境是 linux(ubuntu)，所以讲解主要从两个系统来说。 windowsRabbitMQ 是 erlang 开发的，所以使用之前首先要下载 erlang 选择 windows 64bit 或者 windows 32bit 根据自己电脑进行选择，下载。 下载后进行安装 将 erl 的安装目录下载的 bin 写入环境变量中。 如图所示： 在 cmd/powershell 中输入 erl 会出现 erl 的一些版本信息。 这样基本完成了 erlang 的安装。 安装完 erlang 那么就应该安装我们的主角 RabbitMQ 。 首先下载 RabbitMQ ，在下载页面 下载对应的安装包 exe 文件。 下载完成之后进行安装 安装完成之后就是我们的 RabbitMQ 就可以进行启动了。 运行 linux这里使用的是 ubuntu 16.04 STL 发行版。 首先要安装 erlang 的相关环境 sudo apt-get install erlang 当安装完成之后在控制台输入 erl ，会有erl的版本信息。 此时的 erl 就算安装成功了。 安装完成之后我们就可以开始安装 RabbitMQ 了。 在终端中输入 sudo apt-get install rabbitmq-service 此时的 rabbitmq 就算安装成功了。 我们需要安装一些插件。 sudo rabbitmq-plugins enable rabbitmq_management 就可以完成插件的安装 当我们通过浏览器访问的时候 此时的默认账户是无法登录的，因为默认 guest 是只能通过本地访问。所以我们要新建一个账户用来可以远程访问。 123rabbitmqctl add_user admin admin # 新建一个叫admin账户和密码为adminrabbitmqctl set_user_tags admin administrator # 为admin账户设为administrator用户rabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*" # 为账户写入权限 与SpringBoot整合基本的安装如上所示，下面将会将如何与 SpringBoot 整合 说明： 项目采用 .yml 格式文件作为 application 配置文件，采用 Gradle 作为构建工具，语言采用 kotlin 配置文件首先我们对项目添加依赖。 12345dependencies &#123; //…… // mq compile('org.springframework.boot:spring-boot-starter-amqp')&#125; 对 application.yml 进行配置 123456spring: rabbitmq: host: localhost port: 5672 username: admin password: admin 在代码中进行配置 我们新建一个类用来配置 RabbitMQ。 在代码中新建了一个队列叫做 dc_check，当我们启动服务的时候就可以在 RabbitMQ 的控制台上看到这个队列 1234567891011121314151617package com.nuc.evaluate.configimport org.springframework.amqp.core.Queueimport org.springframework.context.annotation.Beanimport org.springframework.context.annotation.Configuration/** * @author 杨晓辉 2018/2/6 16:07 */@Configurationclass RabbitConfig &#123; @Bean fun checkAns(): Queue &#123; return Queue("dc_check") &#125;&#125; 这样我们基本完成了配置。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017年终总结]]></title>
      <url>%2F2018%2F01%2F01%2F2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[今天是2017的最后一天，按照常理来说应该写下一个总结。仔细回想一下今年做了什么？ Java框架的学习 SSM SSH kotlin的学习 考研准备 四级考试准备 博客的持续维护 框架学习年初的时候学习了spring和spring MVC 此时的我才了解到 Java的主要功能和作用点。因为大二就将这些框架学习完成，导致后面的很多专业课程上课很轻松。学习这些框架其实会发现很多相似点，当然也会比较出不同框架之间的优缺点。 kotlin的学习虽然博客上的第一篇关于 kotlin 的文章是在8月多，但是在此之前就开始了零零碎碎的学习。之后在大三学习的 struts2 框架的代码全是 kotlin。这些框架虽然没有对 kotlin 做出优化和适配，但是在业务逻辑方面确实可以省不少事情。也给实验室安利过 kotlin，好像没有成功。 尴尬. jpg 考研准备报了一个考研班，具体考哪里还没有仔细思考，不过是时候该考虑一下了。考研是一个漫长的过程，看着一些学长的考研经历好像也看到了自己。之前早晨跑步的时候每到图书馆门口的时候就好看到大量的学生拍着长长的队等待着图书馆开门。 四级今年六月份考试的时候真的没有做准备，属于裸考，再加上自己的英语比较差，没过也是在预料之中的。假期好好学了一下英语。十二月再次参加考试，希望能过吧，不想在同一件事情花费的时间太长。 四级过了 2018年2月27日 博客维护博客今年主要的改变为换了好几个评论系统，多说的关闭使很多博客的评论系统受到影响，经过几次的迁移，评论也都丢失，希望现在的评论会一直保存下来。 新年展望新年要有个新的计划和准备 四级如果没有过下次必须过 算法方面继续学习 认认真真的准备考研 今天已经是2018的第一天了，之前在家一直没有带着电脑，刚刚来了学校，把总结补上。 新年快乐。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一次神奇的课设验收]]></title>
      <url>%2F2017%2F12%2F28%2F%E4%B8%80%E6%AC%A1%E7%A5%9E%E5%A5%87%E7%9A%84%E8%AF%BE%E8%AE%BE%E9%AA%8C%E6%94%B6%2F</url>
      <content type="text"><![CDATA[刚刚验收完课程实际，实在是压抑不住我的内心。为什么我们学校验收课程设计会找一堆不懂代码的老师过来验收？ 第一句话 你这代码是抄的吧。 woc…………，都没有看过我的代码你就知道我的代码是抄的？这种说话无凭无据，信口开河？起码看看代码再说结论。 画一下流程图 不用注意格式，画圈就好。 就类似下图的样子把每个模块的都画出来，边画边解释每个圈是什么意思。 之后又要画主函数的。 和他解释了无数次主函数就一个 menu() 结果这老师神tmd的，非要画。 你他妈的是在逗我？ 12345int main() &#123; printf("welcome\n"); menu(); return 0;&#125; 最后都画完又说，你看看你一个一个的画的，谁知道你画的什么？ WTF 难道流程图不应该是一个函数画一个 最后给出了我他的答案 你看这样的流程图，多清晰。 你和谁学的？ 你的老师从棺材板里爬出来，估计要找你了。 谁给你的自信一本正经的胡说八道 闲的无聊查了一下这个人 自己是什么样子，心里没点B数吗？ 💊]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Kotlin中Collection一些语法总结]]></title>
      <url>%2F2017%2F12%2F23%2FKotlin%E4%B8%ADCollection%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[kotlin 对集合问题的支持很好，有很多方法可以方便又直观的对集合进行操作。比如 map，count，reduce，filter等方法，这个博客会持续总结些方法。 anyany 这个函数返回值是一个 boolean 类型，用于判断集合内元素是否用满足条件的，如果有任意一个集合满足该条件，则返回 true 否是为 false。 示例代码 1234567fun main(args: Array&lt;String&gt;) &#123; val list: List&lt;Int&gt; = listOf(1, 2, 4, 67, 7, 23, 55, 34) //sum = 193 val l = list.any &#123; it &gt; 30 &#125; println("判断结果为 $l")&#125; 输出结果为 判断结果为 true 这里的 it 可以理解为 iterator 既为集合中的每个元素。之后有很多函数都是对 it 进行操作。 allall 几乎和 any 很相似，只是用于判断每个元素，要集合内每个元素满足条件才会返回ture，否则为 false 示例代码 1234567fun main(args: Array&lt;String&gt;) &#123; val list: List&lt;Int&gt; = listOf(1, 2, 4, 67, 7, 23, 55, 34) //sum = 193 val l = list.all &#123; it &gt; 30 &#125; println("判断结果为 $l")&#125; 判断结果为 false mapmap 这个函数对集合内的每一个元素进行迭代遍历，基本可以替代for循环。 示例 12345678fun main(args: Array&lt;String&gt;) &#123; val list: List&lt;Int&gt; = listOf(1, 2, 4, 67, 7, 23, 55, 34) list.map &#123; print("$it ") &#125;&#125; 输出结果为： 1 2 4 67 7 23 55 34 这样就完成了对集合的迭代输出。 filter顾名思义，filter为一个过滤器，可以对我们集合元素进行一次过滤，留下我们想要的元素。例如我们要集合中的偶数元素。 示例代码 123456fun main(args: Array&lt;String&gt;) &#123; val list: List&lt;Int&gt; = listOf(1, 2, 4, 67, 7, 23, 55, 34) list.filter &#123; it % 2 == 0 &#125;.map &#123; print("$it ") &#125;&#125; 输出 2 4 34 完成了对偶数元素的过滤，结合map进行一下输出。如果我们不用filter和map进行输出，那么我们将会写下下面的这种代码，而且 IDEA 也会给我们警告，让我们及时改进。 12345for (i in 0 until list.size) &#123; if (list[i] % 2 == 0) &#123; print("$&#123;list[i]&#125; ") &#125;&#125; 此时就会感觉到了这些语法对于代码的简洁和易用。 count即使对集合元素进行统计，如果直接使用 count() 对集合元素统计和直接用 size 没有什么区别，所以说 count 有更加高级的用法。 比如对集合内的某个元素进行统计或者某种类型的元素进行统计，比如统计集合中偶数的个数。 1234567fun main(args: Array&lt;String&gt;) &#123; val list: List&lt;Int&gt; = listOf(1, 2, 4, 67, 7, 23, 55, 34) val count = list.count &#123; it % 2== 0 &#125; println("集合中的偶数个数为 $count")&#125; 输出 集合中的偶数个数为 3 groupBy这个用于分组，对元素进行按要求分组，最后的结果也会保存在两个集合中， true 和 false 示例代码 对奇偶数进行分组 123456 val list: List&lt;Int&gt; = listOf(1, 2, 4, 67, 7, 23, 55, 34) //sum = 193 val result = list.groupBy &#123; it % 2 == 0 &#125; println("$result")&#125; 输出结果 {false=[1, 67, 7, 23, 55], true=[2, 4, 34]}]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Kotlin 1.2:平台之间共享代码]]></title>
      <url>%2F2017%2F12%2F02%2FKotlin-1-2-%E5%B9%B3%E5%8F%B0%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E4%BB%A3%E7%A0%81%2F</url>
      <content type="text"><![CDATA[前言这是一个尝试，之前没有翻译过任何技术文章，做一个尝试，也算是学习，尽管现在这个译文在网上已经是满天飞了。 原文地址Kotlin 1.2 Released: Sharing Code between Platforms 正文今天，我们将要发布 Kotlin 1.2。这是一个重要的新版本和一个大的步伐在我们朝着使用 Kotlin 在现代应用程序中的道路上。 在 Kotlin 1.1 中，我们正式的发布了 JavaScript 目标，允许你去编译 Kotlin 代码成为 JS 并且运行在浏览器上。在 Kotlin 1.2 中，我们将要添加 JVM 和 JavaScript 的代码重用成为可能。现在你可以写一次应用程序的逻辑代码，而在你的应用程序中所有层重用它——后端，浏览器前端和Android移动应用。我们也会在库上进行工作，帮助你重用更多的代码。比如跨平台库。 Kotlin 1.2 是已经绑定在 IntelliJ IDEA 2017.3中，将会在本周发布。如果你正在使用的是 Android Studio 或者 一个旧版本的 Intellij IDEA，你可以从 Tools | Kotlin | Configure Kotlin Plugin 更新框中安装新的版本。 这个版本包括了大量外部贡献者的工作，并且我们想感谢向我们反馈，提交问题和尤其是提交了PR的每个人。 多平台项目一个多平台项目允许你编译在你的应用程序的多层 —— 后端，前端和Android应用 —— 在相同的代码基础上。这样的一个项目包含了 相同模块,与平台无关以及特定平台的模块，包含了特定平台的代码( JVM 或者 JS )和使用了特定平台的库。从通用模块调用特定平台的代码，你可以指定预期的声明——所有平台特定模块需要提供实际实现声明。 有关该功能的更多信息，请查看这个文档 如前所述，我们也在编写一组公共库允许你将更多的逻辑代码转移到公共代码： kotlin.test,包括开箱即用的Kotlin1.2，让你写一次测试并且运行在JVM 和 JS 下； kotlin.html支持 同构渲染 — 用相同的代码渲染 HTML 在后端和在前端； kotlinx.serialization允许你轻松的对 Kotlin对象编组在你的应用程序的不同的层之间，使用 JSON 或者 ProtoBuf 进行序列化格式化。 请注意，多平台项目目前是一个实验性功能；这意味着这个功能是准备使用，但是我们也许需要去改变设计在之后的版本(并且如果我们这样做，我们将会提供代码迁移工具)。 编译性能在1.2的发展过程中，我们花费了很多精力来使编译过程更快。我们已经比Kotlin1.1提高了大约 25% 并且我们看见进一步改进的巨大潜力，它将会在发布在 1.2.x的更新中。 下方的图片展示了两个用Kotlin的大型JetBrains项目不同的编译时间： 其他语言和库的改进我们也做了许多小的改进在语言和标准库： 更简洁的语法 用于将多个参数传递给注解(数组 文字(literals)) 不知如何翻译literals 译者注 支持 lateinit 修饰在全局属性和局部属性，以及检查一个 lateinit 是否被初始化； 更加聪明的智能推导和改进的类型推断在一些情况下。 标准库和 Java9 中引入的分包限制的兼容； 新的 kotlin.math包在标准库中； 新的标准库函数在处理序列和集合，包含了一组函数 为了拆分集合和序列为可能重叠的固定大小的组。 更多的信息和代码示例，请看 Kotlin1.2中新功能 世界各地的Kotlin自从今年3月发布的Kotlin1.1以来，Kotlin已经取得了巨大的收获在世界各地。这是 KotlinConf 的高潮，我们第一次全球会议，有着1200参会者在11月2，3日的旧金山。我们已经记录了所有的会谈，并且视频已经可以看。 Kotlin现在是一个Android开发官方支持的语言，开箱即用的Android Studio 3.0，已经谷歌发布了官方示例和风格指南。结果是，在Android Studio中超过了 17% 的项目使用 Kotlin，包含来自很多热门的创业公司以及财富500强公司的许多应用程序。 在服务器端，Spring 5.0 已经发布，有着许多Kotlin支持的功能,而且 vert.x 已经支持Kotlin在3.4.0后。当然，Gradle支持开箱即用Kotlin DSL，而且 Gradle Kotlin DSL 项目正在迅速的接近1.0版本。 在Github上，开源的Kotlin代码行数已经超过了2.5亿。而在 Stack Overflow，Kotlin是增长最快的语言之一和最不反感的语言之一 围绕Kotlin的社区建立同样也是令人吃惊的，已经有超过100用户组在全世界，我们很难追踪到所有的人 —— 但是针对我们所知道的，这个会谈地图给了你一个很好的想法，kotlin是多么广泛的使用。 对于刚刚学习Kotlin的人来说，书籍的数量是不断的增长(包含我们自己的 “Kotlin in Action”,现在有英文，俄语，日语，中文和葡萄牙语),线上课程，教程和其他资源 团队见面：网络研讨会和Reddit AMA分享你更多的信息关于新版本，我们计划组织一个网络研讨会关于Kotlin1.2多平台项目在12月7日，18:00 CET。请注册；空间有限。 Kotlin团队也将会举办 AMA(Ask Me Anything) 在 Kotlin Reddit 上在12月5号。我们将开始中午开始(CET),并且我们接下来的24小时和你在一起。 如何升级一如既往，你可以在线尝试Kotlin在try.kotlinlang.org 在 Maven，Gradle和npm中：使用1.2.0作为编译器和标准库的版本号。看这里 IntelliJ IDEA：2017.3已经和Kotlin1.2绑定，在早期版本中安装或者升级 Kotlin 插件到1.2.0版本。 Android Studio：安装或者升级插件通过 Plugin Manager。 Eclips：安装插件在 MarketPlace。 命令行编译可以从Github发布页面上下载。 兼容性 在Kotlin1.2的语言和标准库是向后兼容的(模块错误):如果一些编译和运行在1.0或者1.1，将会继续在1.2上运行。帮助逐渐共享的打团队，我们将提供不使用新特性的编译开关。这里是一个包含可能的缺陷文档]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Number of 1 Bits(#191)]]></title>
      <url>%2F2017%2F12%2F01%2FLeetCode-Number-of-1-Bits-191%2F</url>
      <content type="text"><![CDATA[Number of 1 Bits(#191) 编号 名称 等级 191 Number of 1 Bits Easy 思路这个题其实就是统计一个无符号整数的二进制数中1的个数，Java 已经给我们提供了api Intger.bitCount(int n),所以一行代码解决 代码123456public class Solution &#123; // you need to treat n as an unsigned value public int hammingWeight(int n) &#123; return Integer.bitCount(n); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Self Dividing Numbers(#728)]]></title>
      <url>%2F2017%2F12%2F01%2FLeetCode-Self-Dividing-Numbers-728%2F</url>
      <content type="text"><![CDATA[Self Dividing Numbers(#728) 编号 名称 等级 728 Self Dividing Numbers Easy 思路这个题首先要把给的数字每一位进行分割，写了一个递归 foo 返回一个list，这个list是数字的每一位。 之后再写个循环对产生的结果进行遍历就好。基本没什么难点。 代码1234567891011121314151617181920212223242526272829class Solution &#123; fun selfDividingNumbers(left: Int, right: Int): List&lt;Int&gt; &#123; var result = ArrayList&lt;Int&gt;() for (i in left..right) &#123; var list = ArrayList&lt;Int&gt;() val arrayList = foo(i, list) var sum = 0 arrayList.map &#123; if (it != 0 &amp;&amp; i % it == 0) &#123; sum += 1 &#125; &#125; if (sum == arrayList.size) &#123; result.add(i) &#125; &#125; return result &#125; fun foo(num: Int, list: ArrayList&lt;Int&gt;): ArrayList&lt;Int&gt; &#123; if ((num / 10 == 0) and (num % 10 == 0)) &#123; return list &#125; list.add(num % 10) val nums = num / 10 foo(nums, list) return list &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Binary Number with Alternating Bits(#693)]]></title>
      <url>%2F2017%2F12%2F01%2FLeetCode-Binary-Number-with-Alternating-Bits-693%2F</url>
      <content type="text"><![CDATA[好久都没有写过博客了，大概一个月，一个字都没有写。乱七八糟的的事情有点多，再加上考试等，一个月也没有做什么。最近发现 LeetCode 上支持了 kotlin。算法的学习还是不能停止的，毕竟自己还是个渣。 估计以后的 LeetCode 上的题都是用 kotlin 刷了。 Binary Number with Alternating Bits(#693) 编号 名称 等级 693 Binary Number with Alternating Bits Easy 思路这个题是要找到带有交替位的二进制数，比如 2(10), 5(101) ,这样的数字。 我的想法应该是相对来说比较笨的，就是先把数转为二进制数，再将二进制数分割位字符数组，对字符数组进行奇数偶数的选择。通过选择后判断奇偶位中的每一位是否相同。 第一次提交的时候就是这个样子想的，当提交代码的时候发现错了因为 7(111) 这个样子的并不符合奇偶交替，而是一样，所以在后面加了一个判断，判断奇偶位的内容是否一致，如果一样代表不成立。 当再次提交的时候发现忽略了 1 因为有了判断，所以1的偶位肯定是不存在的，这样的话就会判断出错误的结果，最后在开头添加这个判断。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344class Solution &#123; fun hasAlternatingBits(n: Int): Boolean &#123; if (n ==1 )&#123; return true &#125; var flag = true val a = Integer.toBinaryString(n) val b: CharArray = a.toCharArray() val c = ArrayList&lt;Char&gt;() val d = ArrayList&lt;Char&gt;() for (i in 0 until b.size) &#123; if (i % 2 == 0) &#123; c.add(b[i]) &#125; else &#123; d.add(b[i]) &#125; &#125; var twp1 = '0' var twp2 = '1' if (c.size != 0) &#123; twp1 = c[0] for (i in 1 until c.size) &#123; if (c[i] != twp1) &#123; flag = false break &#125; &#125; &#125; if (d.size != 0) &#123; twp2 = d[0] for (i in 1 until d.size) &#123; if (d[i] != twp2) &#123; flag = false break &#125; &#125; &#125; if (twp1 == twp2) &#123; flag = false &#125; return flag &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Length of Last Word(#58)]]></title>
      <url>%2F2017%2F09%2F14%2FLeetCode-Length-of-Last-Word-58%2F</url>
      <content type="text"><![CDATA[Length of Last Word(#58) 编号 名称 等级 58 Length of Last Word Easy 思路题目要求计算出字符串最后一个单词的长度，如果不存在就返回 0 。 首先就是要判断这个字符串中有没有字符，是否是一个空的字符串，如果是返回 0。 否则的话就是通过 split() 切割字符串。最后返回最后一个字符串的长度就好。 代码Java 代码 123456789class Solution &#123; public int lengthOfLastWord(String s) &#123; if (s.trim().isEmpty()) &#123; return 0; &#125; String[] args = s.split(" "); return args[args.length - 1].length(); &#125;&#125; Kotlin 代码 12345class Solution &#123; fun lengthOfLastWord(s: String): Int &#123; return s.trim().substringAfterLast(' ').length &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Add Digits(#258)]]></title>
      <url>%2F2017%2F09%2F10%2FLeetCode-Add-Digits-258%2F</url>
      <content type="text"><![CDATA[Add Digits(#258) 编号 名称 等级 258 Add Digits Easy 思路竟然还有这样的操作？？？？😥 一个非0非9的数除以9竟然就是答案，这样的规律大佬们是如何找到的？ 🤔 代码12345class Solution &#123; public int addDigits(int num) &#123; return num == 0? 0: (num% 9 == 0? 9: (num%9)); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Find the Difference(#389)]]></title>
      <url>%2F2017%2F09%2F10%2FLeetCode-Find-the-Difference-389%2F</url>
      <content type="text"><![CDATA[Find the Difference(#389) 编号 名称 等级 389 Find the Difference Easy 思路这个题主要是用于寻找两个字符串之间不同的字符，用到之前的一个规律，在 #136,即 N ^ N = 0N ^ 0 = 0 利用这个规律可以很方便的找出那个不同的字符。 代码1234567891011121314151617class Solution &#123; public char findTheDifference(String s, String t) &#123; char[] sc = s.toCharArray(); char[] tc = t.toCharArray(); int out = 0; for(int c: sc) &#123; out ^= c; &#125; for(int c: tc) &#123; out ^= c; &#125; return (char)out; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[协同过滤算法]]></title>
      <url>%2F2017%2F09%2F01%2F%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95%2F</url>
      <content type="text"><![CDATA[前言在推荐系统中有很多算法，其中一种就是协同过滤算法。 分类在协同过滤算法中，分为两类，基于用户的协同过滤(UserCF)和基于物品的协同过滤(ItemCF)。每个类型的适用情况不同。 在上述的两种类型中，基于用户的协同过滤算法是不太常用的，原因如下 用户的数量是远远大于物品的数量，计算用户之间的相似度计算量会很大。 对于一个新用户很难找到相似度 所以一般是不会使用基于用户的协同过滤，但是并不表示不用，一般用于新闻推送等。 相似度计算离散图表示目前有五个用户对商品1和商品2的喜爱程度，分析用户之间的关系。 用户 商品1 商品2 1 3.3 6.5 2 5.8 2.6 3 3.6 6.3 4 3.4 5.8 5 5.2 3.1 寻找他们的相似度 通过离散图来进行表示 可以看出 用户1 用户3 用户4 之间是存在关系的。 12345678910111213141516171819202122# coding = utf8import matplotlib.pyplot as pltimport numpy as np# 散点图分析五个用户之间的相关程度# x轴为对于商品 1 的喜欢程度# y轴是对于商品 2 的喜欢程度# 数据如下# 商品1 [3.3, 5.8, 3.6, 3.4, 5.2]# 商品2 [6.5, 2.6, 6.3, 5.8, 3.1]shop1 = [3.3, 5.8, 3.6, 3.4, 5.2]shop2 = [6.5, 2.6, 6.3, 5.8, 3.1]color = ['r', 'b', 'c', 'g', 'y', 'k', 'm', '0xff0012']for i in range(0, len(shop1)): plt.scatter(shop1[i], shop2[i], c=color[i])plt.xlim(0, 10)plt.ylim(0, 10)plt.ylabel("shopping 2")plt.xlabel("shopping 1")plt.legend('12345')plt.show() 欧几里得距离欧几里得距离是最常用的距离公式,用于计算两点之间的距离。公式如下： 通过计算两点之间的距离来表示他们之间的相关程度。 我们通过 python 计算 欧几里得距离。 1234567891011# coding = utf8# 1 2 3 4 5shop1 = [3.3, 5.8, 3.6, 3.4, 5.2]shop2 = [6.5, 2.6, 6.3, 5.8, 3.1]for i in range(0, len(shop1) - 1): for j in range(i + 1, len(shop2)): distance = (shop1[i] - shop1[j]) ** 2 + (shop2[i] - shop2[j]) ** 2 correlation = 1 / (1 + distance) # 将范围缩小至0 ~ 1 之间 if correlation &gt; 0.60: # 根据需求更换相关系数 print("第 &#123;&#125; and &#123;&#125; distance is &#123;&#125;".format(i + 1, j + 1, correlation)) 计算结果 第 1 和 2 相关系数是 0.04452359750667854 第 1 和 3 相关系数是 0.8849557522123891 第 1 和 4 相关系数是 0.6666666666666665 第 1 和 5 相关系数是 0.061842918985776124 第 2 和 3 相关系数是 0.051203277009728626 第 2 和 4 相关系数是 0.058823529411764705 第 2 和 5 相关系数是 0.6211180124223604 第 3 和 4 相关系数是 0.7751937984496123 第 3 和 5 相关系数是 0.07246376811594203 第 4 和 5 相关系数是 0.08673026886383348 得出结论，基本和离散图相似。 这样就可以根据需求来判断用户之间的相似度。 皮尔逊相关系数皮尔逊相关系数同样也是计算距离的一种方式 通过相关系数可以计算出他们的相关程度。 适用范围皮尔逊相关系数是有一定的适用条件。 当两个变量的标准差都不为零时，相关系数才有定义，皮尔逊相关系数适用于：(1)、两个变量之间是线性关系，都是连续数据。(2)、两个变量的总体是正态分布，或接近正态的单峰分布。(3)、两个变量的观测值是成对的，每对观测值之间相互独立。 同样这个算法也是有缺陷的,但数据越少的时候,波动性越大。当数据很少的时候不建议使用。 皮尔逊相关系数公式有四个 公式一： 公式二： 公式三： 公式四： 相关系数 0.8-1.0 极强相关 0.6-0.8 强相关 0.4-0.6 中等程度相关 0.2-0.4 弱相关 0.0-0.2 极弱相关或无相关 我们通过第四个公式进行计算 简单案例通过 python 计算出相关系数 123456789101112131415161718192021222324252627282930313233343536373839# coding=utf8# 皮尔孙相关系数计算def PearsonCorrelationSimilarity(vec1, vec2): value = range(len(vec1)) sum_vec1 = sum([vec1[i] for i in value]) sum_vec2 = sum([vec2[i] for i in value]) square_sum_vec1 = sum([pow(vec1[i], 2) for i in value]) square_sum_vec2 = sum([pow(vec2[i], 2) for i in value]) product = sum([vec1[i] * vec2[i] for i in value]) numerator = product - (sum_vec1 * sum_vec2 / len(vec1)) dominator = ((square_sum_vec1 - pow(sum_vec1, 2) / len(vec1)) * ( square_sum_vec2 - pow(sum_vec2, 2) / len(vec2))) ** 0.5 if dominator == 0: return 0 result = numerator / (dominator * 1.0) return resultif __name__ == '__main__': # 五个用户对五个商品的评价 user1 = [3.3, 5.8, 3.6, 3.4, 5.2] user2 = [6.5, 2.6, 6.3, 5.8, 3.1] user3 = [5.5, 3.2, 6.5, 4.7, 4.4] user4 = [4.4, 6.2, 2.3, 5.1, 3.3] user5 = [2.1, 5.2, 4.2, 2.2, 4.1] userlist = [user1, user2, user3, user4, user5] for i in range(0, len(userlist) - 1): for j in range(i + 1, len(userlist)): result = PearsonCorrelationSimilarity(userlist[i], userlist[j]) print "user%d 和 user%d 的相关系数是%f" % (i + 1, j + 1, result) user1 和 user2 的相关系数是0.999774 user1 和 user3 的相关系数是-0.847758 user1 和 user4 的相关系数是-0.841816 user1 和 user5 的相关系数是-0.915237 user2 和 user3 的相关系数是-0.841741 user2 和 user4 的相关系数是-0.835320 user2 和 user5 的相关系数是-0.909975 user3 和 user4 的相关系数是0.998987 user3 和 user5 的相关系数是0.976272 user4 和 user5 的相关系数是0.969782 通过计算出来的结果可以看出来等到的结果 余弦距离余弦相似度用向量空间中两个向量夹角的余弦值作为衡量两个个体间差异的大小。余弦值越接近1，就表明夹角越接近0度，也就是两个向量越相似，这就叫”余弦相似性”。 公式一般余弦定理这个公式运用与文本分析。 分别采用下列的文本进行 示例A：这里距离北京有多远，火车多长时间 B:北京离这里有多远，坐火车多长时间 对A，B进行分词A:这里/距离/北京/有/多远，火车/多长/时间 B:北京/离/这里/有/多远，坐/火车/多长/时间 列出所有的词这里 距离 北京 有 多远 火车 多长 时间 离 坐 进行词频统计A: 这里(1)距离(1)北京(1)有(1)多远(1)火车(1)多长(1)时间(1)离(0)坐(0) B: 这里(1)距离(0)北京(1)有(1)多远(1)火车(1)多长(1)时间(1)离(1)坐(1) 计算句子的词频向量A (1,1,1,1,1,1,1,1,0,0) B (1,0,1,1,1,1,1,1,1,1) 通过余弦定理计算相似度12345678910111213141516171819202122# coding=utf8import math# 余弦定理def cos(v1, v2): l = 0.0 for i in range(0, len(v1)): l += v1[i] * v2[i] v = 0.0 w = 0.0 for i in range(0, len(v1)): v += math.pow(v1[i], 2) w += math.pow(v2[i], 2) cos = l / (math.sqrt(v) * math.sqrt(w)) return cosif __name__ == '__main__': v1 = [1, 1, 1, 1, 1, 1, 1, 1, 0, 0] v2 = [1, 0, 1, 1, 1, 1, 1, 1, 1, 1] l = cos(v1, v2) print l 计算出的相似度为： 0.824957911384 说明这两句话基本相等 这是一些基本的相似度计算方法。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Reverse Integer(#7)]]></title>
      <url>%2F2017%2F08%2F28%2FLeetCode-Reverse-Integer-7%2F</url>
      <content type="text"><![CDATA[Reverse Integer(#7) 编号 名称 等级 7 Reverse Integer Easy 思路这个题可是满满的坑，测试用例个人感觉给的很好，考虑到了一些临界值的情况，提交了六次才通过，或许是代码很垃圾。其实是个人很垃圾。 主要是判断反转，要求各个数进行反转，这让我想到了之前的字符串反转的试题(Reverse String(#344))。但是这个试题要比之前的考虑的多，因为字符串反转不需要考虑范围，而数字反转就要考虑他的范围。 判断正负，如果是负数，因为在后面进行绝对值的时候会无法进行正负判断，从而无法获取到正确的结果。 判断字符取绝对值后是否越界，在这里有个问题 如果使用 Math.abs() 这个方法的话,传入整型则返回整型，如果整型越界，则不变。 判断翻转后是否越界。 总的来说就这个三个步骤。 代码中的 f 是为了判断是否为负数，将传入的数转化为 long 类型有助于后期，防止 int 越界。 代码1234567891011121314class Solution &#123; public int reverse(int x) &#123; boolean f = x &lt; 0; long a = x; StringBuilder sb = new StringBuilder(); a = a &lt; 0 ? -a : a; sb.append(a); long out = f ? -Long.parseLong(sb.reverse().toString()) : Long.parseLong(sb.reverse().toString()); if (out &gt;= Integer.MAX_VALUE || out &lt;= Integer.MIN_VALUE) &#123; return 0; &#125; return (int) out; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Single Number(#136)]]></title>
      <url>%2F2017%2F08%2F27%2FLeetCode-Single-Number-136%2F</url>
      <content type="text"><![CDATA[Single Number(#136) 编号 名称 等级 136 Single Number Easy 思路题目要求在给出的数组中，要求找到一个单独的数字。看了一些答案后总结出来了一个运算规律。 按位异或 N ^ N = 00 ^ N = N 通过这个规律，那么只要对数组里面的每个数进行按位异或就好。相同的数字按位异或就会是 0 ， 剩下的那个单独的数字按位异或还是自己本事，就会直到最后的结论。 代码123456789class Solution &#123; public int singleNumber(int[] nums) &#123; int ans = 0; for(int i = 0; i &lt; nums.length;i++) &#123; ans ^= nums[i]; &#125; return ans; &#125;&#125; 扩展这种方法还适用于字符串中的唯一一个元素。 代码123456789101112131415class Main &#123; public static void main(String[] args) &#123; char[] chars = new char[]&#123;'a', 'a', 'b'&#125;; System.out.println(singleChar(chars)); &#125; // 该程序是判断 数字/字符/字符串。toArrayChar 中的唯一存在的字符 // 主要方法位 N ^ 0 = N; N ^ N = N private static char singleChar(char[] chars) &#123; int ans = 0; for (int aChar : chars) &#123; ans ^= aChar; &#125; return (char) ans; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Move Zeroes(#283)]]></title>
      <url>%2F2017%2F08%2F27%2FLeetCode-Move-Zeroes-283%2F</url>
      <content type="text"><![CDATA[Move Zeroes(#283) 编号 名称 等级 283 Move Zeroes Easy 思路该题要求如果数组中含有 0 ，就把 0 放置到最后，采用简单的排序手法，只是不是在比较大小，而是判断是否为 0 ，如果是 0 就与下一个发生交换。 代码12345678910111213public class Solution &#123; public void moveZeroes(int[] nums) &#123; for (int i = 0; i &lt; nums.length; i++) &#123; for (int j = i + 1; j &lt; nums.length; j++)&#123; if(nums[i] == 0)&#123; int tem = nums[j]; nums[j] = nums[i]; nums[i] = tem; &#125; &#125; &#125; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Judge Route Circle(#657)]]></title>
      <url>%2F2017%2F08%2F16%2FLeetCode-Judge-Route-Circle-657%2F</url>
      <content type="text"><![CDATA[Judge Route Circle(#657) 编号 名称 等级 657 Judge Route Circle Easy 思路这个题先上图 终于有一次 前10% 了 （也许是人少而已），总体来说这个题其实很水。 判断机器人是否回到了原处。只要机器人前进和后退，左移和右移走的路一样就肯定在原点。所以只要统计一下就好。 代码Java 代码 1234567891011121314151617181920212223242526public class Solution &#123; public boolean judgeCircle(String moves) &#123; int lCount = 0; int rCount = 0; int dCount = 0; int uCount = 0; char step[] = moves.toCharArray(); for (int i = 0; i &lt; step.length; i++) &#123; switch(step[i]) &#123; case 'L': lCount++; break; case 'R': rCount++; break; case 'U': uCount++; break; case 'D': dCount++; break; &#125; &#125; (lCount == rCount &amp;&amp; uCount == dCount) ? true : false; &#125;&#125; Kotlin 代码 12345678910111213141516171819class Solution &#123; fun judgeCircle(moves: String): Boolean &#123; val m = moves.toCharArray() var lSum = 0 var dSum = 0 m.map &#123; when (it) &#123; 'L' -&gt; lSum += 1 'R' -&gt; lSum -= 1 'D' -&gt; dSum += 1 'U' -&gt; dSum -= 1 &#125; &#125; if (lSum == 0 &amp;&amp; dSum == 0) &#123; return true &#125; return false &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Longest Uncommon Subsequence I(#521)]]></title>
      <url>%2F2017%2F08%2F16%2FLeetCode-Longest-Uncommon-Subsequence-I-521%2F</url>
      <content type="text"><![CDATA[LeetCode:Longest Uncommon Subsequence I(#521) 编号 名称 等级 521 Longest Uncommon Subsequence Easy 思路没读懂题，但是做出来了，而且这个题就是个水题，个人理解就是如果两个字符串一样，就输出 -1 否则输出最长的。 代码123456789public class Solution &#123; public int findLUSlength(String a, String b) &#123; if (a.equals(b))&#123; return -1; &#125;else&#123; return a.length() &gt; b.length() ? a.length() : b.length(); &#125; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Next Greater Element I(#496)]]></title>
      <url>%2F2017%2F08%2F13%2FLeetCode-Next-Greater-Element-I-496%2F</url>
      <content type="text"><![CDATA[Next Greater Element I(#496) 编号 名称 等级 496 Next Greater Element I Easy 思路刚刚开始的思路是在第二个数组中寻找第一个数组的元素，如果找到并且后面还有比他大的就返回那个大数，否则就返回 -1 。 代码1234567891011121314151617181920212223public class Solution &#123; public int[] nextGreaterElement(int[] findNums, int[] nums) &#123; int[] out = new int[findNums.length]; for (int i = 0; i &lt; findNums.length; i++) &#123; for (int j = 0; j &lt; nums.length; j++) &#123; if (findNums[i] == nums[j]) &#123; for (int k = 1; k &lt; nums.length - j; k++) &#123; if (j + 1 &lt; nums.length &amp;&amp; findNums[i] &lt; nums[j + k]) &#123; out[i] = nums[j + k]; findNums[i] = 0; break; &#125; &#125; if (findNums[i] != 0) &#123; out[i] = -1; break; &#125; &#125; &#125; &#125; return out; &#125;&#125; 这个代码在前面的测试数据可以过去，但是当测试数据到了后面的数的时候就 gg 了。 然后又又又看大神的代码。 通过 Stack 和 Map 进行操作。 代码123456789101112public int[] nextGreaterElement(int[] findNums, int[] nums) &#123; Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); for (int num : nums) &#123; while (!stack.isEmpty() &amp;&amp; stack.peek() &lt; num) map.put(stack.pop(), num); stack.push(num); &#125; for (int i = 0; i &lt; findNums.length; i++) findNums[i] = map.getOrDefault(findNums[i], -1); return findNums;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Nim Game(#292)]]></title>
      <url>%2F2017%2F08%2F13%2FLeetCode-Nim-Game-292%2F</url>
      <content type="text"><![CDATA[Nim Game(#292) 编号 名称 等级 292 Nim Game Easy 思路这个题是让算几个石头的情况下会赢和会输。参考了一下大神答案，其中有一个很有趣，也很通俗易懂。 巧妙的找到了规律，只要是 4 的倍数，就会输。 代码123456public class Solution &#123; public boolean canWinNim(int n) &#123; if (n &lt;= 0) return false; return n % 4 != 0; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Kotlin 扩展函数/属性]]></title>
      <url>%2F2017%2F08%2F12%2FKotlin-%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0-%E5%B1%9E%E6%80%A7%2F</url>
      <content type="text"><![CDATA[前言扩展函数和扩展属性在 Java 里面是没有的，这样的话很好的弥补了 Java 的缺陷。所谓扩展方法或者属性是指在原来没有的方法或者属性上进行扩展，不会改变原来的属性和方法。 扩展函数声明扩展函数的方法是先写上要扩展的类名，之后在写扩展方法。 对 Book 这个类进行扩展，这个类只有一个方法，在我们不修改 Book 类的前提下对其进行扩展。 123456class Book(val name: String, var price: Int) &#123; val ISBN: Int = 123456789 fun add() &#123; println("Add a book,name is $name,price is $price,ISBN is $ISBN") &#125;&#125; 1fun Book.show() = add() 这样我们便完成了对 Book 类进行扩展。 在扩展函数中，可以使用原有类的方法，变量。 1234fun main(args: Array&lt;String&gt;) &#123; val book = Book("红楼梦", 50) book.show()&#125; 扩展是静态解析的扩展不能真正的修改他们所扩展的类。通过定义一个扩展，你并没有在一个类中插入新成员， 仅仅是可以通过该类型的变量用点表达式去调用这个新函数。 扩展属性扩展属性不能初始化器,所以只能是使用显示 get/set 方法进行定义。 任就采用上面的例子。给 Book 添加一个 profit 属性。 像这个样子，我们就定义了这个类的扩展属性 12val Book.profit: Int get() = price - 20 12345fun main(args: Array&lt;String&gt;) &#123; val book = Book("红楼梦", 50) book.show() println("book's profit is $&#123;book.profit&#125;")&#125; 更多关于扩展函数/方法的例子可以参考官方网站 kotlin官方文档(中文) kotlin官方文档(英文)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Kotlin初步学习]]></title>
      <url>%2F2017%2F08%2F11%2Fkotlin-%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[最近项目逐渐使用 Kotlin 代替 Java 。 感受关于 Kotlin 的最大的感受就是：代码少写了很多。 相遇最开始知道这个语言是在使用 IDEA 的时候，当时只是知道，并没有过多的关心，也并没有去了解，更不要说是使用了。直到今年的 Google I/O 提出来 Kotlin 被上升到 Android 开发的一级开发语言。整个互联网沸腾了一把，大家纷纷百度 Kotlin 是什么？当然也包括我。 相识Kotlin 的学习使我感觉到了欣喜，为什么这么说呢？语法简洁，和 Java 基本兼容。也就是 Kotlin 一出生便是站在 Java 的肩膀上。很好的融入了 Java 生态，基本上说 Java 能做的 Kotlin 都能做，而且在代码方面更加简洁高效。 从 Kotlin 诞生开始，便有了 JetBrains 的编译器支持，毕竟是自己家的语言，而且 IDEA 也一直宣传做 Capable and Emic IDE rgonofor JVM ，而且目前还有了 Google 的支持。前两天 Jake Wharton 加入了 Google 的 Android Formwork 的 Kotlin 团队。 就当前情况看来 Kotlin 会有一个不错的发展。 相遇前面说了 Kotlin 从一诞生就有强大的编译器支持。刚刚开始不会 Kotlin 的时候，全靠 IDEA 的 Java 转 Kotlin 通过对比 Java 和 Kotlin 的语法，也就慢慢的掌握了 Kotlin 的语法规则。 后来开始使用 Kotlin 写了一下 struts2,表示完全兼容。 尝试用 Kotlin 写了一下 SpringMVC 4 应该是不兼容或者是我的打开方式不对， 在 Controller 发生错误，不过其他层并没有错误。好的是 Spring 5 已经支持 Kotlin 。 在 Android 方面(并没有使用 Anko)，只是简单的使用了扩展。 1apply plugin: 'Kotlin-android-extensions' 再也不用写 findViewById(),直接用控件 id 就可以完成操作。 其他慢慢尝试一些 黑魔法 😝 待补充(毕竟我也才开始慢慢学习) 学习资源推荐官方文档(英文) 官方文档(中文) 冰封博客 Kotlin 社区]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Island Perimeter(#463)]]></title>
      <url>%2F2017%2F08%2F08%2FLeetCode-Island-Perimeter-463%2F</url>
      <content type="text"><![CDATA[Island Perimeter(#463) 编号 名称 等级 463 Island Perimeter Easy 思路思考了很久无解😥，看了一下大神的解题，不得不说很巧妙。 首先遍历地图，如果这个方格是选中的，那么边数加 4 。然后分别看该方块的上和左是否被选中或者越界。如果是那么在原来的情况下减 2 。这个推算一下就知道了。 只能说这个规律找的很巧妙。 代码12345678910111213141516171819public class Solution &#123; public int islandPerimeter(int[][] grid) &#123; int p = 0; for ( int i = 0; i &lt; grid.length; i++)&#123; for (int j = 0; j &lt; grid[0].length; j ++)&#123; if(grid[i][j] == 1)&#123; p += 4; if(i - 1 &gt;= 0 &amp;&amp; grid[i - 1][j] == 1)&#123; p -= 2; &#125; if(j - 1 &gt;= 0 &amp;&amp; grid[i][j - 1] == 1)&#123; p -= 2; &#125; &#125; &#125; &#125; return p; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Fizz Buzz(#412)]]></title>
      <url>%2F2017%2F08%2F04%2FLeetCode-Fizz-Buzz-412%2F</url>
      <content type="text"><![CDATA[Fizz Buzz(#412) 编号 名称 等级 412 Fizz Buzz Easy 思路该题就是 当是三的倍数 输出 Fizz ，五的倍数输出 Buzz ，十五的倍数是 Fizz Buzz。 这题好水，唯一要注意的是先判断 15 在判断其他。 代码1234567891011121314151617public class Solution &#123; public List&lt;String&gt; fizzBuzz(int n) &#123; List&lt;String&gt; list = new ArrayList(); for (int i = 1; i &lt;= n ; i ++ )&#123; if(i % 15 == 0)&#123; list.add("FizzBuzz"); &#125;else if(i % 3 == 0)&#123; list.add("Fizz"); &#125;else if(i % 5 == 0)&#123; list.add("Buzz"); &#125;else&#123; list.add(String.valueOf(i)); &#125; &#125; return list; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Reverse String(#344)]]></title>
      <url>%2F2017%2F08%2F04%2FLeetCode-Reverse-String-344%2F</url>
      <content type="text"><![CDATA[Reverse String(#344) 编号 名称 等级 344 Reverse String Easy 思路解题思路请看 #557 Reverse Words In a String III 代码12345public class Solution &#123; public String reverseString(String s) &#123; return new StringBuilder(s).reverse().toString(); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Merge Two Binary Trees(#617)]]></title>
      <url>%2F2017%2F08%2F04%2FLeetCode-Merge-Two-Binary-Trees-617%2F</url>
      <content type="text"><![CDATA[Merge Two Binary Trees(#617) 编号 名称 等级 617 Merge Two Binary Trees Easy 思路试题已经给出了 TreeNode 的数据结构。就是将数据的每一项都加起来。通过递归可以完成。 需要注意的是 t1 或者 t2 可能为空。 代码123456789101112131415161718192021222324/** * Definition for a binary tree node. * public class TreeNode &#123; * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) &#123; val = x; &#125; * &#125; */public class Solution &#123; public TreeNode mergeTrees(TreeNode t1, TreeNode t2) &#123; if (t1 == null) &#123; return t2; &#125; if (t2 == null) &#123; return t1; &#125; t1.val += t2.val; t1.left = mergeTrees(t1.left, t2.left); t1.right = mergeTrees(t1.right, t2.right); return t1; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Reverse Words in a String III(#557)]]></title>
      <url>%2F2017%2F08%2F02%2FLeetCode-Reverse-Words-in-a-String-III-557%2F</url>
      <content type="text"><![CDATA[Words in a String III(#557) 编号 名称 等级 557 Words in a String III Easy 思路这个题是要将给出的句子中的每个单词进行反转，这个反转的方法在 StringBuilder/StringBuffer 都用提供。所以整个题的难度会化简的很小。关键在知道不知道有这个方法。 首先对字符串进行分割，分割为每个单词，在对么个单词进行反转。 代码1234567891011121314151617181920212223242526272829class Solution &#123; fun selfDividingNumbers(left: Int, right: Int): List&lt;Int&gt; &#123; var result = ArrayList&lt;Int&gt;() for (i in left..right) &#123; var list = ArrayList&lt;Int&gt;() val arrayList = foo(i, list) var sum = 0 arrayList.map &#123; if (it != 0 &amp;&amp; i % it == 0) &#123; sum += 1 &#125; &#125; if (sum == arrayList.size) &#123; result.add(i) &#125; &#125; return result &#125; fun foo(num: Int, list: ArrayList&lt;Int&gt;): ArrayList&lt;Int&gt; &#123; if ((num / 10 == 0) and (num % 10 == 0)) &#123; return list &#125; list.add(num % 10) val nums = num / 10 foo(nums, list) return list &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Distribute Candies(#575)]]></title>
      <url>%2F2017%2F08%2F02%2FLeetCode-Distribute-Candies-575%2F</url>
      <content type="text"><![CDATA[Distribute Candies(#575) 编号 名称 等级 575 Distribute Candies Easy 思路这个题就是看分蛋糕🍰，简单的说就是 种类大于上限的时候，只能拿最多，如果种类少于上限的话，那就是种类了。就是这样 代码12345678910public class Solution &#123; public int distributeCandies(int[] candies) &#123; List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); for (int candy : candies) &#123; list.add(candy); &#125; Set&lt;Integer&gt; set = new HashSet&lt;&gt;(list); return set.size() &gt; candies.length/2 ? candies.length/2 : set.size(); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Number Complement(#476)]]></title>
      <url>%2F2017%2F08%2F02%2FLeetCode-Number-Complement-476%2F</url>
      <content type="text"><![CDATA[Number Complement(#476) 编号 名称 等级 476 Number Complement Easy 思路没思路 为什么大神说这个显而易见的呢？严重怀疑我的智商。Math.pow() 是用来将二进制转化为十进制。但是为什么是 i&lt;num ？ 因为i的值为 1 3 7 15 … 而原来的数的二进制 101 和 反码 010 相加为 111 为 7。 所以用相加的值减去原来的值就是 反码 的值 代码代码为 Description 中的。 1234567891011public class Solution &#123; public int findComplement(int num) &#123; int i = 0; int j = 0; while (i &lt; num)&#123; i += Math.pow(2, j); j++; &#125; return i - num; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Keyboard Row(#500)]]></title>
      <url>%2F2017%2F08%2F02%2FLeetCode-Keyboard-Row-500%2F</url>
      <content type="text"><![CDATA[KeyBoard Row(#500) 编号 名称 等级 500 KeyBoard Row Easy 思路他的要是是检查输入的字符串是否是键盘的同一行。首先想到的是正则匹配。匹配是否是同一行，不是的话 break。是的话一直匹配。匹配结束的时候计算匹配数是否和单词长度一样。如果一样，表示匹配成功。其中正则表达式不太会写，而且运用了一个集合转换为数组的方法。 代码12345678910111213141516171819202122232425import java.util.regex.Pattern;public class Solution &#123; public String[] findWords(String[] words) &#123; Set&lt;String&gt; st = new HashSet&lt;&gt;(); String[] key = new String[]&#123;"[qwertyuiopQWERTYUIOP]", "[ASDFGHJKLasdfghjkl]", "[zxcvbnmZXCVBNM]"&#125;; for (int i = 0; i &lt; words.length; i++) &#123; char[] c = words[i].toCharArray(); int count = 0; for (int k = 0; k &lt; key.length; k++) &#123; for (int j = 0; j &lt; c.length; j++) &#123; if (Pattern.matches(key[k], String.valueOf(c[j]))) &#123; count++; &#125; else &#123; break; &#125; &#125; &#125; if (count == c.length) &#123; st.add(words[i]); &#125; &#125; String[] str = st.toArray(new String[st.size()]); return str; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Two Sum (#1)]]></title>
      <url>%2F2017%2F08%2F01%2FLeetCode-Two-Sum-1%2F</url>
      <content type="text"><![CDATA[Two Sum(#1) 编号 名称 等级 1 Two Sum Easy 思路题目的意思是给出一个数组 nums ，和一个 target 要求用数组内的数相加完成 target。 这个题相对用了 暴力求解 方法不是很优。排名为 25.45% 时间复杂度有点大。看来还是要后期优化一下或者参考一下大神做法。 代码1234567891011121314public class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; int[] sum=new int[2]; for(int i=0;i&lt;nums.length;i++)&#123; for (int j = i+1; j&lt;nums.length;j++)&#123; if(target == nums[i] + nums [j])&#123; sum[0] = i; sum[1] = j; &#125; &#125; &#125; return sum; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode:Array Partition I(#561)]]></title>
      <url>%2F2017%2F08%2F01%2FLeetCode-Array-Partition-I-561%2F</url>
      <content type="text"><![CDATA[Array Partition(#561) 编号 名称 等级 561 Array Partition I Easy 思路该题相对简单，也比较水，差评达到了 222,好评才 81。解决思路也好理解。通过排序数组，将奇数位进行相加即可。 代码12345678910public class Solution &#123; public int arrayPairSum(int[] nums) &#123; Arrays.sort(nums); int sum=0; for (int i = 0;i &lt; nums.length; i+=2)&#123; sum += nums[i]; &#125; return sum; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hamming Distance 问题]]></title>
      <url>%2F2017%2F08%2F01%2FHamming-Distance-%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[前言经过了好久，终于开始学习算法，刷算法题了。从LeetCode上开始刷题。也是完成之前立下的flag。 Hamming Distance(#461) 编号 名称 等级 461 Hamming Distance Easy 思路这个试题 主要是计算 两个数源码中有几位不相同。 对于这个问题，首先我想到的是用按位异或(^)，按位异或后再用递归移位来计算。这仅仅是一个想法。但是思考了好久都没有写出来。无奈之下只好到 Discuss 看一下。 原来还有这个奇淫技巧。。。。。 Java 是提供了 API 来统计原码中的 1 的。这个方法叫做 binCount() 。 这个题就这样解决了。 代码12345public class Solution &#123; public int hammingDistance(int x, int y) &#123; return Integer.bitCount(x ^ y); &#125;&#125; Total Hamming Distance(#477) 编号 名称 等级 477 Total Hamming Distance medium 思路该题只不过是把给出的数组中的每两个数的 Hamming Distance 相加。 还是使用 #461 的方法。 代码12345678910public class Solution &#123; public int totalHammingDistance(int[] nums) &#123; for (int i = 0; i&lt; nums.length-1;i++)&#123; for(int j = i+1;j&lt;nums.length;j++)&#123; sum += Integer.bitCount(nums[i] ^ nums[i + 1]); &#125; &#125; return sum; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vim 基础学习]]></title>
      <url>%2F2017%2F07%2F23%2Fvim-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[命令模式默认为命令模式，要进入编辑模式 按下 a i o a 在光标之后进行插入 i 在光标之前进行插入 o 换行插入 I 在行首进行编辑 A 在行末进行编辑 O 向上插入 编辑模式按下 ESC 退回到命令模式 末行模式: 进入末行模式末行模式按下 ESC 回到编辑模式 命令 功能 wq 保存退出 x 保存退出 w 保存 q 退出 移动定位 命令 说明 h 左移 j 下移 k 上移 l 右移 G 直接移动到末尾 行号+G 快速定位行 gg 快速回到第一行 w 下一个单词 q! 不保存退出 编辑 命令 说明 dd 剪切/删除一行 num-dd 剪切/删除几行 从当前光标开始 D 删除光标之后 d0 删除光标之前的D x 删除后面的 X 删除前面的 u 撤销 ctrl +r 返撤销 yy 复制 mun yy 复制几行 r 进行替换 替换末行模式 将5，15的main替换成MAIN % 全部5,15s/main/MAIN/g%s///g 查找命令模式 / +word n 下一个N 上一个]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python 实现微信打飞机]]></title>
      <url>%2F2017%2F06%2F22%2Fpython-%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%89%93%E9%A3%9E%E6%9C%BA%2F</url>
      <content type="text"><![CDATA[微信打飞机 python 实现所用技术和软件python 2.7 pygame 1.9.3 pyCharm 准备工作 安装好 pygame 在第一次使用 pygame 的时候，pyCharm 会自动 install pygame。 下载好使用的素材。 技术实现初始化 pygame首先要初始化 pygame ，之后设定一些基本的要点，比如窗口大小（尽量避免魔法数字），窗口标题以及背景图像。pygame 通过加载图片，最后返回一个 surface 对象，我们不需要关系图片的格式。但是通过 convert() 这个函数，会使我们的图片转换效率提高。 1234567891011121314151617# coding=utf8import pygameWIDTH = 480HEIGHT = 800pygame.init()screen = pygame.display.set_mode((WIDTH, HEIGHT))pygame.display.set_caption('飞机大战')background = pygame.image.load('resources/image/background.png').convert()screen.fill(0)screen.blit(background, (0, 0)) 默认图片左上角为原点 (0,0)。 显示窗口如果我们这样设定，当我们运行的时候，窗口会一闪而过，并不会出现我们想象的画面。因为窗口只是运行一下就会关闭，所以我们要写一个循环，使窗口一直保持出现。当然如果我们简单的写一个 while True那么我们的程序就出现了死循环，卡死。 所以还需要写个退出。 12345678while True: screen.fill(0) screen.blit(background, (0, 0)) for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() exit() 显示飞机首先我们要初始化我们的主角飞机 仍旧需要加载我们需要的资源，我们的资源文件里已经准备好各种各样的飞机，但是他们都在一张切图上。 同时我们的资源文件里还有一个叫做 shoot.pack 的文件，里面记录了每个图片所在的位置。 我们通过下面的代码加载资源图片，并且获得我们需要的主角飞机。 123plane_img = pygame.image.load('resources/image/shoot.png')player = plane_img.subsurface(pygame.Rect(0, 99, 102, 126)) 将 player 显示在屏幕上，并且刷新屏幕 123screen.blit(player, [100, 400])pygame.display.update() 效果如下 让飞机 “飞” 起来飞机已经出现在我们的屏幕上了，现在需要让飞机动起来让他可以上下左右的移动。 首先要获取键盘事件，获取键盘上什么按键被按下。 1key_pressed = pygame.key.get_pressed() 通过 key_pressed 获取当前的键盘按键。并进行判断，这里写了四个函数进行对 player 移动。 12345678if key_pressed[pygame.K_w] or key_pressed[pygame.K_UP]: player.moveUp()if key_pressed[pygame.K_s] or key_pressed[pygame.K_DOWN]: player.moveDown()if key_pressed[pygame.K_a] or key_pressed[pygame.K_LEFT]: player.moveLeft()if key_pressed[pygame.K_d] or key_pressed[pygame.K_RIGHT]: player.moveRight() 下一步就是完善这四个方法。 简单的说就是按下方向键的时候(w,a,s,d)飞机向四周移动，但是不能移动离开屏幕。 此时我们就应该把我们的飞机形成一个类，类里面有控制飞机的方法。 这里写类比较麻烦一点 Player的出现首先要明确一点，这个类需要什么。 我们之前对 player 有什么操作？定义了他的图片和他出现的位置。所以我们的构造方法就要初始化这些值。所有的这些对象，我们在 pygame 里叫做精灵(sprite)，这个概念也在其他游戏开发中使用。 123456class Player(pygame.sprite.Sprite): def __init__(self, plane_img, player_rect, player_position): pygame.sprite.Sprite.__init__(self) self.img = plane_img.subsurface(player_rect) self.rect = player_rect self.rect.topleft = player_position 简单的说就是获取飞机的图片，初始化飞机的矩形区域。rect 该属性会获得四个值。分别是左上角 x ,y 坐标，矩形的宽度。topleft 初始化飞机的左上角坐标，也就是飞机出现的位置。如下图所示。 player的控制当飞机出现了，我们就应该实现我们在循环里写的方法。我们首先要判断它还在不在屏幕内，不能让飞机飞出屏幕。可以通过 rect.top,rect.bottom,rect.left,rect.right四个方法获取飞机图片的上下左右四个边界值。 这样我们就能对飞机进行判断 1234567891011121314151617181920212223def moveUp(self): if self.rect.top &lt;= 0: self.rect.top = 0 else: self.rect.top -= self.movedef moveDown(self): if self.rect.bottom &gt;= HEIGHT: self.rect.bottom = HEIGHT else: self.rect.bottom += self.movedef moveLeft(self): if self.rect.left &lt;= 0: self.rect.left = 0 else: self.rect.left -= self.movedef moveRight(self): if self.rect.right &gt;= WIDTH: self.rect.right = WIDTH else: self.rect.right += self.move 这里的 move 是我们对飞机的移动的位移定义的常量。 让子弹飞子弹要沿着发射方向射出去。可以在屏幕上一直移动，直到移出屏幕。我们只要有定义一个子弹对象，让这个对象显示在屏幕上就可以。先定义飞机子弹类，基本和定义 player 一样，获得图片，裁剪图片，设置图片初始位置，在屏幕上显示图片123456789101112131415161718192021222324class Bullet(pygame.sprite.Sprite): def __init__(self, bullet_image, bullet_position): pygame.sprite.Sprite.__init__(self) self.image = bullet_image self.rect = self.image.get_rect() self.rect.midbottom = bullet_position # 省略其他代码# 加载子弹图片bullet_rect = pygame.Rect(69, 78, 9, 21)bullet_img = plane_img.subsurface(bullet_rect)# 省略其他代码while True: # 省略其他代码 screen.blit(bullet.img, bullet.rect) # 省略其他代码 运行结果 下一步就是让飞机的子弹跟随飞机。我们需要在 Player 类里面添加方法。首先我们规定，按下空格发射子弹。12if key_pressed[pygame.K_SPACE]: player.shoot() 完善shoot方法。子弹类已经有了，我们每次只要在按下空格的时候创建一个对象就好。首先要每次传入一个子弹的图像，然后还有出现位置，这样子弹才能跟随飞机。定义一个pygame.sprite.Group() 来存放精灵组。这样我们就能把我们的子弹都放进去。 123def shoot(self, bullet_img): bullet = Bullet(bullet_img, self.rect.midtop) self.bullets.add(bullet) 每次按下空格的时候传入一个子弹图片 12if key_pressed[pygame.K_SPACE]: player.shoot(bullet_img) 最后我们只需要在屏幕上进行子弹的绘制即可。 1player.bullets.draw(screen) 这样我们的子弹就会跟随飞机出现。 下一步就是让子弹在屏幕上移动。 创建移动的方法。 12def move(self): self.rect.top -= self.move 因为我们的子弹在 bullets 里，所以我们仅需要一个循环，遍历每个子弹，之后移动即可。当子弹移出屏幕的时候我们只要在 bullets 中移出就可以。 12345for bullet in player.bullets: bullet.bulletMove() if bullet.rect.bottom &lt; 0: player.bullets.remove(bullet) 结果 这个和我们的预期还是有差别的，频率太快了。 关于pygame 的键盘重复事件 官方好像并没有这个设置。那么我们只能在添加一个计数器，通过计算器的数值来判断子弹是否发射。这里的数值是多次测试后，自己感觉一个比较满意的频率。可以自己调整。 1234# 省略其他代码# 子弹频率SHOOT_PC = 0 在键盘事件中我们需要判断频率。 1234if key_pressed[pygame.K_SPACE]: SHOOT_PC = SHOOT_PC + 1 if SHOOT_PC % 400 == 0: player.shoot(bullet_img) player 的飞机就算基本绘制好了 绘制敌机下一步就是绘制敌机。敌机是从屏幕上方移动到屏幕下方。我们任就需要一个类来设置敌机。设置类任就和我们前面的差不多，加载资源，设置 rect，设置位置。 1234567891011121314151617# 加载敌机图片enemy_rect = pygame.Rect(267, 347, 57, 51)enemy_img = plane_img.subsurface(enemy_rect)enemy_position = [200, 200]enemy = Enemy(enemy_img, enemy_position)# 敌机类class Enemy(pygame.sprite.Sprite): def __init__(self, enemy_img, enemy_position): pygame.sprite.Sprite.__init__(self) self.image = enemy_img self.rect = self.image.get_rect() self.rect.topleft = enemy_position 最后在屏幕显示出来 1screen.blit(enemy_img, enemy_rect) 现在我们就应该想想敌机的特点了，其实他和子弹的特点基本一直，只不过方向不一样而已。还有一点是敌机是随机生成的。 123456# 敌机计数器EnEMY_PC = 0# 省略代码enemy_position = [random.randint(0, WIDTH - enemy_rect.width), 0] enemy = Enemy(enemy_img, enemy_position) enemies.add(enemy) 我们随机在顶部生成飞机。 这个方式的情况和子弹其实差不多，我们应该给出现敌机确定一个频率。 123456if EnEMY_PC % 500 == 0: enemy_position = [random.randint(0, WIDTH - enemy_rect.width), 0] enemy = Enemy(enemy_img, enemy_position) enemies.add(enemy)EnEMY_PC = EnEMY_PC + 1 这样的话出现情况就变得缓慢。下一步实现敌机的移动。敌机的移动原理和子弹的移动其实也是一样的。不多解释 移动方法12def enemyMove(self): self.rect.top += self.move 移动实现123456for enemy in enemies: enemy.enemyMove() if enemy.rect.top &gt; HEIGHT: enemies.remove(enemy) enemies.draw(screen) 碰撞检测飞机和敌机还有子弹都有了，我们现在需要进行完成碰撞检测。有下面几种场景。 敌机和玩家碰撞在一起 子弹和敌机碰撞在一起 无论是那种情况的碰撞，其实就是两张图片有了交集。如图pygame 给我们提供了碰撞检测的方法。首先两个对象必须是 sprite 。通过 pygame.sprite.collide_rect() 进行碰撞检测。 我们先进行一个测试12if pygame.sprite.collide_rect(enemy, player): print '检测成功' 结果 检测成功 此时我们就可以完成,当玩家和敌机发生碰撞,游戏结束,当子弹和敌机碰撞,敌机消失。 同样的 pygame 给我们提供了一个 pygame.sprite.groupcollide() 用于 Group 之间的碰撞检测.当发生碰撞的时候这两个对象都会在 Group 中移出。 用于检测敌机和子弹1pygame.sprite.groupcollide(enemies, player.bullets, 1, 1) 敌机和子弹的关系已经和好的处理。处理敌机和玩家飞机的关系。 我们需要在 Player 里添加一个属性判断当前玩家是否被击中的 boolean 值.当集中的时候把属性改为 True.当为 True 的时候游戏结束.也就是我们一开始设置的循环就会结束.所以我们需要更改之前写的一些代码,使它更加完善。 在 Player 类里面添加是否击中属性。 1self.is_hit = False 修改循环 12345678RUN = Truewhile RUN: # 省略代码 if pygame.sprite.collide_rect(enemy, player): player.is_hit = True RUN = False # 省略代码 执行结果 当玩家被击中的时候,在显示一张 GameOver 图片提示 12345678910111213gameOver = pygame.image.load(&apos;resources/image/gameover.png&apos;)while GAMEOVER: screen.fill(0) screen.blit(gameOver, (0, 0)) pygame.display.update() # 退出程序 for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() exit() 做到这里基本算是实现了飞机大战.但是还有很多细节处理。 细节处理精细的碰撞检测从图上看,当敌机看似还没有和我们接触时,但是已经 GameOver 了。实际情况是这样的,所有的图片都是矩形,当两张图片的矩形边框线碰撞的时候,就算两个对象碰撞,所以我们要更加精细的使用碰撞检测。 我们可以按着图片中心的某个长度为半径，在这个半径内发生碰撞才是碰撞。 pygame 给我们提供了这样的方法。pygame.sprite.collide_circle_ratio() 可以自己算出一个半径，作为检测半径。并且可以做出一个有效检测的百分比。 123if pygame.sprite.collide_circle_ratio(0.6)(player, enemy): player.is_hit = True RUN = False 同样，子弹和敌机也可以修改，让碰撞检测更加精细。修改后面的两个参数，使得碰撞检测更加精细。 1pygame.sprite.groupcollide(enemies, player.bullets, 0.6, 0.8) 动画做了怎么就，感觉它没有一点动效，感觉死气沉沉的。无论是飞机飞行，还是飞机被击中，都没有一个明确的反馈。对于2d游戏，动画其实就是一张一张的图片不停的变化。就和电影的原理类似。要想让我们的飞机动起来，我们需要定义一个列表来存放这些图片，然后写个循环，让他一直不停的更换图片就好。 首先我们更改我们的主角 Player任就是老套路，加载图片。把加载的图片放到list 里。 123456789player_rect = [pygame.Rect(0, 99, 102, 126), pygame.Rect(165, 360, 102, 126), pygame.Rect(165, 234, 102, 126), pygame.Rect(330, 624, 102, 126), pygame.Rect(330, 498, 102, 126), pygame.Rect(432, 624, 102, 126)]player_position = [100, 400]player = Player(plane_img, player_rect, player_position) 之后在 Player 添加循环的方法。获取图片。 123456789101112class Player(pygame.sprite.Sprite): def __init__(self, plane_img, player_rect, player_position): pygame.sprite.Sprite.__init__(self) self.image = [] for i in range(len(player_rect)): self.image.append(plane_img.subsurface(player_rect[i]).convert_alpha()) self.rect = player_rect[0] self.rect.topleft = player_position self.img_index = 0 self.move = 1 self.bullets = pygame.sprite.Group() self.is_hit = False 飞机正常飞行的图片只有两张。所以我们要循环变化这两张图片。所以每发射一个子弹，图片变化两张。 12345678910screen.blit(player.image[player.img_index], player.rect)player.img_index = SHOOT_PC / 248# 省略代码if key_pressed[pygame.K_SPACE]: if SHOOT_PC % 495 == 0: player.shoot(bullet_img) SHOOT_PC = SHOOT_PC + 1 if SHOOT_PC &gt;= 495: SHOOT_PC = 0 正常发射子弹的动画效果已经做完。我们还需要进行被击中爆炸的动画效果。 击中的原理和正常也一样。只不过先要判断当前飞机状态，是否被击中。 12345678910111213if not player.is_hit: screen.blit(player.image[player.img_index], player.rect) player.img_index = SHOOT_PC / 248else: player.img_index = player_shoot / 248 screen.blit(player.image[player.img_index], player.rect) player_shoot += 30 if player_shoot &gt; 495: RUN = False# 省略代码if pygame.sprite.collide_circle_ratio(0.6)(player, enemy): player.is_hit = True 248，30，495，1457 这些数字是什么？如何计算出来的。先说 495 这个数字。495 这个数字很随便，只是控制子弹的发射间隔。完全可以自定义。但是495这个数字一旦确定，其他三个数字基本确定。248 为 495 的一半，因为发射一个子弹，图片要变化两张。30 这个数字基本也是自定义的，只要比1大就好，他影响了结束动画出现的时间。 1488 这个数字是通过 248 确定的，是 248 的 6倍，因为飞机被射击后会有四张图片的显示。同理，把敌机接触子弹的动画写出来。 加载图片1234enemies_shoot_img = [plane_img.subsurface(pygame.Rect(267, 347, 57, 43)), plane_img.subsurface(pygame.Rect(873, 697, 57, 43)), plane_img.subsurface(pygame.Rect(267, 296, 57, 43)), plane_img.subsurface(pygame.Rect(930, 697, 57, 43))] 同样我们需要创建 Group() 来存放被击中的敌机。1enemies_shoot = pygame.sprite.Group() 之后的处理逻辑基本相似，不多介绍123456789101112131415161718for enemy in enemies: enemy.enemyMove() if pygame.sprite.collide_circle_ratio(0.6)(player, enemy): enemies_shoot.add(enemy) enemies.remove(enemy) player.is_hit = True break if enemy.rect.top &gt; HEIGHT: enemies.remove(enemy)for enemy_shoots in enemies_shoot: if enemy_shoots.shoot_index == 0: pass if enemy_shoots.shoot_index &gt; 70: enemies_shoot.remove(enemy_shoots) continue screen.blit(enemy_shoots.shoot_imgs[enemy_shoots.shoot_index / 20], enemy_shoots.rect) enemy_shoots.shoot_index += 1 这样的话基本完成了动画效果。 音乐有了动画还的有音乐。 音乐的处理只要在特定的地方播放音乐就好，比如子弹发射的时候，背景音乐，被击中的时候，游戏结束的时候，等等。他们的处理逻辑都一样。先加载资源，然后在播放。 背景音乐的播放。 pygame 在处理背景音乐的时候都在 pygame.mixer 方法中。其中播放音乐的play中的参数，第一个为播放几次，-1 为循环播放，后面的浮点表示 从第几秒开始播放。 12backgroundMusic = pygame.mixer.music.load('resources/sound/game_music.mp3')pygame.mixer.music.play(-1, 0.0) 其他的音乐先加载资源，在需要的地方播放。 发射子弹 12345def shoot(self, bullet_img): shootMusic = pygame.mixer.Sound('resources/sound/bullet.mp3') bullet = Bullet(bullet_img, self.rect.midtop) self.bullets.add(bullet) shootMusic.play() 其他音乐处理一样，不多解释。 分数&amp;等级分数首先绘制得分情况，在屏幕上显示多少分。 绘制字体基本和绘制精灵是差不多的。首先要生成字体两个参数分别是字体和字号1score_font = pygame.font.Font(None, 36) 有了字体那么需要写点字。 1score_font.render("分数",True,(0,0,0),(255,255,255)) 第一个参数是写的文字；第二个参数是个布尔值，以为这是否开启抗锯齿，就是说True的话字体会比较平滑，不过相应的速度有一点点影响；第三个参数是字体的颜色；第四个是背景色，如果你想没有背景色（也就是透明），那么可以不加这第四个参数字体也有了，文本也有了，下一步就是绘制。通过 get_rect() 获得矩形，之后绘制和精灵绘制方法一样 12345score_font = pygame.font.Font(None, 36)score_text = score_font.render('分数：0', True, (128, 128, 128))text_rect = score_text.get_rect()text_rect.topleft = [10, 10]screen.blit(score_text, text_rect) 分数已经显示了，就可以积分。我们每击落一个飞机增加 100 分。 1234if enemy_shoots.shoot_index &gt; 70: enemies_shoot.remove(enemy_shoots) score += 100 continue 我们还需要在文本的地方强制转换为 str 。 1score_text = score_font.render(str(score), True, (128, 128, 128)) 等级有了分数，那么再加点等级会使游戏更加有趣味性。 同样的先绘制等级。 12345level_font = pygame.font.Font(None, 42)level_text = level_font.render('Level '+str(level), True, (128, 128, 128, 128))level_rect = level_text.get_rect()level_rect.midtop = [240, 10]screen.blit(level_text, level_rect) 下一步就是写等级函数。随着分数的增加，等级增加，飞机变多，等等。首先写分数和等级的关系。随便瞎写的函数12if score == 100 * (level ** 2 + level): level += 1 这个是控制敌机数量的，我们可以设定一个变量，使敌机越来越多。1if ENEMY_PC % 500 == 0: 每增加一级，就添加敌机数量。等级也不能一直增加，所以当等级是摸个值的时候，就算最高级别了。1234if score == 100 * (level ** 2 + level): level += 1 if level != 10: enemy_add -= 20 基本到这里算是写了一个相对完整的游戏。 代码Github地址]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[第一个 Android 项目]]></title>
      <url>%2F2017%2F05%2F08%2F%E7%AC%AC%E4%B8%80%E4%B8%AA-Android-%E9%A1%B9%E7%9B%AE%2F</url>
      <content type="text"><![CDATA[想想也是有点意思，自己的第一个相对完整的 Android 项目竟然是在金钱的诱惑下完成的。 起因事情是这样，在前两天，在学校的某个群内，看到一个哥们找做课程设计。于是乎就拦下了。谈好价钱 120 。120 就把我给收买了。简单的看了一下需求文档。 其实我也是个半吊子，从来没有这样完整的写过，之前都是一个个小 Demo 这样写的。所以，自己看了一下没敢全接，就答应了任务为1,2,3,4。现在看来，120的价格，赔的连内裤都没有了。 从周五下午开始写的，到周一中午交付，计算一下也就是三天左右。每天估计要写近 8 - 9 小时左右,感觉自己的身体要被掏空了。 需求分析其实就是三个功能，视频展示，计划展示，用户管理，每个不外乎就是 增删改查 四个功能。简单的分析过后，就开始动手编码。 编码阶段说实话，之前从来没有写过 Android 数据库 sqLite，recycleView没有完全使用过，NavagationView没有使用过，视频获取播放没用过，不知道 Android 的开发模式，于是乎就开始边学边做模式,最后对我可以做出来，其实我也感到惊奇。 果然 有钱能使鬼推磨 NavigationViewNavigationView 这个控件是 Google 的在 MD 设计中引入的滑动菜单，在 Google 自己的 App 上有很多应用。 NavigationView 分为两部分。menu 和 header 。menu为下面的选项，header 上面整块。 menu.xml 12345678910111213141516171819&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;group android:checkableBehavior="single"&gt; &lt;item android:id="@+id/nav_class" android:icon="@drawable/ic_format_list_bulleted_black_24dp" android:title="课程" /&gt; &lt;item android:id="@+id/nav_plan" android:icon="@drawable/ic_access_time_black_24dp" android:title="计划" /&gt; &lt;/group&gt; &lt;group android:checkableBehavior="single"&gt; &lt;item android:id="@+id/action_settings" android:icon="@drawable/ic_settings_black_24dp" android:title="修改密码" /&gt; &lt;/group&gt;&lt;/menu&gt; 在 menu 中可以嵌套 group 和 item。group 可以看做一个组，我们可以对这个组里面的 item 定义属性，这里定义的是 single 表示每个 item 只能单选。 下面定义 header header.xml 123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" android:background="@color/colorPrimary"&gt; &lt;de.hdodenhof.circleimageview.CircleImageView android:id="@+id/icon_image" android:layout_width="120dp" android:layout_height="120dp" android:src="@drawable/header" app:layout_constraintBottom_toBottomOf="parent" app:layout_constraintLeft_toLeftOf="parent" app:layout_constraintRight_toRightOf="parent" app:layout_constraintTop_toTopOf="parent" tools:layout_constraintBottom_creator="1" tools:layout_constraintLeft_creator="1" tools:layout_constraintRight_creator="1" tools:layout_constraintTop_creator="1" /&gt; &lt;TextView android:id="@+id/icon_username" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_marginBottom="8dp" android:layout_marginEnd="8dp" android:layout_marginLeft="8dp" android:layout_marginRight="8dp" android:textColor="@color/white" android:text="username" android:textSize="16sp" app:layout_constraintBottom_toBottomOf="parent" app:layout_constraintLeft_toLeftOf="parent" app:layout_constraintRight_toRightOf="parent" tools:layout_constraintBottom_creator="1" tools:layout_constraintLeft_creator="1" /&gt;&lt;/android.support.constraint.ConstraintLayout&gt; header 表示上方的部分。我放了一个头像 ，头像使用了一个开源库 compile &#39;de.hdodenhof:circleimageview:2.1.0&#39;,这个库可以把图片转换为圆形。这个就是一个简单的布局，不过多介绍。 当我们设置好 header 和 menu 的时候就可以进行 NavigationVIew 的设置。 12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:id="@+id/drawer_layout" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.design.widget.CoordinatorLayout android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;!--省略其他布局 --&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; &lt;android.support.design.widget.NavigationView android:id="@+id/nav_view" android:layout_width="match_parent" android:layout_height="match_parent" android:layout_gravity="start" app:headerLayout="@layout/nav_header" app:menu="@menu/nav_menu"&gt; &lt;/android.support.design.widget.NavigationView&gt;&lt;/android.support.v4.widget.DrawerLayout&gt; NavigationView 要放在 DrawerLayout 里面。CoordinatorLayout/FrameLayout 是在主布局内要显示的。 NavigationView 通过 app:headerLayout 加载 header 通过 app:menu 加载 menu。刚刚开始的时候，在 header 里面设置一个 ImageView 然后把头像和文字放到 ImageView 中，这样做不是不可以，但是如果 ImageView 中是一个图片，会对性能造成很大的影响，滑动栏会很卡。建议把背景直接通过父布局直接加载。 在布局中写完，下面需要进行 Java 代码。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class MainActivity extends AppCompatActivity &#123; private static final String TAG = "MainActivity"; private DrawerLayout drawerLayout; private TextView uname; //省略其他代码 @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //省略其他代码 drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout); NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view); ActionBar actionBar = getSupportActionBar(); if (actionBar != null) &#123; actionBar.setDisplayHomeAsUpEnabled(true); actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_black_24dp); &#125; navigationView.setCheckedItem(R.id.nav_class); navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() &#123; @Override public boolean onNavigationItemSelected(@NonNull MenuItem item) &#123; drawerLayout.closeDrawers(); switch (item.getItemId())&#123; case R.id.nav_plan: startActivity(new Intent(MainActivity.this,PalnActivity.class)); break; case R.id.action_settings: startActivity(new Intent(MainActivity.this,ResetActivity.class)); break; &#125; return true; &#125; &#125;); View headerView = navigationView.getHeaderView(0); uname= (TextView) headerView.findViewById(R.id.icon_username); uname.setText(message); &#125; @Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; case android.R.id.home: drawerLayout.openDrawer(GravityCompat.START); break; case R.id.action_settings: drawerLayout.openDrawer(GravityCompat.START); break; &#125; return true; &#125; // 省略其他代码&#125; 通过 setCheckedItem 表示当前选择的 item 。setNavigationItemSelectedListener 来设置每个 item 的点击事件。 这个就是简单的 NavigationView 的简单使用。 RecyclerViewRecyclerView 在我刚刚开始学 Android 的时候就已经听说过，知道它比 ListView 优秀，所以说在做列表布局的时候直接想到了使用 RecyclerView 替代。 使用 RecyclerView 首先用做一个布局，布局文件为每个 item 要展示的效果。 我命名为 course_item 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_margin="16dp" android:orientation="vertical"&gt; &lt;ImageView android:id="@+id/img_video_rc" android:layout_width="60dp" android:layout_height="60dp" android:layout_marginBottom="8dp" android:layout_marginLeft="24dp" android:layout_marginRight="8dp" android:layout_marginStart="24dp" android:layout_marginTop="8dp" android:contentDescription="" android:src="@drawable/ic_slow_motion_video_black_24dp" app:layout_constraintBottom_toBottomOf="parent" app:layout_constraintHorizontal_bias="0.0" app:layout_constraintLeft_toLeftOf="parent" app:layout_constraintRight_toRightOf="parent" app:layout_constraintTop_toTopOf="parent" app:layout_constraintVertical_bias="0.0" tools:layout_constraintLeft_creator="1" tools:layout_constraintTop_creator="1" android:layout_marginEnd="8dp" /&gt; &lt;TextView android:id="@+id/tx_classname_rc" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_marginTop="16dp" android:maxLines="1" android:text="title" android:textSize="18sp" app:layout_constraintHorizontal_bias="0.0" app:layout_constraintLeft_toRightOf="@+id/img_video_rc" app:layout_constraintRight_toRightOf="parent" app:layout_constraintTop_toTopOf="parent" tools:layout_constraintLeft_creator="1" tools:layout_constraintTop_creator="1" android:layout_marginLeft="8dp" android:layout_marginRight="8dp" android:layout_marginStart="8dp" android:layout_marginEnd="8dp" /&gt; &lt;TextView android:id="@+id/tx_classcontext_rc" android:layout_width="0dp" android:layout_height="0dp" android:layout_marginLeft="8dp" android:layout_marginRight="8dp" android:layout_marginStart="8dp" android:layout_marginTop="8dp" android:maxLines="2" android:text="context" app:layout_constraintHorizontal_bias="0.0" app:layout_constraintLeft_toRightOf="@+id/img_video_rc" app:layout_constraintRight_toRightOf="parent" app:layout_constraintTop_toBottomOf="@+id/tx_classname_rc" tools:layout_conversion_absoluteHeight="0dp" tools:layout_conversion_absoluteWidth="47dp" tools:layout_conversion_absoluteX="5dp" tools:layout_conversion_absoluteY="42dp" app:layout_constraintBottom_toBottomOf="parent" android:layout_marginBottom="8dp" android:layout_marginEnd="8dp" /&gt;&lt;/android.support.constraint.ConstraintLayout&gt; 这个为列表里每个 item 的显示样式。不多介绍。 在使用 RecyclerView 的时候，主要还是要有适配器。通过适配器来加载布局，绑定控件。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class CourseAdapter extends RecyclerView.Adapter&lt;CourseAdapter.ViewHolder&gt; &#123; private List&lt;Course&gt; list = new ArrayList&lt;&gt;(); private Context context; @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; final View view = LayoutInflater.from(parent.getContext()) .inflate(R.layout.course_item, parent, false); final ViewHolder holder = new ViewHolder(view); holder.courseView.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; //监听事件 &#125; &#125;); holder.courseView.setOnLongClickListener(new View.OnLongClickListener() &#123; @Override public boolean onLongClick(View v) &#123; //监听事件 &#125; &#125;); return holder; &#125; @Override public void onBindViewHolder(ViewHolder holder, int position) &#123; Course cl = list.get(position); holder.imageView.setImageResource(R.drawable.ic_slow_motion_video_black_24dp); holder.title.setText(cl.getCourseName()); holder.context.setText(cl.getVideoContext()); &#125; @Override public int getItemCount() &#123; return list.size(); &#125; static class extends RecyclerView.ViewHolder &#123; View courseView; ImageView imageView; TextView title; TextView context; ViewHolder(View itemView) &#123; super(itemView); courseView = itemView; imageView = (ImageView) itemView.findViewById(R.id.img_video_rc); title = (TextView) itemView.findViewById(R.id.tx_classname_rc); context = (TextView) itemView.findViewById(R.id.tx_classcontext_rc); &#125; &#125; public CourseAdapter(List&lt;Course&gt; courselist) &#123; list = courselist; &#125;&#125; 适配器继承了 RecyclerView.Adapter 主要有三个方法。onCreateViewHolder ，onBindViewHolder ，getItemCount onCreateViewHolder这个方法是用来创建一个 view，负责绑定 item 布局，添加监听。 onBindViewHolder通过名字可以看出来，这是一个布局绑定的方法，主要用于 绑定我们写的 item 里面的布局文件。通过传入的 positon 获得每个 item的位置。然后对每个位置的 item 进行操作。 getItemCount获得 item 长度，也就是你要展示出来多少个 item 。 除了上述的三个方法，其中还有一个内部类，内部类主要是用绑定 item 的布局。适配器主要是将前面的 list 传入进行适配 Adapter我们在显示的 Activity 中，通过适配器将数据传入 123456789101112131415161718192021222324252627282930public class MainActivity extends AppCompatActivity &#123; private List&lt;Course&gt; courseList = new ArrayList&lt;&gt;(); private CourseAdapter adapter; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //其他控件绑定 initClassList(); RecyclerView recyclerview = (RecyclerView) findViewById(R.id.rclv_list); LinearLayoutManager layoutManger = new LinearLayoutManager(this); recyclerview.setLayoutManager(layoutManger); adapter = new CourseAdapter(courseList); recyclerview.setAdapter(adapter); &#125; // 省略其他代码 protected void initCourseList() &#123; List&lt;Course&gt; courseDB = DataSupport.findAll(Course.class); for (Course cou : courseDB ) &#123; Course course = new Course(); course.setId(cou.getId()); course.setCourseName(cou.getCourseName()); course.setVideoContext(cou.getVideoContext()); courseList.add(course); &#125; &#125;&#125; 主要通过适配器将 list 进行传入。在 initCourseList 中通过获取到数据库中的值，然后进行遍历，将遍历的结果存到 Course 中，最后将 Courese 放到 list 中。 在这里要说明一下，有可能 RecycleView 被其他控件遮挡，最后一个只能显示出一半。如下图。解决办法就是调整布局，应该是 item 的布局有问题。 数据库存取这是我第一次使用 Android 数据库。对于 Android 的数据库想想就知道很麻烦，因为无法查看，要在真机上查看还比较方便，要是在模拟器上查看，还要打开 Moniter ，在从 Moniter 把数据库导出，然后在通过看数据库的软件看是否写入成功。不仅仅这个，还要看 SQL 语句是否写对了，想想都觉得很麻烦。 在 《第一行代码(第二版)》中看到了 Litepal 这个框架，瞬间感觉到了压力减轻。在郭霖大神的博客里也很详细的介绍了这个框架的使用。 具体使用就不多介绍了，请转跳郭霖大神博客 Android数据库高手秘籍(零)——前言 在表关联的时候，一对多关联的时候，因为是更新表，所以曾经一度无法写入数据。例如 我创建的user表和plan表，在plan表中有一个 user_id 的字段，但是一度写不进去。后来查了资料，应该如下这样写。 123456789101112public void setInfo() &#123; String id = String.valueOf(MainActivity.userID); User user = DataSupport.find(User.class, MainActivity.userID); Plan plan = new Plan(); plan.setPlanTitle(planTitle.getText().toString()); plan.setPlanContext(planContent.getText().toString()); String date1 = tv_startTime.getText().toString(); plan.setStartData(date1); plan.setUser(user); plan.save(); user.getPlanList().add(plan); &#125; 关键在于plan.setUser(user)要先 set User对象，在 save ，user.getPlanList().add()方法添加 plan ，这样在更新表的时候才会关联起来。 多媒体文件获取获取多媒体文件首先要获取权限，在配置文件中添加相应的权限。通过 intent 打开Android 的文件管理器 123456public void chooseVideo() &#123; Intent intent = new Intent(Intent.ACTION_GET_CONTENT); intent.setType("video/*"); intent.addCategory(Intent.CATEGORY_OPENABLE); startActivityForResult(intent, 2); &#125; 这里的 video/ 是获取视频，同样修改可获取其他 比如任意文件 / * 等。 之后的部分其实还不太懂，等搞明白在补全这块。 下拉刷新下拉刷新，使用的控件叫做 SwipeRefreshLayout ,然后对该控件添加监听事件 123456swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() &#123; @Override public void onRefresh() &#123; refreshList(); &#125; &#125;); 我们的 refreshList 中主要是开启一个新的线程来加载我们要展示的 list。 在加载 list 之前我们一定要先清空它，否则会出现重复加载。 123456789101112131415161718192021private void refreshList() &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; runOnUiThread(new Runnable() &#123; @Override public void run() &#123; courseList.clear(); initCourseList(); adapter.notifyDataSetChanged(); swipeRefreshLayout.setRefreshing(false); &#125; &#125;); &#125; &#125;).start();&#125; 这样就可以获得刷新列表，重新读取数据库数据。 总结这个项目日后应该还会维护，添加一些新的功能，完善一些不足之处，比如添加点击的水波纹效果，点击浮动。添加获得视频的预览图等等。会不定期更新。 源码地址]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git教程及使用经验]]></title>
      <url>%2F2017%2F04%2F30%2FGit%E6%95%99%E7%A8%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%2F</url>
      <content type="text"><![CDATA[前言经过一周的准备，完成了 Git 的一些使用经验及教程。 主要是从命令行的角度来讲解。 Git 是什么git 在维基百科上的解释是这样的 git是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。应注意的是，这与GNU Interactive Tools（一个类似Norton Commander界面的文件管理器）有所不同。 在我看来 Git 是一个 版本控制工具 和 团队协作 软件。 Git 版本控制简单的使用看这个博客 Git教程操作 这个博客会在这个基础上更加详细的讲解命令行的使用，以及一些操作原理。 git status当我们通过 git add 命令添加文件到 git 中的时候，可以通过 git status 来了解当前代码库的情况。 通过 git status这个命令我们可以知道当前代码库的状态 git add -?为什么每次都要使用 git add 把修改文件添加，之后在提交。 这就是 git 的一个原理图。 git 工作时候分为工作区和版本库。工作区就是我们自己本地编辑的区域。而代码库又有一个 暂存区/缓存区。我们每次提交版本(commit) 都是在暂存区向代码库提交。所以我们每次都要通过 add 命令进行对修改的添加。 在给 git 添加文件的时候，我们使用的是 git add &lt;filename&gt;,但是当我们要添加大量的文件的时候，采用 git add 不仅浪费时间，而且还容易出错。此时我们使用 git add -A 会把所更改(包括文件的添加，删除，修改)的文件添加到代码库中。 git add -i 会进入一个命令的子系统，提供我们选择。 git diffgit diff 是一个比较代码的命令，如果不加参数表示本次和上一次的比较。我们可以添加要比较的两个版本的哈希值。 git diff 01df58 6e1baa Git 协作开发之前的 Git 是用来用做简单的 版本控制，记录了每一个版本。下面我们进行团队协作开发。 Git 分支当一个人开发功能 A 而另一个人开发功能 B ，之后代码进行整合的时候，使代码既有功能 A 也有功能 B 。在 Git 中，Git 给了我们分支的概念。 分支可以使用我们快速的开发协作，并且快速的合并。 分支的使用通过命令 git branch 来查看分支情况，当前分支会前面带 * 标识。git branch &lt;branch name&gt; 来创建分支。分支创建会拷贝当前的内容到新的分支。通过 git checkout &lt;branch name&gt; 来切换到我们需要切换的分支。 我们也可以通过 git checkout -b &lt;filename&gt; 来创建分支并且切换到该分支。 分支的合并当我们创建出新的分支的时候，就可以对这个分支进行版本的迭代。当我们做完版本迭代，版本更新的时候，就会向我们的 master 分支上就行合并。 如果我们要向 master 分支上合并我们新创建的分支叫 dev ，那么我们先切换分支到 master，在通过 git merge dev 进行合并两个分支。期间会有合并冲突，通过修改来进行保留。 Git flow 如上图，git flow 是 git 给我们的一个协作的开发流程，master 分支一般是用于上线产品的发布，develop 分支使用开发， 在他的支线上我们一般会创建功能分支。我们在功能分支上开发完成后合并到 develop 分支上。这样就完成了我们的 git flow 开发。 PPT下载]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[博客一周年]]></title>
      <url>%2F2017%2F04%2F20%2F%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4%2F</url>
      <content type="text"><![CDATA[2016年4月20日完成了博客搭建，今天2017年4月20日，博客已经维护运行一年。博客由 Github+Hexo 搭建，托管于 Github 。 在一年中，在 Github 上commits:179 ，star:5, fork:6 更新博客 30 篇。 其中访问量最大的是 Github 使用教程 系列。大多数的访问量都来源于这个系列博客。 总计评论为 46 条(可惜多说要关闭了，现在评论迁移到 disqus，国内IP无法访问) 截至十九点十分，百度统计最后统计 PV 为 39706 ，UV 为 13484 下图为 百度统计 其中文章的阅读量为 27000 下图为 leancould 统计 有来自 32 个国家或地区的IP HAPPY BIRTHDAY ISLAND]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017蓝桥杯]]></title>
      <url>%2F2017%2F04%2F15%2F2017%E8%93%9D%E6%A1%A5%E6%9D%AF%2F</url>
      <content type="text"><![CDATA[前言这是第二年参加蓝桥杯了。一年过去了，还是没有好好的学习算法。今年才意识到算法的重要性，所以立下一个 flag—手头这个项目做完就开始系统的学习一下算法。 相比于去年的 蓝桥杯，今年感觉提醒有点变化，不在是一味的暴力。数据量变大了，但是个人感觉没有意义。第一道题完全是个水题，按照出题意思应该是要从文件读取数据吧。可是我用了 Excel 。一分钟秒出答案。就连我这样的菜鸟都能做出来，不说了。 第二题 题目：用扑克牌 A,2,3,4,5,6,7,8,9组成一个三角形,使每条边的和相同三角形如下 A代表1，符合三边之和相等的一共有多少种情况？经过翻转，镜像为同一种的算一种！ 这个题首先要考虑的是镜像和翻转的情况.如图 这个为镜像 在考虑翻转和镜像问题后,同样的排列就会产生6种情况,我们需要在最后的结果除以6。 12345678910111213141516171819202122232425262728293031public class Tra &#123; static boolean[] flag = new boolean[9]; static int count = 0; static int[] a = new int[9]; public static void main(String[] args) &#123; dfs(0); System.out.println(count / 6); &#125; public static void dfs(int index) &#123; if (index == 9) &#123; int b1 = a[0] + a[1] + a[3] + a[5]; int b2 = a[0] + a[2] + a[4] + a[8]; int b3 = a[5] + a[6] + a[7] + a[8]; if (b1 == b2 &amp;&amp; b1 == b3) &#123; count++; &#125; &#125; for (int i = 0; i &lt; 9; i++) &#123; if (flag[i]) &#123; continue; &#125; flag[i] = true; a[index] = i; dfs(index + 1); flag[i] = false; &#125; &#125;&#125; 答案:144 第三题 又是一个数据量比较大的题，这个题是没有做出来的，回头自己再慢慢题解研究一下吧。这个题应该也是要从文件读取，而且当时没有找出什么规律。 第四题还是不会，一个拧魔方的题，要求是二阶魔方，目前还没有找到题，找到题后补上。 代码填空代码填空题略过，一般我做代码填空题是在所需要填写的位置打断点，根据 DEBUG 和输出要求来进行试探性的填写，一般不需要读懂全部代码，只需要知道部分代码即可，做题速度比较快。可惜，一不小心翻船了。 第五题所填写的空 f(x/10,k) 第六题答案 a[i-1][j-1]+1 船翻在了第六题，但是直接填写了 i 答案是测试是正常输出的。不知道给不给分。排除这个模棱两可的答案，前面一共做对了三道题。比去年是有点进步，但是发现还是很差啊。。。。。一定要好好研究算法。 第七题 标题：日期问题小明正在整理一批历史文献。这些历史文献中出现了很多日期。小明知道这些日期都在1960年1月1日至2059年12月31日。令小明头疼的是，这些日期采用的格式非常不统一，有采用年/月/日的，有采用月/日/年的，还有采用日/月/年的。更加麻烦的是，年份也都省略了前两位，使得文献上的一个日期，存在很多可能的日期与其对应。比如02/03/04，可能是2002年03月04日、2004年02月03日或2004年03月02日。给出一个文献上的日期，你能帮助小明判断有哪些可能的日期对其对应吗？ 输入一个日期，格式是”AA/BB/CC”。 (0 &lt;= A, B, C &lt;= 9) 输出输出若干个不相同的日期，每个日期一行，格式是”yyyy-MM-dd”。多个日期按从早到晚排列 输入02/03/04 样例输出2002-03-042004-02-032004-03-02资源约定：峰值内存消耗（含虚拟机） &lt; 256MCPU消耗 &lt; 1000ms请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。 这个题说实话，其实不难，关键是考虑各种情况，比如是否闰年，年，月，日格式是否合法，最后还要有个排序。我没有写完，当时越写越烦，最后就成了能过多少测试过多少测试，完全成了骗分。 第八题 标题：包子凑数 小明几乎每天早晨都会在一家包子铺吃早餐。他发现这家包子铺有N种蒸笼，其中第i种蒸笼恰好能放Ai个包子。每种&gt; 蒸笼都有非常多笼，可以认为是无限笼。 每当有顾客想买X个包子，卖包子的大叔就会迅速选出若干笼包子来，使得这若干笼中恰好一共有X个包子。比如一共有&gt; 3种蒸笼，分别能放3、4和5个包子。当顾客想买11个包子时，大叔就会选2笼3个的再加1笼5个的（也可能选出1笼3个&gt; 的再加2笼4个的）。 当然有时包子大叔无论如何也凑不出顾客想买的数量。比如一共有3种蒸笼，分别能放4、5和6个包子。而顾客想买7个&gt; 包子时，大叔就凑不出来了。 小明想知道一共有多少种数目是包子大叔凑不出来的。 输入第一行包含一个整数N。(1 &lt;= N &lt;= 100)以下N行每行包含一个整数Ai。(1 &lt;= Ai &lt;= 100) 输出一个整数代表答案。如果凑不出的数目有无限多个，输出INF。 例如，输入：245 程序应该输出：6 再例如，输入：246 程序应该输出：INF 样例解释：对于样例1，凑不出的数目包括：1, 2, 3, 6, 7, 11。对于样例2，所有奇数都凑不出来，所以有无限多个。 刚刚开始的时候想的这个题使用除法，比如输入4和5两种包子，分别枚举出1~1000，用每个数去除以包子的情况，如果有余数，就用余数接着除。但是很快发现了不对。然后就叒变成了一个骗分题。把输入是偶数的情况先输出 INF。 总结最后的试题就写到了第八题，感觉今年的题应该是要比去年难的，明显不是暴力杯了。成绩很快出来了，省二。钱还没有白交，剩下就看看能不能申请学校的单项奖学金了。钱不是重要的，重要的是靠前的一周备考中还是学会了 DFS 。之前是不会这个算法的。有收获就好，记得自己立下的 Flag 。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[计蒜客蓝桥杯模拟赛(5)试题]]></title>
      <url>%2F2017%2F04%2F04%2F%E8%AE%A1%E8%92%9C%E5%AE%A2%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B-5-%E8%AF%95%E9%A2%98%2F</url>
      <content type="text"><![CDATA[简介这是近期 计蒜客 的一个关于蓝桥杯的算法模拟赛。每个题进行一下简单的计算。 试题试题一 某君的年龄是个两位数，如果把他年龄的两位数字交换位置后与原数字相加和为 x，与原数字相减差的绝对值为 y。已知 x 比 y 大 32。请你计算 y 的值是多少。 这个试题很明显是一个送分题。通过手算就可以计算出这个答案。 答案：45 试题二 给出方程组： 11x+13y+17z=2471 13x+17y+11z=2739 已知 x，y，z 均为正整数，请你计算 x，y，z相加和最小为多少 这个题也是一个送分题,写个简单的暴力就可以算出。 123456789101112131415public class _2 &#123; public static void main(String[] args) &#123; int sum = 0; for (int x = 0; x &lt; 1000; x++) &#123; for (int y = 0; y &lt; 1000; y++) &#123; for (int z = 0; z &lt; 1000; z++) &#123; if (11 * x + 13 * y + 17 * z == 2471 &amp;&amp; 13 * x + 17 * y + 11 * z == 2739) &#123; sum = x + y + z; System.out.println(sum); &#125; &#125; &#125; &#125; &#125;&#125; 答案：181 试题三 将数字 1…9 填入一个3×3 的九宫格中，使得格子中每一横行和的值全部相等，每一竖列和的值全部相等。请你计 算有多少种填数字的方案。 这个还是一个暴力 1234567891011121314151617181920212223242526272829303132333435363738394041public class _3 &#123; public static void main(String[] args) &#123; int count = 0; int[] a = new int[9]; Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); for (a[0] = 1; a[0] &lt; 10; a[0]++) &#123; for (a[1] = 1; a[1] &lt; 10; a[1]++) &#123; for (a[2] = 1; a[2] &lt; 10; a[2]++) &#123; for (a[3] = 1; a[3] &lt; 10; a[3]++) &#123; for (a[4] = 1; a[4] &lt; 10; a[4]++) &#123; for (a[5] = 1; a[5] &lt; 10; a[5]++) &#123; for (a[6] = 1; a[6] &lt; 10; a[6]++) &#123; for (a[7] = 1; a[7] &lt; 10; a[7]++) &#123; for (a[8] = 1; a[8] &lt; 10; a[8]++) &#123; int row1 = a[0] + a[1] + a[2]; int row2 = a[3] + a[4] + a[5]; int row3 = a[6] + a[7] + a[8]; int col1 = a[0] + a[3] + a[6]; int col2 = a[1] + a[4] + a[7]; int col3 = a[2] + a[5] + a[8]; if (col1 == col2 &amp;&amp; col2 == col3 &amp;&amp; row1 == row2 &amp;&amp; row1 == row3 &amp;&amp; col1 == row1) &#123; for (int i = 0; i &lt; 9; i++) &#123; set.add(a[i]); &#125; if (set.size() == 9) &#123; count++; &#125; set.clear(); &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125; System.out.println(count); &#125;&#125; 答案：72]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python爬取斗鱼图片]]></title>
      <url>%2F2017%2F04%2F03%2Fpython%E7%88%AC%E5%8F%96%E6%96%97%E9%B1%BC%E5%9B%BE%E7%89%87%2F</url>
      <content type="text"><![CDATA[介绍一个简单的 Python 爬虫，用于爬取斗鱼网上的图片。 编辑工具：Visual Studio Code Python 版本：2.7 使用的库：urllib Visual Studio Code插件 Code Runner Python Python for VSCode MagicPython 实现思路首先要打开地址，并且获取该网页的代码。 从代码里获得你要图片。这里我们需要简单的分析一下该网页。 当我们把鼠标移到地址上的时候就会出现该图片，这个就是我们要爬取的图片。 这个图片是在 data-original 后面，我们就需要进行匹配，通过正则表达式很快就可以达到目的。 网页代码片段 1&lt;img data-original="https://rpic.douyucdn.cn/a1704/03/15/1032029_170403155245.jpg" src="https://rpic.douyucdn.cn/a1704/03/15/1032029_170403155245.jpg" width="283" height="163" style="display: block;"&gt; 正则表达式 data-original=&quot;(.*?\.(jpg|png)) 这样我们就获取到了这个页面上所有的 jpg 和 png 图片。 最后通过 urlretrieve 这个方法把图片保存到你想要放的地方。 代码12345678910111213141516171819# coding:utf8import urllibimport reimport time # 通过filename设置路径和名字response=urllib.urlopen('https://www.douyu.com/directory/game/TVgame')html=response.read()print htmlimglist=re.findall(r'data-original="(.*?\.(jpg|png))"',html)print imglistx=0for imgurl in imglist: print ('下载图片 %s'%imgurl[0]) if imgurl[1]=='gif': urllib.urlretrieve(imgurl[0],filename='G:\PythonCode\pic\%d.gif'%x) else: urllib.urlretrieve(imgurl[0],filename='G:\PythonCode\pic\%d.jpg'%x) x+=1 time.sleep(1)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Spring学习记录(二)]]></title>
      <url>%2F2017%2F03%2F02%2FSpring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C%2F</url>
      <content type="text"><![CDATA[AOP简述面向切面编程，扩展功能不修改源代码实现。AOP采用横向抽取机制，取代了传统的纵向继承体系重复代码。 AOP底层原理AOP操作相关术语 链接点：类里面的被增强的方法。 切入点：类里面的增强的方法，在实际操作中，实际增强的方法叫切入点。 通知/增强：增强的逻辑，称为增强，比如扩展日志功能，这个日志功能称为增强。 前置通知：在方法之前执行 后置通知：在方法之后执行 异常通知：出现异之后执行 最终通知：在后置之后执行 环绕通知：在方法之前和之后执行 切面：把增强应用到具体的方法上面，这个过程称为切面。把增强用到切入点的过程。 Spring的AOP操作Aspectj框架在Spring进行aop操作，使用Aspectj框架，这个框架本身不是Spring的一部分，只是一起使用进行AOP操作。 版本在2.0以后支持切点表达式支持。 基于Aspectj实现AOP操作 相关ja包 aopalliance,aspectjweaver,spring-aop,spring-aspects 创建Spring核心配置文件导入AOP约束。1234567&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; 基于Aspectj的xml实现 常用表达式通过execution函数表达式实现。 execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;) execution( /增强方法的全路径/): 代表任意修饰符，空格后跟随增强方法的全路径。 execution( com.Hello.):代表该类的所有方法 execution( .*(..)) execution( save(..)) 表示以save开头的方法进行增强。 xml配置代码123456789101112&lt;!--1.配置类--&gt; &lt;bean id="book" class="aop.Book"/&gt; &lt;bean id="myBook" class="aop.MyBook"/&gt; &lt;!--2.配置aop操作--&gt; &lt;aop:config&gt; &lt;!--2.1配置切入点--&gt; &lt;aop:pointcut id="pointcut1" expression="execution(* aop.Book.add())"/&gt; &lt;!--2.2配置切面--&gt; &lt;aop:aspect ref="myBook"&gt; &lt;aop:before method="before1" pointcut-ref="pointcut1"/&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt; 基于Aspectj的注解实现创建类的对象，在spring的配置文件中开启aop操作。 1&lt;aop:aspectj-autoproxy&gt; &lt;/aop:aspectj-autoproxy&gt; 通过注解来实现。 在增强类上@Aspect注解类，@Before注解方法(前置通知)。 @Before @AfterReturning @Around @AfterThrowing @After Spring的JdbcTemplate操作Spring在dao层，使用JdbcTemplate，Spring为各种支持的持久化技术，都提供了简单操作的模板和回调。 ORM持久化技术 模板类 JDBC org.springframework.jdbc.core.JdbcTemplate Hibemate5.0 org.springframework.orm.hibernate5.HibernateTemplate IBatis(MyBatis) org.springframework.orm.ibatis.sqlMapClientTempate JPA org.springframework.orm.jpa.JpaTempate JdbcTemplate使用都是对数据库进行crud操作。 导入JdbcTemplate相关jar包 spring-jdbc spring-tx 创建对象设置数据库信息，比如：加载驱动，设置url，用户名，密码等。实例代码 12345DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.setDriverClassName("com.mysql.jdbc.Driver"); dataSource.setUsername("root"); dataSource.setUrl("jdbc:mysql://localhost:3306/JdbcDemo"); dataSource.setPassword("12qwaszx"); 创建JdbcTemplate模板对象，设置数据源。 1JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource); 调用JdbcTemplate对象里面的方法实现操作。 添加12String sql = "INSERT INTO jdbcTest (id, name, password) VALUES (?,?,?)";jdbcTemplate.update(sql, "1", "lucy", "1234"); 修改1234String sql = "UPDATE jdbcTest\n" + "SET name = ?\n" + "WHERE id=?";jdbcTemplate.update(sql,"cat","1"); 删除12String sql = "DELETE FROM jdbcTest WHERE name=?";jdbcTemplate.update(sql,"cat"); 查询JdbcTemplate实现查询，有接口RowMapper,JdbcTemplate针对这个接口美欧提供实现类，等到不同的类型数据需要自己封装 查询一个值 123//查询返回某值String sql1="SELECT count(*) FROM jdbcTest";int count=template.queryForObject(sql1,Integer.class); 返回对象 12345//查询返回对象String sql2 = "select * from jdbcTest where name=?";//调用jdbcTemplate方法User user=template.queryForObject(sql2,new MyRowMapper() , "tom");System.out.println(user); 要自己封装这个类其中querForObject这个方法的第二个值为RowMapper，需要自己进行封装。MyRowMapper.class 12345678910111213class MyRowMapper implements RowMapper&lt;User&gt; &#123; @Override public User mapRow(ResultSet resultSet, int i) throws SQLException &#123; //从结果集里面把数据得到 String username = resultSet.getString("name"); String password = resultSet.getString("password"); //把数据封装到对象里面 User user = new User(); user.setName(username); user.setPassword(password); return user; &#125;&#125; 返回list集合 123String sql3 = "select * from jdbcTest";List&lt;User&gt; list = template.query(sql3, new MyRowMapper());System.out.println(list); Spring配置连接池和dao使用JdbcTemplate配置c3p0连接池 导入jar包 c3p0和mchange-commons-java 在Spring的配置文件配置连接池 在dao中使用 dao使用jdbctemplate 在Service中注入Dao。 在Dao中注入jdbc模板。 在模板中注入连接池。 在连接池中写配置。 示例代码 UserService.class 1234567891011121314151617package com.c3p0;/** * Created by youngxhui * Time is 17-2-19. */public class UserService &#123; private UserDao userDao; public void setUserDao(UserDao userDao) &#123; this.userDao = userDao; &#125; public void add()&#123; userDao.add(); &#125;&#125; UserDao.class 123456789101112131415161718192021package com.c3p0;import org.springframework.jdbc.core.JdbcTemplate;/** * Created by youngxhui * Time is 17-2-19. */public class UserDao &#123; private JdbcTemplate jdbcTemplate; public void add() &#123; String sql="INSERT INTO jdbcTest (id, name, password) VALUES (?,?,?)"; jdbcTemplate.update(sql, 5, "lili", "123456"); &#125; public void setJdbcTemplate(JdbcTemplate jdbcTemplate) &#123; this.jdbcTemplate = jdbcTemplate; &#125;&#125; SpringContext.xml 12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;!--配置c3p0的连接池--&gt; &lt;bean id="comboPooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="driverClass" value="com.mysql.jdbc.Driver"/&gt; &lt;property name="jdbcUrl" value="jdbc:mysql://localhost:3306/JdbcDemo"/&gt; &lt;property name="user" value="root"/&gt; &lt;property name="password" value="12qwaszx"/&gt; &lt;/bean&gt; &lt;bean id="userService" class="com.c3p0.UserService"&gt; &lt;property name="userDao" ref="userDao"/&gt; &lt;/bean&gt; &lt;bean class="com.c3p0.UserDao" id="userDao"&gt; &lt;property name="jdbcTemplate" ref="jdbcTemplate"/&gt; &lt;/bean&gt; &lt;bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate"&gt; &lt;property name="dataSource" ref="comboPooledDataSource"/&gt; &lt;/bean&gt;&lt;/beans&gt; Spring事务管理什么是事务事务是访问数据库的一个操作序列，数据库应用系统通过事务集来完成对数据库的存取。事务的正确执行使得数据库从一种状态转换成另一种状态。 事务特性 原子性（atomicity） 一致性（consistency 隔离性 （isolation） 持久性（durability） Sping事务管理apispring对事务管理的两种方式 编程式事务管理(不用) 声明式事务管理 基于xml配置文件实现 基于注解实现 api介绍Spring事务管理高层抽象主要包含3个接口 PlatformTransactionManager事务管理器 TransactionDefinition事务定义信息 TransactionStatus事务具体运行状态 PlatformTransactionManager针对不同的dao层，提供了不同的接口实现类 事务 说明 org.springframework.idbc.datasource.DataSourceTransactionManager 使用Spring JDBC或iBatis进行持久化数据时使用 org.springframework.orm.hibernate5.HibernateTransactionManger 使用Hibernate5.0版本进行持久化数据时使用 org.springframework.orm.jpa.JpaTransactionManager 使用JPA进行持久化 org.springframework.jdo.JdoTransactionManager 当持久化机制是Jdo时使用 org.springframework.transaction.ita.JtaTransactionManager 使用一个JTA实现来管理事务，在一个事务跨越多个资源时必须使用]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Log4j使用]]></title>
      <url>%2F2017%2F02%2F19%2FLog4j%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[简介通过log4j可以看到程序运行时候更加详细的信息。 使用 导入log4j的jar包 复制log4j的配置文件 一个简单的log4j的配置文件 12345678910111213### 设置日志等级 ###log4j.rootLogger=info, stdout### 输出到控制台 ###log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.Target=System.err#log4j.appender.stdout=System.errlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n### 输出到日至文件log4j.appender.file=org.apache.log4j.FileAppenderlog4j.appender.file.File=/home/youngxhui/IdeaProjects/SpringDemo/spring-aop-xml/src/mylog.loglog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=%&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n 设置日志级别 info：基本信息 debug：更详细的信息 实例]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Spring学习(一)]]></title>
      <url>%2F2017%2F02%2F08%2FSpring%E5%AD%A6%E4%B9%A0-%E4%B8%80%2F</url>
      <content type="text"><![CDATA[Spring学习笔记，仅供自己参考。 概述 Spring是开源的轻量级框架。 Spring核心主要为两部分：(1).AOP:面向切面编程(2).IOC：控制反转： 把对象的创建不是通过new的方式实现，而是交给spring配置创建类对象 Spring是一站式框架。Spring在JavaEE三层结构中，每一层都提供不同的解决技术。 web层：SpringMVC service层：Spring的ioc dao层：Spring的jdbcTemplate Spring版本：4.x 接口 用于沟通的中介勿的抽象化。 对外声明。 Java 8中接口可以拥有方法体。 面向接口编程 结构设计中，分清层次及调用关系，每层只能向外提供一组功能接口，更层次仅依赖接口而非实现类。 接口实现的变动不影响各层的调用。 隐藏具体实现和实现多态性的组件。 IOC 控制反转什么是IOC控制权的转移，应用程序本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护。把对象的创建交给spring进行管理 IOC操作的两种操作 IOC的基于配置文件方式 IOC的注解方式 IOC的底层原理 xml的配置文件 dom4j解决xml 工厂设计模式 反射 IOC案例 导入jar包 核心jar包Beans Core Context, SpEL 支持日志输出的jar包 创建类，在类里面创建方法 创建spring的配置文件，配置创建类 建议放到src下面 测试对象创建 Spring的Bean管理(xml)实例化三种方式 使用类的无参构造(主要使用方式) 静态工厂创建 实例工厂创建 Bean标签常用属性 id属性 起名称，id的属性值可以是任意命名，但是不能包含特殊符号 class属性 创建对象所在类的全路径 name属性 功能和id属性是一样的，但是name属性可以包含特殊符号。 scope属性 singleton:默认值，单例对象。 prototupe:多例。 request:创建了对象，把对象放到request域里面。 session:创建对象，把对象放到session里面。 globalSession:创建对象，把对象放到globalSession里面。 Spring的Bean的管理(注解)注解 代码里面的特殊标记，使用注解可以完成功能。 注解写法@注解名称(属性名称=属性值)。 注解使用在类上面，方法上面和属性上面。 在xml需要配置一下1&lt;context:component-scan base-package="com.young.anno"/&gt; Bean管理常用注解 Component– 在Spring中提供的@Component三个衍生注解 @Controller WEB层 @Service 业务层 @Repository 持久层这四个注解目前的功能是一样的，都是创建对象。 123456@Component(value = "user")public class User &#123; public void add()&#123; System.out.println("add...."); &#125;&#125; Scope用于单例与多例等配置,写在Component的下面。 1234567@Component(value = "user")@Scope(value = "prototype") public class User &#123; public void add()&#123; System.out.println("add...."); &#125;&#125; Autowired注入属性 Resourcename属性写创建dao对象的value值 DI 依赖注入创建对象并且组装对象之间的关系 有参构造注入采用constructor-arg来进行,name和value进行对构造器的值进行注入。 123&lt;bean id="preperty" class="com.young.property.PrepertyDemo1"&gt; &lt;constructor-arg name="username" value="zhangsan"/&gt;&lt;/bean&gt; set方法注入使用property标签进行注入，name定义类里面定义的属性的名称，value设置具体的值 123&lt;bean id="book" class="com.young.property.Book"&gt; &lt;property name="bookname" value="one"/&gt;&lt;/bean&gt; spring框架只支持set方法注入和构造器注入 注入对象类型属性 创建service类dao类 在service把dao作为类型属性 生成dao类型的set方法 xml配置方式 UserService.java 1234567891011public class UserService &#123; private UserDao userDao; public void add()&#123; System.out.println("service"); userDao.add(); &#125; public void setUserDao(UserDao userDao) &#123; this.userDao = userDao; &#125;&#125; 配置文件 12345&lt;bean id="service" class="com.young.ioc.UserService"&gt; &lt;!--不能写value属性，要写ref,dao配置bean标签的id值--&gt; &lt;property name="userDao" ref="userdao"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id="userdao" class="com.young.ioc.UserDao"&gt; 注解注入方式 Autowired 1234567891011@Service(value = "userservice")public class UserService &#123; @Autowired private UserDao userDao; public void add()&#123; System.out.println("service"); userDao.add(); &#125;&#125; Resure UserDao.java 123456@Component(value = "userdao")public class UserDao &#123; public void add() &#123; System.out.println("UserDao"); &#125;&#125; 复杂类型注入 数组 123456789&lt;!--数组类型--&gt; &lt;property name="args"&gt; &lt;list&gt; &lt;value&gt;小马&lt;/value&gt; &lt;value&gt;小宋&lt;/value&gt; &lt;value&gt;小王&lt;/value&gt; &lt;value&gt;小李子&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; list类型 123456&lt;property name="list"&gt; &lt;list&gt; &lt;value&gt;张三&lt;/value&gt; &lt;value&gt;李四&lt;/value&gt; &lt;/list&gt;&lt;/property&gt; map类型 12345&lt;property name="map"&gt; &lt;map&gt; &lt;entry key="a" value="张三"/&gt; &lt;/map&gt;&lt;/property&gt; properties 12345&lt;property name="properties"&gt; &lt;props&gt; &lt;prop key="name"&gt;root&lt;/prop&gt; &lt;/props&gt;&lt;/property&gt; xml和注解比较 比较项 xml 注解 添加 &lt;Bean id=&quot;&quot; class=&quot;&quot;/&gt; @Component 多例/单例 &lt;Bean scope=&quot;prototype/&gt;&quot; @Scope 对象类型注入 &lt;bean id=&quot;&quot; class=&quot;&quot;&gt; &lt;property name=&quot;&quot;ref=&quot;&quot;&gt;&lt;/property&gt;&lt;/bean&gt; @Resource 配置文件与注解混合使用案例： BookDao.java 12345public class BookDao &#123; public void book()&#123; System.out.println("bookDao"); &#125;&#125; OrderDao.java 12345public class BookDao &#123; public void book()&#123; System.out.println("bookDao"); &#125;&#125; BookService.java 12345678910111213public class BookService &#123; @Resource(name = "bookDao") private BookDao bookDao; @Resource(name = "ordlerDao") private OrderDao ordersDao; public void service()&#123; System.out.println("service"); bookDao.book(); ordersDao.buy(); &#125;&#125; 配置文件 12345678910&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;context:component-scan base-package="com.young.xmlanno"/&gt; &lt;bean id="bookservice" class="com.young.xmlanno.BookService"/&gt; &lt;bean id="bookDao" class="com.young.xmlanno.BookDao"/&gt; &lt;bean id="ordlerDao" class="com.young.xmlanno.OrderDao"/&gt;&lt;/beans&gt; 测试类 12345678910111213import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test &#123; @org.junit.Test public void testxmlAnno()&#123; ApplicationContext context = new ClassPathXmlApplicationContext("bea2.xml"); BookService bookService= (BookService) context.getBean("bookservice"); bookService.service(); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Junit单元测试]]></title>
      <url>%2F2017%2F01%2F19%2FJunit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%2F</url>
      <content type="text"><![CDATA[什么是Junit什么是Junit，Junit是用于java代码单元测试的框架。 为什么要用Junit简单的说，我们在写java代码的时候每次写完一个类，都要写一个public static void main(String args[])的方法来进行方法的调用，写完之后再删除，如果类比较多那么我们所创建的方法也比较多，操作起来比较麻烦。而Junit就是为了解决这种情况，他可以在一个类里面创建多个可运行的方法，来进行测试，这便是我们所使用Junit的原因。 如何使用我们在我们的项目中使用Junit需要先下载junit.jar包和hamcrest-core.jar并添加Github地址。这样我们就可以进行使用了。 示例代码我们创建了一个HelloWorld的类，类里面有sayHello这个方法，我们要对这个方法进行测试。12345public class HelloWorld &#123; public void sayHello()&#123; System.out.println("Hello"); &#125;&#125; 我们写一个类进行测试。 1234567public class HelloWorldTest &#123; @Test public void sayHello() throws Exception &#123; HelloWorld helloWorld = new HelloWorld(); helloWorld.sayHello(); &#125;&#125; 我们可以这样对sayHello方法就行测试。 但是，我们创建这个方法要满足一下要求。 方法必须是公用且无返回值(public void) 方法必须可以抛出异常throws Exception 方法必须用@test注解 这样我们就创建好了一个测试方法，并且我们可以在该类下写无数个这个的方法用于不同的测试。 IDEA演示 版本IDEA U 2016.3.1 首先我们先写好我们的HelloWorld类针对我们的sayHello方法进行测试，快捷键ctrl+shift+t这样我们就可以测试我们的方法了。 一般为了方便，我们会新建一个test文件夹。标记为test目录，这样自动生成的test类就会放到test目录中，不影响我们正常编写的代码。 结果如下]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Maven入门]]></title>
      <url>%2F2017%2F01%2F10%2FMaven%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[什么是MavenMaven是一个跨平台的项目管理工具，主要用于基于Java平台的项目构建，依赖管理。 maven之前的项目管理一般为 ant。 Maven的作用Maven的出现时为了解决项目的一些问题： 如果有好几个项目，这好几个项目中，需要用到很多相同的jar包，能不能只建立一个仓库来解决这个问题？ 测试方法能不能全部运行呢？ 怎么样把一个模块的功能放入到仓库中 Maven的安装和配置Maven的安装Jdk要求jdk要求1.7+ 下载Maven从Maven官网上下载最新版本的Maven 设定环境变量将下载好的Maven的bin追加到环境变量path中。 检查Maven是否配置成功在cmd中运行mvn -v，当出现下面的提示证明配置正确 注意：要用管理员权限运行cmd，否则会报错 建库Maven的很大作用就是导入jar包,所以我们建立一个仓库来放置项目所用的jar包，在需要的时候进行管理。 路径Maven的仓库默认路径是C:\Users\UserName\.m2 ,注：UserName为个人电脑名称 Maven的约定 路径 作用 src/main/java 存放项目的java文件 src/main/resources 存放项目的资源文件，如spring，hibernate的配置文件 src/test/java 存放所有的测试的java文件 src/test/resources 存放测试用的资源文件 target 项目输出位置 pom.xml 文件 必须按照这个约定放置 Maven项目知道了Maven的约定，那么我们就可以根据约定来进行创建第一个项目。在HelloWorld.java文件 1234567package com.young.maven.model;public class HelloWorld&#123; public String sayHello()&#123; return "HelloWorld"; &#125;&#125; HelloWorldTest.java文件 1234567891011package com.young.maven.model;import org.junit.*;import org.junit.Assert.*;public class HelloWorldTest&#123; @Test public void testHello()&#123; Assert.assertEquals("HelloWorld",new HelloWorld().sayHello()); &#125;&#125; pom.xml文件12345678910111213141516&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.young.maven&lt;/groupId&gt; &lt;artifactId&gt;maven-model&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.10&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;/project&gt; 在根目录下执行命令mvn compile这样就会编译成功。 Maven构建命令 命令 作用 mvn -v 查看maven版本 compile 编译 test 测试 package 打包 clean 删除target install 安装jar到本地仓库 Maven坐标123&lt;groupId&gt;&lt;/groupId&gt;&lt;artifactId&gt;&lt;/artifactId&gt;&lt;version&gt;&lt;/version&gt; 在Mevan中这三个就是基础坐标也是唯一的表示，可以快速定位到任何一个包 仓库 本地仓库 远程仓库 镜像仓库 如果Maven在本地仓库找不到构建，那么就会去Maven的中央仓库去寻找，如果Maven的中央仓库没有，就会报错。因为Maven的远程仓库在国外,常常无法访问或者很慢,这是我们就要使用一些镜像仓库,来帮助我们。在”~\apache-maven-3.3.9\conf\settings.xml”文件中，找到mirrors,我们可以修改这里进行镜像设置。 Maven中央仓库 中央仓库地址: http://repo.maven.apache.org/ pom.xml project是包含了pom的约束信息 modelVersion指定了当前pom的版本 groupId当前maven输入那个项目，包名+项目名 artifactId项目名+模块名version版本号，第一个0表示大版本号，第二个0表示分支版本号，第三个0表示小版本号。snapshot快照，alpha内部测试版本，beta公测版本，Relese稳定版本，GA正式发布版本。 packaging打包方式，默认为jar包，可以为war，zip name 项目描述 url项目地址，项目描述 developers 开发人员信息 licenses 许可信息 organization组织信息 1234567891011121314151617181920212223242526272829&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;&lt;/groupId&gt; &lt;artifactId&gt;&lt;/artifactId&gt; &lt;version&gt;&lt;/version&gt; &lt;type&gt;&lt;/type&gt; &lt;scope&gt;依赖范围&lt;/scope&gt; &lt;!--设置依赖是否可选--&gt; &lt;optional&gt;&lt;/optional&gt; &lt;!--排除依赖传递列表--&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;build&gt; &lt;plugins&gt; &lt;groupId&gt;&lt;/groupId&gt; &lt;artifactId&gt;&lt;/artifactId&gt; &lt;/plugins&gt;&lt;/build&gt;&lt;parent&gt;&lt;/parent&gt;&lt;modules&gt;&lt;/modules&gt; Maven依赖依赖范围 scope 控制依赖和三种classpath的关系。 三种classpath 编译 测试 运行 scope一共有6个值分别为compile,provided,runtime,test,system,import。 名称 范围 compile 默认的范围，编译测试运行都要效。 provided 在编译和测试有效，运行时无效。 runtime 在测试和运行时有效 test 仅仅在测试有效 system 在本系统有效，移植性非常差 improt 导入范围，它只是用在dependencyManagement中，表示从其他pom.xml继承的依赖。 依赖传递例如MavenB项目依赖MavenA,而MavenC依赖于MavenB，这样的活那么MavenC就会依赖于MavenA。 依赖冲突A和B依赖不同版本但是相同的构建，就会出现冲突。 处理原则： 断路优先A-&gt;B -&gt; C -&gt;X(jar)A-&gt;D-&gt;X(jar)会优先解析路径短的。 先声明先优先如果两条路径一样，那么先声明的会先依赖。 Maven创建JavaWeb Maven IDEA 创建Maven项目,选择webapp填写好 GroupId和ArtifacetId之后next。这样我们就完成了一次创建。因为只为我们创建了resource目录，按照Maven的约定，我们需要创建其他目录。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2016年终总结]]></title>
      <url>%2F2016%2F12%2F30%2F2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[忙完了考试，课程设计，大创答辩，终于可以静下心来写一写今年的年终总结。 0x01 概况 只能感叹时光飞逝，一年又一年啊，记得去年写这个总结的时候还是在宿舍，午后阳光。那时刚好，今年写总结的地点已经变为了实验室。来说说这一年是怎么过来的吧。 0x02 蓝桥杯 去年元旦刚过，大一的我还不太懂事，那时的我应该是在准备蓝桥杯吧。比较紧张，也想着在这次比赛中获得一个好的成绩，虽说距离蓝桥杯还有一段时间，毕竟大一，想着准备充足一些，有种初生牛犊不怕虎的感觉。在准备蓝桥杯的同时也在准备考试。蓝桥杯的最后是没有任何名次……仅仅限于我，我不清楚最后改题是在我离开考场后改题，还是就没有通知，总之我是没有拿到任何名次，当时的感受都记录在这个博客里。 第一次参加蓝桥杯的感受 0x03 实验室 实验室的加入对于我个人来说还是有所提升的，在大一学完c语言后，能每周写代码的人我觉得不超过20%，甚至比这个还少。很多人学完c语言后电脑就成了电视机，游戏机。也许我如果没有加入实验室可能会成为他们的一名。加入实验室的过程我还记得，比较痛苦的经历，熬了两天，把慕课网上的Java入门看完，勉勉强强的加入了实验室。大一上学期的我感觉是对程序刚刚有个了解而已，连入门都不敢说。加入实验室后，自己搭建了github+hexo博客，顺便了学会了git，github。认识github之后，真的如网上大神所说，打开了一个新世界的大门。实验室其实给我更多的是一种激励。说实话，在实验室仍然靠自学，自学能力提高了一个很高的程度，不仅仅在编程方面。我的小伙伴常常和我说：我感觉上了大学很多人的脑子都不动了，感觉他们退化了，变笨了。当然实验室的收获不仅仅是这点点。 0x04 Git/Github 可以毫不虚心的说，在我们这个这一届的实验室我是第一个了解并且使用GitHub的人，所以我写了一个关于Github入门系列的教程。不仅仅是为了实验室的同学，也是为了我与和我一样想学习Github难找到教程的人。也收获了每个月我的博客访问量达到了3000+。赠人玫瑰，手有余香。 0x05 Android 暑假前曾经一度想参加华北五省计算机应用大赛。于是开始了一个暑假的Android学习,学习过程并没有我想的那么一帆风顺，尤其是在新的控件学习中，在一个月的学习之后开始于小伙本尝试的做我们的应用，才发现我们仍旧什么都不会，直到现在，还是一种越学越多的感觉，总感觉还有很多新的知识要学习。 0x06 项目组 加入实验室之后，我发现越来越多的比赛想去尝试，想去报名，很多比赛需要一个团队去一起努力，组建一个团队是我大二一开始就出现的想法，也和好几个人讨论过，每次总是讨论到最后没有什么结论。知道上个月底，我开始了最后的突击。因为马上2016就要过去了，再不确立这一年过去，2017也会和这一样，一直拖。还好，最后项目组成立了。四个人可以负责两个前段，两个后端。项目组的组建应该说是刚刚赶上，为时不晚。 0x07 总结 2016年马上就要离去，总结2016的收获其实不少，缺失也是有的，唯有2017努力了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ArrayList源码分析]]></title>
      <url>%2F2016%2F11%2F27%2FArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[概况ArrayList 是我们常用的一种数据结构。仔细分析 ArrayList 这个类和类所包含的方法。 签名ArrayList继承了AbstractList 和使用了List RandomAccess Cloneable和Serializable四个接口。 AbstractList该接口的作用是用于 AbstractList 提供了 List 接口的默认实现，在AbstractList中已经使用了List接口，为什么还会在ArrayList中使用的List接口，目测是为了让大家更加明白清楚的知道这个类是List这个集合。RandomAccess 是 变量ArrayList只有两个私有变量，分别是size和elementData。elementData这个是来记录传入ArrayList的元素。而size是用来记录传入的元素的个数。 构造器该类里面一共有三个构造器 ArrayList() ArrayList(int) ArrayList(Collection) 下面就详细的分析一下三个构造器的使用。 ArrayList()ArrayList无参的构造器,使用这个无参构造器会默认有一个长度为10的数组。 123public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&#125; ArrayList(int)传入一个int值，这个值为ArrayList的初始容量。如果等于0则会默认使用EMPTY_ELEMENTDATA生成一个空的集合。如果输入为非负数的话会抛出一个IllegalArgumentException(非法参数)异常。 12345678910 public ArrayList(int initialCapacity) &#123; if (initialCapacity &gt; 0) &#123; this.elementData = new Object[initialCapacity]; &#125; else if (initialCapacity == 0) &#123; this.elementData = EMPTY_ELEMENTDATA; &#125; else &#123; throw new IllegalArgumentException("Illegal Capacity: "+ initialCapacity); &#125;&#125; ArrayList(Collection)这个构造函数是传入一个集合,toArray是将这个集合转化为一个实际的数组，下面的程序就是和传入int类型是差不多的，判断数组长度是否为0，如果等于0则会默认使用EMPTY_ELEMENTDATA生成一个空数组。在不为空的时候，将Collection的值copy到ArrayList。 1234567891011public ArrayList(Collection&lt;? extends E&gt; c) &#123; elementData = c.toArray(); if ((size = elementData.length) != 0) &#123; // c.toArray might (incorrectly) not return Object[] (see 6260652) if (elementData.getClass() != Object[].class) elementData = Arrays.copyOf(elementData, size, Object[].class); &#125; else &#123; // replace with empty array. this.elementData = EMPTY_ELEMENTDATA; &#125; &#125; 方法trimToSize()该方法主要是用于将ArrayList实际容量调整为列表当前大小。这里它实用了一个三目运算? :。 modCount这个变量在AbstractList这个类里面,其中定义int这个变量使用了transient。 protected transient int modCount = 0; transient 当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中。 三目运算和if else的区别，三目运算是会有一个返回值的，if else没有返回值。如果非要写成if else应该也可以。 12345678public void trimToSize() &#123; modCount++; if (size &lt; elementData.length) &#123; elementData = (size == 0) ? EMPTY_ELEMENTDATA : Arrays.copyOf(elementData, size); &#125; &#125; ensureCapacity()如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所指定的元素数。 DEFAULT_CAPACITY=10是一个常量1234567891011public void ensureCapacity(int minCapacity) &#123; int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) // any size if not default element table ? 0 // larger than default for default empty table. It&apos;s already // supposed to be at default size. : DEFAULT_CAPACITY; if (minCapacity &gt; minExpand) &#123; ensureExplicitCapacity(minCapacity); &#125; indexOf()返回此列表中首次出现的指定元素的索引，或如果此列表不包含元素，则返回 -1。更确切地讲，返回满足 (o==null ? get(i)==null : o.equals(get(i))) 的最低索引 i ，如果不存在此类索引，则返回 -1。 123456789101112public int indexOf(Object o) &#123; if (o == null) &#123; for (int i = 0; i &lt; size; i++) if (elementData[i]==null) return i; &#125; else &#123; for (int i = 0; i &lt; size; i++) if (o.equals(elementData[i])) return i; &#125; return -1; &#125; contains()如果此列表中包含指定的元素，则返回 true。更确切地讲，当且仅当此列表包含至少一个满足 (o==null ? e==null : o.equals(e)) 的元素 e 时，则返回 true。 123public boolean contains(Object o) &#123; return indexOf(o) &gt;= 0; &#125; lastIndexOf()lastIndexOf用于返回此列表中最后一次出现的指定元素的索引，或如果此列表不包含索引，则返回 -1。这里if和else里面采用了两种不同的比较方法。if代码块里面是采用了==说明比较的是对象，而else的代码块采用的是equals比较。为什么这里采用两种比较方法呢？ 这里产生一个疑问？ null是对象还是值？ 正在技术论坛上提问 Keywords 50 character sequences, formed from ASCII letters, are reserved for use as keywords and cannot be used as identifiers (§3.8).Keyword: one of abstract continue for new switch assert default if package synchronized boolean do goto private this break double implements protected throw byte else import public throws case enum instanceof return transient catch extends int short try char final interface static void class finally long strictfp volatile const float native super while The keywords const and goto are reserved, even though they are not currently used. This may allow a Java compiler to produce better error messages if these C++ keywords incorrectly appear in programs.While true and false might appear to be keywords, they are technically Boolean literals (§3.10.3). Similarly, while null might appear to be a keyword, it is technically the null literal (§3.10.7). 在这个50个关键字中没有null，但是下面的一行字写了。 While true and false might appear to be keywords, they are technically Boolean literals (§3.10.3). Similarly, while null might appear to be a keyword, it is technically the null literal (§3.10.7). 虽然true和false可能看起来是关键字，但它们在技术上是布尔值（§3.10.3）。类似地，虽然null可能看起来是一个关键字，但在技术上是null值（§3.10.7）。 java的官方文档里写着true,false,null是一个值，也就是说java有50个关键字，3个特殊的值。竟然是值，为什么在比较的时候会报错？ 12345678public class Main &#123; public static void main(String[] args) &#123; String a = null; String b = null; System.out.println(a == b); System.out.println(a.equals(b)); &#125;&#125; 输出结果12345678910 trueException in thread "main" java.lang.NullPointerException at Main.Main.main(Main.java:14) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)Process finished with exit code 1 第二个方法抛出一个空指针异常。竟然是一个值，那么应该两种都会显示ture。 这样也就说明了为什么和null比较时要用==而不是equals。12345678910public int lastIndexOf(Object o) &#123; if (o == null) &#123; for (int i = size-1; i &gt;= 0; i--) if (elementData[i]==null) return i; &#125; else &#123; for (int i = size-1; i &gt;= 0; i--) if (o.equals(elementData[i])) return i; &#125; clone()返回此 ArrayList 实例的浅表复制。（不复制这些元素本身。） 什么是浅表复制(shallow copy)对于shallow copy的翻译很多，有叫浅表复制，浅复制，影子复制，与它向对的是深度复制。浅表复制被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象 1234567891011121314151617 /** * Returns a shallow copy of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance. (The * elements themselves are not copied.) * * @return a clone of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance */public Object clone() &#123; try &#123; ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) super.clone(); v.elementData = Arrays.copyOf(elementData, size); v.modCount = 0; return v; &#125; catch (CloneNotSupportedException e) &#123; // this shouldn't happen, since we are Cloneable throw new InternalError(e); &#125; &#125; add(E)该方法是用于添加将指定元素添加到末尾，通过ensureCapacityInternal()这个方法来为ArrayList扩容，在为elementData的末尾添加指定元素。代码的注释也强调了，是增加modCount。 12345public boolean add(E e) &#123; ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true; &#125; add(int,E)这个方法的一开始就调用了rangCheckForAdd()这个方法，这个私有方法主要是用来判断传入的索引，如果传入的数值大于最大值或者小于零会抛出一个越界异常。System.arraycopy()是用来复制数组的，将要添加位置之后的数组整体后移一位。 1234567891011121314public void add(int index, E element) &#123; rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; &#125; private void rangeCheckForAdd(int index) &#123; if (index &gt; size || index &lt; 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); &#125; remove(Object)移除此列表中首次出现的指定元素（如果存在）。如果列表不包含此元素，则列表不做改动。更确切地讲，移除满足 (o==null ? get(i)==null : o.equals(get(i))) 的最低索引的元素（如果存在此类元素）。如果列表中包含指定的元素，则返回 true（或者等同于这种情况：如果列表由于调用而发生更改，则返回 true）。 12345678910111213141516public boolean remove(Object o) &#123; if (o == null) &#123; for (int index = 0; index &lt; size; index++) if (elementData[index] == null) &#123; fastRemove(index); return true; &#125; &#125; else &#123; for (int index = 0; index &lt; size; index++) if (o.equals(elementData[index])) &#123; fastRemove(index); return true; &#125; &#125; return false; &#125; clear()通过一个循环将ArrayList中的元素赋值为null，最后将size赋值为0，这样应该就会保证没有浪费内存。 123456789public void clear() &#123; modCount++; // clear to let GC do its work for (int i = 0; i &lt; size; i++) elementData[i] = null; size = 0; &#125; ListIterator()用于集合遍历，如果索引大于最大值或者小于0，抛出异常，否者使用ListItr()进行。 12345public ListIterator&lt;E&gt; listIterator(int index) &#123; if (index &lt; 0 || index &gt; size) throw new IndexOutOfBoundsException("Index: "+index); return new ListItr(index); &#125; ListItr()这是一个私有的内部类，继承了Iterator这个接口， 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364private class Itr implements Iterator&lt;E&gt; &#123; int cursor; // index of next element to return int lastRet = -1; // index of last element returned; -1 if no such int expectedModCount = modCount; public boolean hasNext() &#123; return cursor != size; &#125; @SuppressWarnings("unchecked") public E next() &#123; checkForComodification(); int i = cursor; if (i &gt;= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[lastRet = i]; &#125; public void remove() &#123; if (lastRet &lt; 0) throw new IllegalStateException(); checkForComodification(); try &#123; ArrayList.this.remove(lastRet); cursor = lastRet; lastRet = -1; expectedModCount = modCount; &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; @Override @SuppressWarnings("unchecked") public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123; Objects.requireNonNull(consumer); final int size = ArrayList.this.size; int i = cursor; if (i &gt;= size) &#123; return; &#125; final Object[] elementData = ArrayList.this.elementData; if (i &gt;= elementData.length) &#123; throw new ConcurrentModificationException(); &#125; while (i != size &amp;&amp; modCount == expectedModCount) &#123; consumer.accept((E) elementData[i++]); &#125; // update once at end of iteration to reduce heap write traffic cursor = i; lastRet = i - 1; checkForComodification(); &#125; final void checkForComodification() &#123; if (modCount != expectedModCount) throw new ConcurrentModificationException(); &#125; &#125; replaceAll()这个方法是用来替换所有的匹配项 传入的参数是UnaryOperator是在java 8引入的lambda表达式，具体如何使用以后再说。123456789101112public void replaceAll(UnaryOperator&lt;E&gt; operator) &#123; Objects.requireNonNull(operator); final int expectedModCount = modCount; final int size = this.size; for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123; elementData[i] = operator.apply((E) elementData[i]); &#125; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; modCount++; &#125; sort()12345678public void sort(Comparator&lt;? super E&gt; c) &#123; final int expectedModCount = modCount; Arrays.sort((E[]) elementData, 0, size, c); if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; modCount++; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MD5加密]]></title>
      <url>%2F2016%2F10%2F27%2FMD5%E5%8A%A0%E5%AF%86%2F</url>
      <content type="text"><![CDATA[什么是MD5加密MD5加密即Message-Digest Algorithm5，历经了MD2，MD4发展，在1991年提出。 中文名：消息摘要算法第五版 英文名：Message-Digest Algorithm5 提出时间：1991年 基本原理MD5就是byte值和一个int的255进行与运算，得到一个int值，再将这个int值转化为十六进制的值，这样就完成了一个MD5加密。 特点只能从明文加密为密文，不能把密文在转化为明文。加密后是不可逆性。确保明文的加密性。 MD5加密代码通过MD5的密文进行加密。 示例代码12345678910111213141516171819202122232425262728import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MD5Utils &#123; public static void main(String[] args) &#123; String passWord = "123456"; StringBuilder sb = new StringBuilder(); //获取数据摘要器 try &#123; MessageDigest messageDigest = MessageDigest.getInstance("MD5"); //将一个byte数组进行加密操作，返回的是一个加密的byte数组，二进制的哈西计算，md5加密的第一步 byte[] digest = messageDigest.digest(passWord.getBytes()); for (int i = 0; i &lt; digest.length; i++) &#123; int result = digest[i] &amp; 0xff; //将得到的int类型的值转化为16进制的值 String hexString = Integer.toHexString(result); if (hexString.length()&lt;2)&#123;//系统会自动把0省略，所以添加0 sb.append("0"); &#125; sb.append(hexString); &#125; System.out.println(sb.toString()); &#125; catch (NoSuchAlgorithmException e) &#123;//找不到加密方式异常 e.printStackTrace(); &#125; &#125;&#125; 输出结果为：e10adc3949ba59abbe56e057f20f883e 防破解上面的代码可以对123456进行加密，但是目前网上有好多破解网站，他们的破解原理就是将一些常见的MD5加密密文保存到数据库中，通过比对来达到所谓的破解。所以通过下面的方法进行加密会完全是网上 不规则加密(加盐)通过对十六进制变量后进行不规则操作加密,在13行代码后边加数，进行不规则加密。这样会的话几乎已经无法完成破解了。 12345678910111213141516171819202122232425import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MD5Utils &#123; public static void main(String[] args) &#123; String passWord = "123456"; StringBuilder sb = new StringBuilder(); try &#123; MessageDigest messageDigest = MessageDigest.getInstance("MD5"); byte[] digest = messageDigest.digest(passWord.getBytes()); for (int i = 0; i &lt; digest.length; i++) &#123; int result = digest[i] &amp; 0xff; String hexString = Integer.toHexString(result)+1;//不规则加密，俗称加盐 if (hexString.length()&lt;2)&#123; sb.append("0"); &#125; sb.append(hexString); &#125; System.out.println("密码为 123456\n 加密后"); System.out.println(sb.toString()); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 加密结果e11a1dc1391491ba1591ab1be1561e01571f21f18813e1 银行系统MD5加密方式这种是银行等系统要求安全性非常高的系统，一般会对加密后的密文再次进行一次MD5加密，这样进行10-30次，达到一个无法破解的密文。 123456789101112131415161718192021222324252627282930import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MD5Utils &#123; //银行 银行卡 6位数 将密码进行十到三十次MD5加密 public static void main(String[] args) &#123; String passWord = "123456"; StringBuilder sb = new StringBuilder(); try &#123; MessageDigest messageDigest = MessageDigest.getInstance("MD5"); for (int h = 0; h &lt; 10; h++) &#123; //进行多次循环加密 byte[] digest = messageDigest.digest(passWord.getBytes()); for (int i = 0; i &lt; digest.length; i++) &#123; int result = digest[i] &amp; 0xff; String hexString = Integer.toHexString(result)+1; if (hexString.length() &lt; 2) &#123; sb.append("0"); &#125; sb.append(hexString); &#125; passWord = sb.toString(); sb.delete(0, sb.length()); &#125; System.out.println(passWord); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 加密后结果：6912c1901801301e61951b01281ca1f21ca1dd1dc17e12a1 补充 Kotlin 版本 123456789101112131415161718192021222324252627import java.security.MessageDigest/** * md5 加密工具类用于加密密码 * 默认没有加盐 */object Md5Utils &#123; private const val salt: Int = 0 fun md5(message: String): String &#123; val sb = StringBuilder() val messageDigest = MessageDigest.getInstance("MD5") val digest: ByteArray = messageDigest.digest(message.toByteArray()) for (i in 0 until digest.size) &#123; val result: Int = digest[i].toInt() and (0xff) val hexString = Integer.toHexString(result) + salt if (hexString.length &lt; 2) &#123; sb.append("0") &#125; sb.append(hexString) &#125; return sb.toString() &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[StringBuilder源码分析]]></title>
      <url>%2F2016%2F10%2F25%2FStringBuilder%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[#StringBuilder源码分析 作者wevanyoungxhui 概况一个可变的字符序列。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。 签名123public final class StringBuilderextends AbstractStringBuilderimplements java.io.Serializable, CharSequence 可以看到StringBuilder继承了 Serializable：可以序列化的标志。 CharSequence接口：包含了charAt()、length() 、subSequence()、toString()这几个方法，String类也实现了这个接口。 抽象类AbstractStringBuilder，这个类封装了StringBuilder和StringBuffer大部分操作的实现 CharSequence接口这个接口是代表一个有序字符集合，使用该接口的方法一共有四个：CharBuffer、String、StringBuffer、StringBuilder。 AbstractStringBuilder类变量及构造方法 123456char[] value;int count;AbstractStringBuilder() &#123;&#125;AbstractStringBuilder(int capacity) &#123; value = new char[capacity];&#125; AbstractStringBuilder内部用一个char[]数组保存字符串，可以在构造的时候指定初始容量方法。 append()方法123456789public AbstractStringBuilder append(String str) &#123; if (str == null) return appendNull(); int len = str.length(); ensureCapacityInternal(count + len); str.getChars(0, len, value, count); count += len; return this;&#125; append()方法用于追加字符，如果str是null,则会调用appendNull()方法。这个方法其实是追加了’n’、’u’、’l’、’l’这几个字符。如果不是null，则首先扩容，然后调用String的getChars()方法将str追加到value末尾。最后返回对象本身，所以append()可以连续调用。 Stringbuilder构造器StringBuilder()这个构造器的作用是构造一个初始化不带参数的，初始化字节为16字节。 StringBuilder(int)构造一个其中不带字符的字符串生成器，初始容量由传入的 int 值指定。 StringBuilder(String)构造一个字符串生成器，并初始化为指定的字符串内容。该字符串生成器的初始容量为 16 加上字符串参数的长度。 1234public StringBuilder(String str) &#123; super(str.length() + 16); append(str); &#125; 如果传入的字符串问 null 则会抛出空指针 NullPointerException 异常。 示例代码 12345678public class StringBuilderApi &#123; public static void main(String[] args) &#123; String str=null; StringBuilder stringBuilder=new StringBuilder(str); System.out.println(stringBuilder); &#125;&#125; 输出结果 Exception in thread “main” java.lang.NullPointerException at java.lang.StringBuilder.(StringBuilder.java:112) at StringBuilderApi.main(StringBuilderApi.java:7) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) StringBulider(CharSequence)构造一个字符串生成器，包含与指定的 CharSequence 相同的字符。该字符串生成器的初始容量为 16 加上 CharSequence 参数的长度。 append()方法该方法一共用13个重载函数,用于实现不同的数据类型。Object,String,StringBuffer,CharSequence,char[],boolen,int ,long,float,double 等,但是他们的作用是一直的。那就是将参数添加到字符串中。 12345678public StringBuilder append(String str) &#123;super.append(str);return this;&#125;public StringBuilder append(CharSequence s) &#123;super.append(s);return this;&#125; Stringbulider的appen()方法显然直接调用的父类AbstractStringBuilder中的该方法。 appendCodePoint()方法该方法是附加一个Uncode字符在字符串末尾。 12345678/** * @since 1.5 */ @Override public StringBuilder appendCodePoint(int codePoint) &#123; super.appendCodePoint(codePoint); return this; &#125; delete()方法该方法是删除所字符串中的字符，所传入的参数为其实点和结束点。直接使用父类(AbstractStringBuilder)的方法 12345678/** * @throws StringIndexOutOfBoundsException &#123;@inheritDoc&#125; */ @Override public StringBuilder delete(int start, int end) &#123; super.delete(start, end); return this; &#125; toString()方法toString()方法返回了一个新的String对象，与原来的对象不共享内存。 1234public String toString() &#123;// Create a copy, don't share the array return new String(value, 0, count);&#125; replace()方法replace 方法仍旧继承了父类的 replace 方法,是替换字符1234public StringBuilder replace(int start, int end, String str) &#123; super.replace(start, end, str); return this; &#125; insert()方法该方法是插入字符串。该方法重载了12个方法。 总结该类所有的方法都是通过父类( AbstractStringBuilder )来实现。该方法与String和StringBuffer的区别在于，String是不可修改的，StringBuffer和StringBuilder是可以修改的，但是StringBuffer是线程安全的，StringBuilder是线程不安全的，但是在效率上， StringBuffer 因为对方法做了同步，所以一般是低于 StringBuilder的.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[String源码剖析]]></title>
      <url>%2F2016%2F09%2F11%2FString%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%2F</url>
      <content type="text"><![CDATA[String是java程序中出现比较多的对象，分析一下String首先String是由final修饰的。因此String不可变，无法继承。 将方法或类声明为final主要目的是：确保它们不会再子类中改变语义。String类是final类，这意味着不允许任何人定义String的子类。换言之，如果有一个String的引用，它引用的一定是一个String对象，而不可能是其他类的对象。——《Java核心技术 卷I》作者：R eversal链接：https://www.zhihu.com/question/31345592/answer/51639967来源：知乎著作权归作者所有，转载请联系作者获得授权。 String不可变性及其原因String的不可变性什么叫String的不可变性呢？让我们来看一个例子。​ String s=“abcd“；上面的语句定义了一个字符串变量s，该变量指向字符串“abcd”，当初始化变量s时，会在堆中为s非配内容空间，当将字符串变量，赋值给另一个字符串变量时，例如：String s2=s；此时，s2和s是相同的字符串对象，它们指向堆中的同一个内存空间。当一个字符串连接其他字符时，他就指向了新的字符串对象，例如，s=s.concat(“ef“）， 此时，s=”abcdef”;它在内存中又指向了一个新的储存空间，存放字符串”abcdef”。当一个字符串在堆中被分配内容时，它就是不可变的，任何String的方法都无法改变字符串本身，但它可以返回一个新的字符串对象。由于String是不可变的，所以他们的空间可以共享。例如String str = “abc”;就和JAVA​ char data[] = {‘a’, ‘b’, ‘c’};​ String str = new String(data); 是等价的，它们共享一个存储空间。如果需要可以修改的字符串对象，可以使用StringBuffer和StringBuilder，StringBuffer是线程安全的，由于StringBuilder不需要进行同步操作，StringBuilder是比较快速的。 String不可变性的原因 源码中String的本质是一个final类型的char数组，既然是final类型，那个该数组引用value就不允许再指向其他对象了，因此只从类的设计角度讲：如果jdk源码中并没有提供对value本身的修改，那么理论上来讲String是不可变的 字符串池（String pool）的需求 在Java中，当初始化一个字符串变量时，如果字符串已经存在，就不会创建一个新的字符串变量，而是返回存在字符串的引用。 例如： String string1=”abcd”; String string2=”abcd”; 这两行代码在堆中只会创建一个字符串对象。如果字符串是可变的，改变另一个字符串变量，就会使另一个字符串变量指向错误的值。 缓存字符串hashcode码的需要 字符串的hashcode是经常被使用的，字符串的不变性确保了hashcode的值一直是一样的，在需要hashcode时，就不需要每次都计算，这样会很高效。 出于安全性考虑 字符串经常作为网络连接、数据库连接等参数，不可变就可以保证连接的安全性。 签名（signature） 12public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence String使用了 标记接口 java.io.Serializable 标记接口 Comparable 标记接口 CharSequenc Compareable接口123public interface Comparable&lt;T&gt; &#123; public int compareTo(T o);&#125; 此接口强行对实现它的每个类的对象进行整体排序。此排序被称为该类的自然排序，类的 compareTo 方法被称为它的自然比较方法 。 CharSequence接口CharSequence的所有成员变量和方法。 成员变量 private final char value[];//这是用于存储String字符的数组 private final int offset;//这是value数组的第一个有效的字符的index private final int count;//这是String中的字符个数 private int hash; // 存储String的hashcode，默认是0 private static final long serialVersionUID = -6849794470754667710L;//在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常 源码剖析构造器String类的构造器有十六个，除了提供了一个无参构造函数之外，还有十五个带参构造器。 String()123public String() &#123; this.value = "".value; &#125; 初始化一个新创建的 String 对象，使其表示一个空字符序列。注意，由于 String 是不可变的，所以无需使用此构造方法 String(String)1234public String(String original) &#123; this.value = original.value; this.hash = original.hash;&#125; 初始化一个新创建的 String对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。由于 String 是不可变的，所以无需使用此构造方法，除非需要 original 的显式副本。 String(char)123public String(char value[]) &#123; this.value = Arrays.copyOf(value, value.length); &#125; 分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。该字符数组的内容已被复制；后续对字符数组的修改不会影响新创建的字符串。 String(char,int,int)12345678910111213141516171819public String(char value[], int offset, int count) &#123; public String(char value[], int offset, int count) &#123; if (offset &lt; 0) &#123; throw new StringIndexOutOfBoundsException(offset); &#125; if (count &lt;= 0) &#123; if (count &lt; 0) &#123; throw new StringIndexOutOfBoundsException(count); &#125; if (offset &lt;= value.length) &#123; this.value = "".value; return; &#125; &#125; if (offset &gt; value.length - count) &#123; throw new StringIndexOutOfBoundsException(offset + count); &#125; this.value = Arrays.copyOfRange(value, offset, offset+count); &#125; 作用为分配一个新的value，将传入的char数组进行一次复制，offset是开始索引位置，count表示数组长度。 String(int,int,int)1234567891011121314151617181920212223242526272829303132333435363738394041424344public String(int[] codePoints, int offset, int count) &#123; if (offset &lt; 0) &#123; throw new StringIndexOutOfBoundsException(offset); &#125; if (count &lt;= 0) &#123; if (count &lt; 0) &#123; throw new StringIndexOutOfBoundsException(count); &#125; if (offset &lt;= codePoints.length) &#123; this.value = "".value; return; &#125; &#125; // Note: offset or count might be near -1&gt;&gt;&gt;1. if (offset &gt; codePoints.length - count) &#123; throw new StringIndexOutOfBoundsException(offset + count); &#125; final int end = offset + count; // Pass 1: Compute precise size of char[] int n = count; for (int i = offset; i &lt; end; i++) &#123; int c = codePoints[i]; if (Character.isBmpCodePoint(c)) continue; else if (Character.isValidCodePoint(c)) n++; else throw new IllegalArgumentException(Integer.toString(c)); &#125; // Pass 2: Allocate and fill in char[] final char[] v = new char[n]; for (int i = offset, j = 0; i &lt; end; i++, j++) &#123; int c = codePoints[i]; if (Character.isBmpCodePoint(c)) v[j] = (char)c; else Character.toSurrogates(c, v, j++); &#125; this.value = v; &#125; 方法checkBounds()方法12345678private static void checkBounds(byte[] bytes, int offset, int length) &#123; if (length &lt; 0) throw new StringIndexOutOfBoundsException(length); if (offset &lt; 0) throw new StringIndexOutOfBoundsException(offset); if (offset &gt; bytes.length - length) throw new StringIndexOutOfBoundsException(offset + length); &#125; 这是一个私有的静态方法用于检查边界的方法。 length()方法获得长度的方法 123public int length() &#123; return value.length; &#125; isEmpty()方法检查字符串长度是否是0，当长度为0返回true，否则返回false。 123public boolean isEmpty() &#123; return value.length == 0; &#125; charAt()方法该方法返回的值为char数组中的其中一个。 123456public char charAt(int index) &#123; if ((index &lt; 0) || (index &gt;= value.length)) &#123; throw new StringIndexOutOfBoundsException(index); &#125; return value[index]; &#125; codePointAt()方法用于返回指定索引处的字符，与codePointBefore方法类似，codePointBefore返回的的是索引之前的值 codePointAt 123456public int codePointAt(int index) &#123; if ((index &lt; 0) || (index &gt;= value.length)) &#123; throw new StringIndexOutOfBoundsException(index); &#125; return Character.codePointAtImpl(value, index, value.length); &#125; codePointBefore 1234567public int codePointBefore(int index) &#123; int i = index - 1; if ((i &lt; 0) || (i &gt;= value.length)) &#123; throw new StringIndexOutOfBoundsException(index); &#125; return Character.codePointBeforeImpl(value, index, 0); &#125; equals()方法首先equals返回的为一个boolean值。instanceof是一个java的二元操作符，作用是检查左面是否为右面的实例化。返回值是boolean类型。该方法是将一个传入对象进行一次复制，将复制对象的字符数组与原对象的字符数组进行比较。这样就确保equals比较的是内容。这样就和==有了区分 123456789101112131415161718192021public boolean equals(Object anObject) &#123; if (this == anObject) &#123; return true; &#125; if (anObject instanceof String) &#123; String anotherString = (String)anObject; int n = value.length; if (n == anotherString.value.length) &#123; char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) &#123; if (v1[i] != v2[i]) return false; i++; &#125; return true; &#125; &#125; return false; &#125; compareTo()方法按字典顺序比较两个字符串,如果相通返回0，如果不同返回他们之间的差值。同样是通过字符数组进行比较。 123456789101112131415161718public int compareTo(String anotherString) &#123; int len1 = value.length; int len2 = anotherString.value.length; int lim = Math.min(len1, len2); char v1[] = value; char v2[] = anotherString.value; int k = 0; while (k &lt; lim) &#123; char c1 = v1[k]; char c2 = v2[k]; if (c1 != c2) &#123; return c1 - c2; &#125; k++; &#125; return len1 - len2; &#125; ### compare()方法 12345678910111213141516171819202122232425262728293031private static class CaseInsensitiveComparator implements Comparator&lt;String&gt;, java.io.Serializable &#123; // use serialVersionUID from JDK 1.2.2 for interoperability private static final long serialVersionUID = 8575799808933029326L; public int compare(String s1, String s2) &#123; int n1 = s1.length(); int n2 = s2.length(); int min = Math.min(n1, n2); for (int i = 0; i &lt; min; i++) &#123; char c1 = s1.charAt(i); char c2 = s2.charAt(i); if (c1 != c2) &#123; c1 = Character.toUpperCase(c1); c2 = Character.toUpperCase(c2); if (c1 != c2) &#123; c1 = Character.toLowerCase(c1); c2 = Character.toLowerCase(c2); if (c1 != c2) &#123; // No overflow because of numeric promotion return c1 - c2; &#125; &#125; &#125; &#125; return n1 - n2; &#125; /** Replaces the de-serialized object. */ private Object readResolve() &#123; return CASE_INSENSITIVE_ORDER; &#125; &#125; startsWith()方法检查前缀是否匹配。 1234567891011121314151617public boolean startsWith(String prefix, int toffset) &#123; char ta[] = value; int to = toffset; char pa[] = prefix.value; int po = 0; int pc = prefix.value.length; // Note: toffset might be near -1&gt;&gt;&gt;1. if ((toffset &lt; 0) || (toffset &gt; value.length - pc)) &#123; return false; &#125; while (--pc &gt;= 0) &#123; if (ta[to++] != pa[po++]) &#123; return false; &#125; &#125; return true; &#125; hashCode()方法返回String的hashCode，hashCode的计算方法是s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1] 1234567891011public int hashCode() &#123; int h = hash; if (h == 0 &amp;&amp; value.length &gt; 0) &#123; char val[] = value; for (int i = 0; i &lt; value.length; i++) &#123; h = 31 * h + val[i]; &#125; hash = h; &#125; return h; &#125; indexOf方法indexOf一共有六个构造方法。返回字符出现在字符串中第一次的位置。 1234567891011121314151617181920212223public int indexOf(int ch, int fromIndex) &#123; final int max = value.length; if (fromIndex &lt; 0) &#123; fromIndex = 0; &#125; else if (fromIndex &gt;= max) &#123; // Note: fromIndex might be near -1&gt;&gt;&gt;1. return -1; &#125; if (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) &#123; // handle most cases here (ch is a BMP code point or a // negative value (invalid code point)) final char[] value = this.value; for (int i = fromIndex; i &lt; max; i++) &#123; if (value[i] == ch) &#123; return i; &#125; &#125; return -1; &#125; else &#123; return indexOfSupplementary(ch, fromIndex); &#125; &#125; substring()方法截取代码中的片段，值得注意的是在最后的返回值中它会new一个新String类。 1234567891011121314public String substring(int beginIndex, int endIndex) &#123; if (beginIndex &lt; 0) &#123; throw new StringIndexOutOfBoundsException(beginIndex); &#125; if (endIndex &gt; value.length) &#123; throw new StringIndexOutOfBoundsException(endIndex); &#125; int subLen = endIndex - beginIndex; if (subLen &lt; 0) &#123; throw new StringIndexOutOfBoundsException(subLen); &#125; return ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this : new String(value, beginIndex, subLen); &#125; concat()方法该方法主要用于连接字符串，Api文档中的例子 “cares”.concat(“s”) returns “caress” 从功能上看concat和+是类似的。但是他们之间使用区别的。concat只能连接字符串，如果要连接其他类型要转化为String。+可以连接非字符串。如果长度为0返回原来的数组，否则就new一个数组。 12345678910public String concat(String str) &#123; int otherLen = str.length(); if (otherLen == 0) &#123; return this; &#125; int len = value.length; char buf[] = Arrays.copyOf(value, len + otherLen); str.getChars(buf, len); return new String(buf, true); &#125; ### replace()方法 replace用于替换String中的字符。先用if来判断，来减少不必要的循环。 1234567891011121314151617181920212223242526public String replace(char oldChar, char newChar) &#123; if (oldChar != newChar) &#123; int len = value.length; int i = -1; char[] val = value; /* avoid getfield opcode */ while (++i &lt; len) &#123; if (val[i] == oldChar) &#123; break; &#125; &#125; if (i &lt; len) &#123; char buf[] = new char[len]; for (int j = 0; j &lt; i; j++) &#123; buf[j] = val[j]; &#125; while (i &lt; len) &#123; char c = val[i]; buf[i] = (c == oldChar) ? newChar : c; i++; &#125; return new String(buf, true); &#125; &#125; return this; &#125; ### split ### replaceAll join()方法这个是jdk1.8的新方法，让我们分析一下。join的作用：通过一个字符或字符串来连接其他字符注释文档的例子： String message = String.join(“-“, “Java”, “is”, “cool”); ​ // message returned is: “Java-is-cool” 官方文档中的注释提示 Note that if an element is null, then {@code “null”} is added. 12345678910public static String join(CharSequence delimiter, CharSequence... elements) &#123; Objects.requireNonNull(delimiter); Objects.requireNonNull(elements); // Number of elements not likely worth Arrays.stream overhead. StringJoiner joiner = new StringJoiner(delimiter); for (CharSequence cs: elements) &#123; joiner.add(cs); &#125; return joiner.toString(); &#125; ### toLowerCase()方法 该方法是将传入的字符串转化为一个小写的字符串。这里有一个scan，这个scan是一个标签，用于跳出循环。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485public String toLowerCase(Locale locale) &#123; if (locale == null) &#123; throw new NullPointerException(); &#125; int firstUpper; final int len = value.length; /* Now check if there are any characters that need to be changed. */ scan: &#123; for (firstUpper = 0 ; firstUpper &lt; len; ) &#123; char c = value[firstUpper]; if ((c &gt;= Character.MIN_HIGH_SURROGATE) &amp;&amp; (c &lt;= Character.MAX_HIGH_SURROGATE)) &#123; int supplChar = codePointAt(firstUpper); if (supplChar != Character.toLowerCase(supplChar)) &#123; break scan; &#125; firstUpper += Character.charCount(supplChar); &#125; else &#123; if (c != Character.toLowerCase(c)) &#123; break scan; &#125; firstUpper++; &#125; &#125; return this; &#125; char[] result = new char[len]; int resultOffset = 0; /* result may grow, so i+resultOffset * is the write location in result */ /* Just copy the first few lowerCase characters. */ System.arraycopy(value, 0, result, 0, firstUpper); String lang = locale.getLanguage(); boolean localeDependent = (lang == "tr" || lang == "az" || lang == "lt"); char[] lowerCharArray; int lowerChar; int srcChar; int srcCount; for (int i = firstUpper; i &lt; len; i += srcCount) &#123; srcChar = (int)value[i]; if ((char)srcChar &gt;= Character.MIN_HIGH_SURROGATE &amp;&amp; (char)srcChar &lt;= Character.MAX_HIGH_SURROGATE) &#123; srcChar = codePointAt(i); srcCount = Character.charCount(srcChar); &#125; else &#123; srcCount = 1; &#125; if (localeDependent || srcChar == '\u03A3' || // GREEK CAPITAL LETTER SIGMA srcChar == '\u0130') &#123; // LATIN CAPITAL LETTER I WITH DOT ABOVE lowerChar = ConditionalSpecialCasing.toLowerCaseEx(this, i, locale); &#125; else &#123; lowerChar = Character.toLowerCase(srcChar); &#125; if ((lowerChar == Character.ERROR) || (lowerChar &gt;= Character.MIN_SUPPLEMENTARY_CODE_POINT)) &#123; if (lowerChar == Character.ERROR) &#123; lowerCharArray = ConditionalSpecialCasing.toLowerCaseCharArray(this, i, locale); &#125; else if (srcCount == 2) &#123; resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount; continue; &#125; else &#123; lowerCharArray = Character.toChars(lowerChar); &#125; /* Grow result if needed */ int mapLen = lowerCharArray.length; if (mapLen &gt; srcCount) &#123; char[] result2 = new char[result.length + mapLen - srcCount]; System.arraycopy(result, 0, result2, 0, i + resultOffset); result = result2; &#125; for (int x = 0; x &lt; mapLen; ++x) &#123; result[i + resultOffset + x] = lowerCharArray[x]; &#125; resultOffset += (mapLen - srcCount); &#125; else &#123; result[i + resultOffset] = (char)lowerChar; &#125; &#125; return new String(result, 0, len + resultOffset);&#125; trim()方法trim方法是去除前或后无效空格。通过两个循环，一个从前开始，一个从后开始来寻找空格。 12345678910111213public String trim() &#123; int len = value.length; int st = 0; char[] val = value; /* avoid getfield opcode */ while ((st &lt; len) &amp;&amp; (val[st] &lt;= ' ')) &#123; st++; &#125; while ((st &lt; len) &amp;&amp; (val[len - 1] &lt;= ' ')) &#123; len--; &#125; return ((st &gt; 0) || (len &lt; value.length)) ? substring(st, len) : this; &#125; toCharArray()方法该方法是用于将字符串复制为一个新的字符数组。 123456public char[] toCharArray() &#123; // Cannot use Arrays.copyOf because of class initialization order issues char result[] = new char[value.length]; System.arraycopy(value, 0, result, 0, value.length); return result; &#125; intern方法native关键字是一个用于修饰原生态方法。作用是实现其他接口的语言如(c/c++)。 1public native String intern(); 总结]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GitHub for Windows使用教程(四)]]></title>
      <url>%2F2016%2F08%2F28%2FGitHub-for-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
      <content type="text"><![CDATA[Github for windows使用教程(四)前言在上述的几个教程里讲解了一些Github的基础使用，现在开始讲解一些使用技巧。 查找内容在github页面上是没有搜索的按钮，如何搜索呢。在网页上按 T就会出现。这样我们就能很方便的查找到我们需要的代码了。 评论小表情常常在版本描述或者pull request时我们需要对伙伴的代码进行一下评论与说明，光是文字有点很死板，其实github给我有emoji，如何使用呢？其实很简单，只需要冒号就可以 ：，这样我们就可以看到emoji表情，当然默认会显示五个常用的，你也可以继续敲下emoji的名字，出现更多（这里有所有的表情）。 忽略不想上传的文件有些在github中的文件我们是不想上传的，我们如何过滤掉它们呢？在github中对不想上传的文件点击右键。就会出现下面选项。 Ignore file忽略这个文件Ignore all.txt files 忽略所有的以.txt结尾的文件这样就可以过滤掉你不想上传的文件 搜索项目如何高效的搜索一个你想要的库呢？我们常常评判一个项目的标准有star数目，fork数目和跟新时间。通过搜索命令 stars stars:&gt;1000 表示star数目大于1000。 fork fork:&gt;1000 表示fork数目大于1000。 语言搜索 java，html等等 综合一下就是，比如你要查找一个stars大于1000的，fork大于200的java代码。 stars:&gt;1000 fork:&gt;200 java 就是这样。 查看项目中的语言类型一个项目中，可能使用了多种语言，我们如何一下子就能看到一个项目使用了什么语言？其实很简单，Github已经为我们统计好了。 也行你注意过，但是没有发现它有什么用。点击下面的彩条 github已经为我们统计好这个项目所有的语言及其比例。 一些常见的代码表示颜色 总结码字不易，终于写完了，如果觉得对你有帮助，我的目的就达到了。谢谢如有错误，还望指正。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git基本操作]]></title>
      <url>%2F2016%2F08%2F13%2FGit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
      <content type="text"><![CDATA[下载安装Git客户端 git下载 安装教程装完成后，还需要最后一步设置，在命令行输入： $ git config –global user.name “Your Name” $ git config –global user.email “email@example.com” 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。 创建本地仓库 $ git init 添加 add把文件添加到仓库： $ git add readme.txt 执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。 把文件提交到仓库： $ git commit -m “add readme” git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。 同步到Github上传到github例如我们给一个叫Test的仓库同步 $ git remote add origin git@github.com:youngxhui/Test.git 现在可以push到你的仓库了 $ git push -u origin master 第一次推送时，我们要添加-u 之后我们可以这条命令 $ git push origin master 下载到github从github上下载到本地 $ git clone git@github.com:youngxhui/nuc_JavaLab.git 分支的操作分支的创建创建分支 $ git checkout -b dev -b 参数表示创建并切换 查看分支用git branch命令查看当前分支： $ git branch * dev master git branch命令会列出所有分支，当前分支前面会标一个*号。 我们就可以在dev分支上正常提交 $ git add readme.txt $ git commit -m “branch test” 切换分支切换回master分支： $ git checkout master 合并分支把dev分支合并到master $ git merge dev 删除分支 $ git branch -d dev]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>%2F2016%2F08%2F09%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[正则表达式什么是正则表达式 正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。 正则表达式可以对字符串进行查找，提取，分割，替换等操作。 创建正则表达式正则表达式就是一个用于匹配字符串的模板，可以匹配一串字符串，所以创造正则表达式就是创建一个特殊字符串。正则表达式所支持的合法字符 字符 解释 x 字符x（x可代表任何合法的字符） \0mnn 八进制数用\0mnn \xhh 十六进制值0xhh所表示的字符 \xhhh 十六进制值0xhhhh所表示的Unicode字符 \t 制表符（’\u0009’） \n 新行（换行）符(‘\u000A’) \r 回车符（’\u000D’） \f 换页符（’\u000C’） \a 报警（bell）符（’\u0007’） \e Escape符（’\u001B’） \cx x对应的控制符。例如，\cM 匹配ctrl-M。x值必须为A-Z或者a~z之一 正则表达式中的特殊字符 特殊字符 说明 $ 匹配一行的结尾。要匹配\$字符本身 ^ 匹配一行的开头。要匹配^字符本身 () 标记子表达式的开始和结束位置。要用匹配这些字符。 [] 用于确定中括号表达式的开始和结束位置。 {} 用于标记前面子表达式的出现频率 * 指定前面子表达式出现零次或多次 + 指定前面子表达式可以出现一次或多次 ? 指定前面子表达式可以出现零次或一次 . 匹配除换行符\n之外的任何单字符 \ 用于转义下一个字符，或指定八进制，十六进制字符。 \ 指定两项之间任选一项]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[底部导航按钮]]></title>
      <url>%2F2016%2F08%2F05%2F%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%8C%89%E9%92%AE%2F</url>
      <content type="text"><![CDATA[关于底部按钮的实现关于底部导航按钮网上实现底部按钮的方法有很多，在这里RadioGroup+ViewPager+fragmnt实现的。 底部导航支持底部点击和滑动。 上图 布局代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" tools:context=".MainActivity"&gt; &lt;RadioGroup android:id="@+id/rg_tab_bar" android:layout_width="match_parent" android:layout_height="56dp" android:layout_alignParentBottom="true" android:background="@color/bg_white" android:elevation="5dp" android:orientation="horizontal"&gt; &lt;RadioButton android:id="@+id/rb_channel" style="@style/tab_menu_item" android:drawableTop="@drawable/tab_menu_doc" android:text="@string/tab_menu_doc" /&gt; &lt;RadioButton android:id="@+id/rb_message" style="@style/tab_menu_item" android:drawableTop="@drawable/tab_menu_camera" android:text="@string/tab_menu_camera" /&gt; &lt;RadioButton android:id="@+id/rb_better" style="@style/tab_menu_item" android:drawableTop="@drawable/tab_menu_user" android:text="@string/tab_menu_user" /&gt; &lt;/RadioGroup&gt; &lt;View android:id="@+id/div_tab_bar" android:layout_width="match_parent" android:layout_height="2px" android:layout_above="@id/rg_tab_bar" android:background="@color/div_white" /&gt; &lt;android.support.v4.view.ViewPager android:id="@+id/vpager" android:layout_width="match_parent" android:layout_height="match_parent" android:layout_above="@id/div_tab_bar" /&gt;&lt;/RelativeLayout&gt; activity代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182public class MainActivity extends AppCompatActivity implements RadioGroup.OnCheckedChangeListener, ViewPager.OnPageChangeListener &#123; //UI Objects private RadioGroup rg_tab_bar; private RadioButton rb_channel; private RadioButton rb_message; private RadioButton rb_better; private ViewPager vpager; private MyFragmentPagerAdapter mAdapter; //几个代表页面的常量 public static final int PAGE_ONE = 0; public static final int PAGE_TWO = 1; public static final int PAGE_THREE = 2; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mAdapter = new MyFragmentPagerAdapter(getSupportFragmentManager()); bindViews(); rb_channel.setChecked(true); &#125; private void bindViews() &#123; rg_tab_bar = (RadioGroup) findViewById(R.id.rg_tab_bar); rb_channel = (RadioButton) findViewById(R.id.rb_channel); rb_message = (RadioButton) findViewById(R.id.rb_message); rb_better = (RadioButton) findViewById(R.id.rb_better); rg_tab_bar.setOnCheckedChangeListener(this); vpager = (ViewPager) findViewById(R.id.vpager); vpager.setAdapter(mAdapter); vpager.setCurrentItem(0); vpager.addOnPageChangeListener(this); &#125; @Override public void onCheckedChanged(RadioGroup group, int checkedId) &#123; switch (checkedId) &#123; case R.id.rb_channel: vpager.setCurrentItem(PAGE_ONE); break; case R.id.rb_message: vpager.setCurrentItem(PAGE_TWO); break; case R.id.rb_better: vpager.setCurrentItem(PAGE_THREE); break; &#125; &#125; //重写ViewPager页面切换的处理方法 @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123; &#125; @Override public void onPageSelected(int position) &#123; &#125; @Override public void onPageScrollStateChanged(int state) &#123; //state的状态有三个，0表示什么都没做，1正在滑动，2滑动完毕 if (state == 2) &#123; switch (vpager.getCurrentItem()) &#123; case PAGE_ONE: rb_channel.setChecked(true); break; case PAGE_TWO: rb_message.setChecked(true); break; case PAGE_THREE: rb_better.setChecked(true); break; &#125; &#125; &#125;&#125; FragmentPagerAdapter数据适配器 MyFragmentPagerAdapter 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class MyFragmentPagerAdapter extends FragmentPagerAdapter &#123; private final int PAGER_COUNT = 3; private DocFRAG docFRAG = null; private CameraFRAG cameraFRAG = null; private UserFRAG userFRAG = null; public MyFragmentPagerAdapter(FragmentManager fm) &#123; super(fm); docFRAG = new DocFRAG(); cameraFRAG = new CameraFRAG(); userFRAG = new UserFRAG(); &#125; @Override public int getCount() &#123; return PAGER_COUNT; &#125; @Override public Object instantiateItem(ViewGroup vg, int position) &#123; return super.instantiateItem(vg, position); &#125; @Override public void destroyItem(ViewGroup container, int position, Object object) &#123; System.out.println("position Destory" + position); super.destroyItem(container, position, object); &#125; @Override public Fragment getItem(int position) &#123; Fragment fragment = null; switch (position) &#123; case MainActivity.PAGE_ONE: fragment = docFRAG; break; case MainActivity.PAGE_TWO: fragment = cameraFRAG; break; case MainActivity.PAGE_THREE: fragment = userFRAG; break; &#125; return fragment; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[FlaotActionButton详解]]></title>
      <url>%2F2016%2F08%2F05%2FFlaotActionButton%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[今天把Android的学习的一些东西记录一下，方便日后使用。 FlaotActionButton详解FlaotActionButton是android的一个很好用的控件。在看了很多源码后逐步掌握一些知识了。 导入依赖项首先要在build.gradle中导入依赖项 12345678dependencies &#123; compile fileTree(include: ['*.jar'], dir: 'libs') testCompile 'junit:junit:4.12' compile 'com.android.support:appcompat-v7:24.1.1' compile 'com.android.support:design:24.1.1' compile 'com.getbase:floatingactionbutton:1.10.1'&#125; GitHub地址 代码 123456789101112131415161718192021222324252627282930313233&lt;com.getbase.floatingactionbutton.FloatingActionsMenu android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_alignParentBottom="true" android:layout_alignParentEnd="true" android:layout_marginBottom="31dp" android:layout_marginEnd="32dp" app:fab_addButtonSize="normal" app:fab_labelStyle="@style/menu_labels_style"&gt; &lt;com.getbase.floatingactionbutton.FloatingActionButton android:id="@+id/fab_carm" android:layout_width="wrap_content" android:layout_height="wrap_content" app:backgroundTint="@color/colorPrimary" app:fabSize="mini" app:fab_title="拍照" fab:fab_icon="@drawable/ic_add_a_photo_black_24dp" /&gt; &lt;com.getbase.floatingactionbutton.FloatingActionButton android:id="@+id/fab_etid" android:layout_width="wrap_content" android:layout_height="wrap_content" app:fabSize="mini" app:fab_title="录入" fab:fab_icon="@drawable/ic_border_color_black_24dp" /&gt; &lt;com.getbase.floatingactionbutton.FloatingActionButton android:id="@+id/fab_pic" android:layout_width="wrap_content" android:layout_height="wrap_content" app:fabSize="mini" app:fab_title="识别图片" fab:fab_icon="@drawable/ic_photo_black_24dp" /&gt; &lt;/com.getbase.floatingactionbutton.FloatingActionsMenu&gt; 要适配menu_labels_style才可以使用FloatingActionsMenu 1234&lt;style name="menu_labels_style"&gt; &lt;item name="android:background"&gt;@drawable/fab_label_background&lt;/item&gt; &lt;item name="android:textColor"&gt;@color/white&lt;/item&gt; &lt;/style&gt; 适配fab_label_background 1234567891011&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;solid android:color="@color/black_semi_transparent"/&gt; &lt;padding android:left="16dp" android:top="4dp" android:right="16dp" android:bottom="4dp"/&gt; &lt;corners android:radius="2dp"/&gt;&lt;/shape&gt; 解析FloatActionButton代码FloatActionButton中通过app:fabSize来确定大小normal，mini，auto。通过app:fab_title设置文字。fab:fab_icon设置图标。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何提高Android虚拟机的运行速度]]></title>
      <url>%2F2016%2F07%2F17%2F%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98Android%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6%2F</url>
      <content type="text"><![CDATA[关于Android virtual DeviceAndroid virtual Device（AVD）是Google推出的可以在x86,x64,AMD设备上运行的虚拟机。我们可以在Android Studio中创建并且使用。 在我们一般创建时，都再用默认的设置，这样会导致AVD使用时很卡，卡到爆…… 下面我们就来一起设置，使它流畅的运行起来。 下载安装Intel HAXM 打开SDK Manger，在SDK Tools目录下，选择并下载Intel HAXM。 下载好并不代表安装，我们需要打卡SDK目录进行安装。 …\extras\intel\Hardware_Accelerated_Execution_Manager\intelhaxm-android.exe 安装只需要next就好。也可以适当的分配一点大的内存。 重启你的电脑。 添加AVD我们打开AVD Manager。行创建一个AVD 行创建一个AVD 选择一个你喜欢的机型，我在这里选择6P。 按照你的电脑选择API和ABI Next-&gt;Finish 此时我们就添加好一个虚拟机了。 运行并修改参数我们点击运行 此时我们需要观察Android Studio的输出日志。其中有一条值得我们注意 这一条警告提示我们VM heap低于最低值384M，要求我们去设置为384M。 此时我们打开编辑，修改VM heap为他所要求的值，我们的AVD就可以流畅的运行了。 基于Android Studio 2.1，Intel X64 RAM 8G]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Activity启动的两种方式]]></title>
      <url>%2F2016%2F07%2F04%2FActivity%E5%90%AF%E5%8A%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[今天学习Android的Intent的使用 显示使用显示Intent就是指定Activity。 123456789101112131415161718192021222324package com.example.myapplication;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.btnStartMyAty).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; startActivity(new Intent(MainActivity.this, MyAty.class)); &#125; &#125;); &#125;&#125; 通过Intent直接指定一个Activity 隐式Intent创建一个Intent，但是并不指定启动的Activiy，有很多启动方式。 配置AndroidManiFest.xml中的activity AndroidManiFest.xml 1234567891011121314151617181920212223242526&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.myapplication"&gt; &lt;application android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:label="@string/app_name" android:supportsRtl="true" android:theme="@style/AppTheme"&gt; &lt;activity android:name=".MainActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=".MyAty"&gt; &lt;intent-filter&gt; &lt;category android:name="android.intent.category.DEFAULT"/&gt; &lt;action android:name="asdasd"/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; 在AndroidManiFest.xml中配置文件，添加intent-filter标签，并添加一个字符串。 MainActivity.java 123456789101112131415161718192021222324package com.example.myapplication;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.btnStartMyAty).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; //直接通过字符串启动 startActivity(new Intent("asdasd")); &#125; &#125;); &#125;&#125; 注意这里的字符串虽然可以说是任意格式，但是有一个约定俗成的规定包名.intent.action.Action名 所以上述的asdasd我们应该命名为com.example.myapplication.intent.activity.MyAty为了方便，我们不出错。我们会在代码的前面的添加一个静态常量。 MyAty.java 1234567891011121314151617181920package com.example.myapplication;import android.app.Activity;import android.os.PersistableBundle;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;public class MyAty extends Activity &#123; public static final String ACTION = "com.example.myapplication.intent.activity.MyAty"; @Override public void onCreate(Bundle savedInstanceState, PersistableBundle persistentState) &#123; super.onCreate(savedInstanceState, persistentState); &#125; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_my_aty); &#125;&#125; MainActivity.java 1234567891011121314151617181920212223package com.example.myapplication;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.btnStartMyAty).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; startActivity(new Intent(MyAty.ACTION)); &#125; &#125;); &#125;&#125; 这样就很方便的使用，让我们不出错。 优势：可以启动其他应用的页面，如在A应用中启动B应用中的某个Actio。Demo 新建一个Module。 MainActivity.java 12345678910111213141516171819202122package com.example.app1;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.btnStartMyaty).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; // 通过字符串直接启动另一个app的页面。 startActivity(new Intent("com.example.myapplication.intent.activity.MyAty")); &#125; &#125;); &#125;&#125; Intent过滤器多个Activity拥有同一个Intent Action新建Activity命名为MyAct1之后的代码一样 AndroidManiFest.xml 1234567891011121314151617181920212223242526272829303132333435&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.myapplication"&gt; &lt;application android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:label="@string/app_name" android:supportsRtl="true" android:theme="@style/AppTheme"&gt; &lt;activity android:name=".MainActivity"&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=".MyAty" android:label="MyAty"&gt; &lt;intent-filter&gt; &lt;category android:name="android.intent.category.DEFAULT" /&gt; &lt;action android:name="com.example.myapplication.intent.activity.MyAty" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=".MyAty1" android:label="@string/title_activity_my_aty1"&gt; &lt;intent-filter&gt; &lt;category android:name="android.intent.category.DEFAULT"&gt;&lt;/category&gt; &lt;action android:name="com.example.myapplication.intent.activity.MyAty"&gt;&lt;/action&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; 此时我们在运行启动。 会弹出提示，让我们选择启动哪一个Activity。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java集合遍历]]></title>
      <url>%2F2016%2F05%2F23%2FJava%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%2F</url>
      <content type="text"><![CDATA[集合的遍历使用IteratorIterator主要用于遍历集合中的Collection元素，因此Iterator创建的对象是一个迭代器。 Iterator提供的四个方法 boolean hasNext(): 如果迭代器的集合还没有被遍历完，返回ture。 Object next():返回集合里的下一个元素。 void remove():删除集合里上一次next方法返回的元素。 void forEachRemaining(Consumer action)：这个是java 8为Iterator新增的默认方法，该方法可使用Lambda表达式遍历所有的集合元素。 next方法1234567891011121314151617181920212223242526import java.util.ArrayList;import java.util.Iterator;import java.util.List;/** * Created by 晓辉 on 2016/5/23. * 使用jdk8中的iterator遍历集合； */public class IteraorTest &#123; public static void main(String[] args) &#123; List books=new ArrayList&lt;&gt;(); books.add("fengk"); books.add("niaho"); Iterator it=books.iterator(); while (it.hasNext())&#123; it.next(); if(books.equals("fengk"))&#123; it.remove(); &#125; System.out.println(it.next()); &#125; &#125;&#125;&gt; 输出结果&gt;niaho Iterator只用于遍历集合，本身本身并不具有承装对象的能力。如果需要就要创建Iterator对象，则必须有一个被迭代的集合。Iterator必须依附于Collection对象，若有一个Iterator对象，则必然有一个与之关联的Collection对象。 使用Lambda表达式遍历Iterator123456789101112131415161718import java.util.Collection;import java.util.HashSet;import java.util.Iterator;/** * Created by 晓辉 on 2016/5/23. */public class IteratorEach &#123; public static void main(String[] args) &#123; // 创建一个集合 Collection books=new HashSet&lt;&gt;(); books.add("java"); books.add("c#"); Iterator it=books.iterator(); // 使用Lambda表达式遍历所有的集合 it.forEachRemaining(obj-&gt;System.out.println(obj)); &#125;&#125; 输出结果c#java 注意：这里的输出是倒序。 ##使用foreach遍历集合元素123456789101112131415161718192021import java.util.Collection;import java.util.HashSet;import java.util.Iterator;public class ForeachTest &#123; public static void main(String[] args) &#123; // 创建一个集合 Collection books=new HashSet&lt;&gt;(); books.add("java"); books.add("c#"); for(Object obj:books)&#123;// 此处的books变量也不是集合的本身元素 String book=(String)obj; System.out.println(book); if (book.equals("java"))&#123; books.remove(book); &#125; &#125; System.out.println(books); &#125;&#125; for循环中的迭代变量也不是集合元素本身，系统只是以此把集合元素的值赋值给迭代变量，因此for循环中修改的迭代变量的值是也是没有任何意义。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GitHub for windows使用教程（三）]]></title>
      <url>%2F2016%2F05%2F15%2FGitHub-for-windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
      <content type="text"><![CDATA[团队协作流程认识FlowGitHub Flow是一个轻量级的，基于分支的工作流程，支持团队和部署在那里的定期做项目。 为团队成员写入权限在我们的队友添加一个写的权限，这样我们的队友才能很好的修改代码。我们打开网页上的GitHub,点击settings, 之后我们找到collaborators，这里会让我们验证密码，之后就有添加合作者的选项。这样我们就能添加我们的小伙伴了！ 这样我们就添加了新的小伙伴，新的小伙伴有着同样的权限去修改和管理代码。此时我们就会看到我的小伙伴wevan的github主页上就会出现关于我创建的First的各种通知。 创建分支在我们创建一个叫add new function的分支。 创建一个分支 Create a branch 当你工作的一个项目，你会在任何给定的时间有一堆不同的功能或正在进行的想法 - 其中一些是蓄势待发，而另一些则不是。分支的存在是为了帮助你管理这个工作流程。 When you’re working on a project, you’re going to have a bunch of different features or ideas in progress at any given time – some of which are ready to go, and others which are not. Branching exists to help you manage this workflow. 当您在项目中创建一个分支，你创造一个环境，在那里你可以尝试新的想法。你让一个分支的更改不会影响主分支，让你可以自由进行实验，并提交更改，在你的分支将不会被合并，直到它准备好知识安全的人所正在与合作进行审查。 When you create a branch in your project, you’re creating an environment where you can try out new ideas. Changes you make on a branch don’t affect the master branch, so you’re free to experiment and commit changes, safe in the knowledge that your branch won’t be merged until it’s ready to be reviewed by someone you’re collaborating with. ProTip 分支在Git中是一个核心概念，整个GitHub的流量是基于它。这里只有一个规则：在任何主分支总是部署。 Branching is a core concept in Git, and the entire GitHub Flow is based upon it. There’s only one rule: anything in the master branch is always deployable. 正因为如此，这是非常重要的一个功能或修复工作时，你的新分支关老爷的创建。您的分支名应该是描述（例如，重构的身份验证，用户的内容缓存键，使视网膜-化身），以便其他人可以看到正在处理。 Because of this, it’s extremely important that your new branch is created off of master when working on a feature or a fix. Your branch name should be descriptive (e.g., refactor-authentication, user-content-cache-key, make-retina-avatars), so that others can see what is being worked on.来自GitHub Flow 添加提交 我们首先把分支切换到新的分支上add new function 修改新的版本 填写好新的Summary和Description，提交新的版本并同步。这样小伙伴登陆到GitHub上就看到了就可以清楚的看到一切的修改。 添加提交 Add commits 一旦你的分支已经建立，现在是时候开始进行更改。无论何时添加，编辑或删除一个文件，你作出承诺，并将其添加到您的分支。提交加入这一过程保持你的进步轨迹，你在一个特性分支工作。 Once your branch has been created, it’s time to start making changes. Whenever you add, edit, or delete a file, you’re making a commit, and adding them to your branch. This process of adding commits keeps track of your progress as you work on a feature branch. 还承诺创建工作的透明历史，其他人可以按照理解你做了什么，以及为什么。每次提交都有一个关联的提交信息，这是解释为什么一个特定的变化作出了说明。此外，每次提交被认为是变革的一个独立单元。这使您可以回滚的变化，如果发现错误，或者如果你决定在一个不同的方向前进。 Commits also create a transparent history of your work that others can follow to understand what you’ve done and why. Each commit has an associated commit message, which is a description explaining why a particular change was made. Furthermore, each commit is considered a separate unit of change. This lets you roll back changes if a bug is found, or if you decide to head in a different direction. ProTip 提交信息是重要的，特别是因为Git跟踪更改，然后将它们显示为承诺一旦他们推到服务器。通过字迹清晰提交信息，你可以更容易为其他人跟着，并提供反馈。 Commit messages are important, especially since Git tracks your changes and then displays them as commits once they’re pushed to the server. By writing clear commit messages, you can make it easier for other people to follow along and provide feedback.来自GitHub Flow 打开一个pull请求这个是整个流程中比较关键的一步，发布Pull Request。 点击客户端或者网页上的Pull Request发布。我们这里点击Pull Request 我们填写好必要的说明性文字点击Send Pull Request他既然让我们到GitHub上看，我们就听他的，点击，进入。我们发现小伙伴已经在下面留言了！ 讨论和审核你的代码 你的小伙伴开始对你的代码讨论，修改，迭代。 讨论和审查你的代码 Discuss and review your code 一旦拉入请求已被打开，人或团队审查您的变化可能有疑问或意见。也许编码风格不匹配项目的指导方针，改变缺少单元测试，或者也许一切看起来不错，道具都是为了。引入请求旨在鼓励并捕获这种类型的对话。 Once a Pull Request has been opened, the person or team reviewing your changes may have questions or comments. Perhaps the coding style doesn’t match project guidelines, the change is missing unit tests, or maybe everything looks great and props are in order. Pull Requests are designed to encourage and capture this type of conversation. 您还可以继续推送到你的分支在你提交的讨论和反馈光。如果有人评论说，你忘了做某件事，或者如果在代码中的错误，你可以在你的分支修复它，推高的变化。GitHub上会显示新的提交和其他任何意见，你可能会收到统一拉请求视图。 You can also continue to push to your branch in light of discussion and feedback about your commits. If someone comments that you forgot to do something or if there is a bug in the code, you can fix it in your branch and push up the change. GitHub will show your new commits and any additional feedback you may receive in the unified Pull Request view. ProTip 拉请求的意见都写在降价，所以你可以插入图片和表情符，使用预先格式化的文本块，等轻质格式。 Pull Request comments are written in Markdown, so you can embed images and emoji, use pre-formatted text blocks, and other lightweight formatting. 部署 部署 Deploy 一旦你拉的请求进行了审查和部门通过你的测试，您可以部署您的更改，以验证他们的生产。如果你的分支造成的问题，您可以通过部署现有的主投产回滚 Once your pull request has been reviewed and the branch passes your tests, you can deploy your changes to verify them in production. If your branch causes issues, you can roll it back by deploying the existing master into production. 合并 合并分支我们之前已经说过，这里就不再赘述。 合并 Merge 现在，您的更改在生产中得到了验证，现在是时候你的代码合并到主分支。 Now that your changes have been verified in production, it is time to merge your code into the master branch. 合并后，引入请求保护的历史变迁到您的代码记录。因为他们是搜索的，他们不让任何人回去的时间理解为什么以及如何决定了。 Once merged, Pull Requests preserve a record of the historical changes to your code. Because they’re searchable, they let anyone go back in time to understand why and how a decision was made. ProTip 通过将某些关键字到您的拉请求的文本，你可以用代码相关联的问题。当你拉入请求合并，相关问题也将被关闭。例如，输入短语关闭＃32将关闭在仓库中发行数量32。欲了解更多信息，请查看我们的帮助文章。 By incorporating certain keywords into the text of your Pull Request, you can associate issues with code. When your Pull Request is merged, the related issues are also closed. For example, entering the phrase Closes #32 would close issue number 32 in the repository. For more information, check out our help article. 注意：英文翻译为机器翻译，可能有翻译错误的地方，建议大家尽可能看英文 总结基本的GitHub教程就算写完了，已有如果在有就是一些GitHub上的一些使用小技巧了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GitHub for Windows使用教程(二)]]></title>
      <url>%2F2016%2F05%2F13%2FGitHub-for-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(%E4%BA%8C)%2F</url>
      <content type="text"><![CDATA[分支的使用创建分支我们创建第一个分支取名为“new masterh”,点击Create new branch创建第一个分支。 我们发现此时的分支已经切换到了我们刚刚创建的分支new masterch 我们来修改new masterch分支上的内容。我们仍旧打开FirstDemo.txt进行编辑。输入以下内容 创建的第一个分支。 打开github进行，填写Summary和Description 之后我们点击Commit to new-master在History目录下，我们可以看到会有两条主线，分别是master和new-master并且在new-master的分支下又一个蓝色的实线空心圈和一个虚线空心圈。实线圈表示当前的节点，空心圈表示下一次修改时的节点。红线标示的部分就是当前的分支 切换分支点击红色划线部分就会出现分支的列表我们点击master就会切换到master分支。 上传/同步分支这个操作和同步仓库是一个操作，点击Publish/Sync上传或同步分支。 删除分支首先要把分支切换到你要删除的分支下，如我们要删除new master，将分支切换到new master点击右上角齿轮就会出现Delete new master 点击Delete new master就会弹出一个对话框，询问删除的内容。 第一个yes ，Delete both是将本地与网页全部删除；第二个Delete local only仅仅是删除本地。第三个是取消。 合并两个分支将一个分支与master分支进行合并。我们首先把分支切换到master下，点击Update from new-branch进行分支的合并。 此时我们查看history目录下就会]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GitHub for Windows使用教程（一）]]></title>
      <url>%2F2016%2F05%2F03%2FGitHub-for-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(%E4%B8%80)%2F</url>
      <content type="text"><![CDATA[前言鉴于网上目前的教材都太落后，github for windows已经更新了多个版本，好多界面都发生了变化，所以来写这个教程。目的是为了帮助和我一样初学github，但是苦于找不到教程的同学，为了写最详细的教程。配备了大量的图文介绍。该教程是基于GitHub for windows (3.0.17.0) 什么是Github说到什么事github，我们先看wikipedia的描述“GitHub是一个利用Git进行版本控制、专门用于存放软件代码与内容的共享虚拟主机服务。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。” 准备工作 下载github for windows，安装这里不赘述。 注册github账号 登陆到github for windows。 准备工作都完了，我们开始正式学习。^_^ 创建第一个代码库认识界面 github for windows的界面非常清爽，的确符合geek的性质，个人表示非常喜欢。我们来建立第一个仓库，点击左上角的+号，初次建立他会有一圈圈的涟漪，非常漂亮哦。打开之后有三个选项，Add，Create，Clone。我们分别来介绍一下这三个功能。 Add功能如果本地有工程，就可以使用Add添加 Clone功能这个功能其实最好理解了，克隆这名字通俗易懂好理解。如何使用Clone功能呢？ 就是将在浏览器上已经创建好的项目导入到本地，换句话说就是下载到本地。 Create功能创建一个代码库，Name填写你的仓库名字。Local path写你将要保存在本地路径。我们主要从这个功能开始github之旅。 我们在这里填写First，来创建第一个我们自己的repository。 开始使用第一个代码库修改第一个代码库中内容我们来找到刚刚创建的代码库在本地的位置。就是刚刚在local path的地址路径，当然如果你忘了，请右键点击First。选择Open in Explorer。这样我们就可以转到刚刚的路径下。我们新建一个文本文档。在里面编辑。如下此时的github就会变成这个样子(Changs)：你会发现此时github会出现刚刚编辑的内容。 这个是测试文本 你好 并且前面会有蓝色标识，那么这个蓝色标识是什么用呢？其实这个蓝色标识是提示你会上改变的文本。比如我第一次只想改变这个是测试文本并不想把你好上传。这时我们点击一下你好的前面的蓝色标识。 你会发现你好前面的蓝色标识没有了。我们填写好Summer和DescriptionSummer就是这次改动的总结，我们也可以理解为标题（必填），而Description可以理解为详细概况（选填） 我们这里只选择第一个修改对象，也就是这个是测试文本就行修改。summer我们填写为第一次修改，Description我们填写为增加了这个是测试文本的内容，之后点击Commit to master。 切换到History目录下 我们会发现他改变了。这次我们把你好进行添加。 在History目录下发生了这样的改变。会在History目录下形成一天时间线，来指出每一次的修改标题和内容，同时会把修改的内容用绿色标识标出。我们打开本地的文本，删除刚刚添加的第一行这个是测试文本。 此时你就会发现github发生了变化。很多人说这里会出现乱码,这个是编码问题,如果不修改编码,只是在客户端上显示乱码,但是上传后不会出现乱码,为了保险起见,建议大家还是把文本编码修改为 utf-8 . 此时的红色标识标识删除。我们写好Summer和Description并点击Commit to master。这样我们就删除了第一行。同时在History目录下又多了一条时间轴。 这样我们就完成了删除。 上传与同步上传此时，当我们打开github网页，就会发现此时你的修改的内容并没有出现在这里。这是因为你没有进行同步，仅仅是在本地就行了修改。此时我们仅仅需要点击右上角的publish 此时你就会本地内容已经上传到网页上。 同步当你的代码库上传后就会发现，原来的publish以及变为了Sync。 点击Sync同步代码库！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[大学？大学？大学？]]></title>
      <url>%2F2016%2F04%2F27%2F%E5%A4%A7%E5%AD%A6%EF%BC%9F%E5%A4%A7%E5%AD%A6%EF%BC%9F%E5%A4%A7%E5%AD%A6%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[大学？大学？ 大学？仅仅写给自己 第一篇生活在这个大学里那种迷茫有时候只有自己知道，有时候的动力其实是为0的，只能按照自己的想法去走，可是一个人搞了两个晚上的东西，还是没有成功，有些事情只能自己去做，没人会对自己的事情感兴趣，更不会去帮你。当一个问题查阅了百度，google后仍旧没有解决，那种失落或许没人能懂！连续两个晚上都在弄，看来百度，查了google，连youtube上的视频看了，然而问题依旧，只能靠自己慢慢去搞。然而MinwgM，Cmake对于一个刚刚接触软件工程的人来说，没有任何人的帮助，自己慢慢的去看，略知皮毛，然而Clion的报错让我已经筋疲力尽。 昨晚开始配置Clion，从MinWG开始，然后是Cmake，都是一个个的新名词，一次又一次的失败W，刚刚开始连Cmake都无法使用，后来helloworld都无法运行。这次是MinGM的报错，百度了，google了，看了youtube，这个问题不是我一个人遇到，然而我却看不到解决的方法，满是英文的屏幕看的非常吃力，当没有答案时，只能自己去创造答案。自己一个人去看报错的文档，然而我又一次高估了自己的能力……晦涩难懂的英文和路径，一头雾水。同时IDEA也让我感到了无力，深深的无力。为什么，他们家的IDE要让开发者把时间都放在大量的配置上去。最后还是投靠了eclipse。但让clion我会继续研究下去的。 或许有时候是太高估自己了，要走和别人不一样的道路，就用个编译器都要标新立异。从github+hexo的博客搭建到今天的Clion和Idea，真的很浪费时间，收获感觉微乎其微，达不到什么实质性的东西，包括现在学习github，好像是一个错误的想法，而且重要的是把别人往沟里带，让别人按自己的想法走，多可笑啊。是该好好整理一下自己的想法了，有时候该问问那些过来的人，多听听他们的建议，不要给自己多走弯路。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LinkList特有的方法]]></title>
      <url>%2F2016%2F04%2F23%2FLinkList%E7%89%B9%E6%9C%89%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[LinkList特有的方法 addFirst();addLast(); 添加元素，第一个或最后一个。 getList();getFirst(); 获取元素，但是不会删除。如果集合中没有元素，会抛出NoSuchElementException。 removeFirst();removeLast(); 获取元素，但是元素被删除。如果集合中没有元素，就会出现NoSuchElementException。 在jdk1.6中出现了替代的方法： offerFirst(); offerLast(); 添加元素。 peekFirst();peekLast(); 获取元素，但是元素不被删除。如果集合中没有元素，会返回null。 pollFirst();pollLast(); 获取元素，但是元素被删除。如果集合中没有元素，会返回null。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[清除右键无效项]]></title>
      <url>%2F2016%2F04%2F21%2F%E6%B8%85%E9%99%A4%E5%8F%B3%E9%94%AE%E6%97%A0%E6%95%88%E9%A1%B9%2F</url>
      <content type="text"><![CDATA[清除右键无效项 前言有时在安装一些程序时，当程序卸载后会留下一些右键无效项，对于强迫症处女座来说，这是一件万万不能的。 开始 新建一个文本文档，复制下面的代码到文本里 12345678910111213141516@ ECHO OFF@ ECHO.@ ECHO.@ ECHO. 说 明@ ECHO -----------------------------------------------------------------------@ ECHO @ ECHO 可能杀毒软件会提示威胁项，允许运行就好！@ ECHO @ ECHO -----------------------------------------------------------------------@ Echo.PAUSEregsvr32 /u /s igfxpph.dllreg delete HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers /freg add HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\new /ve /d &#123;D969A300-E7FF-11d0-A93B-00A0C90F2719&#125;reg delete HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v HotKeysCmds /freg delete HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v IgfxTray /f 将文本的后缀改为.cmd。 双击运行这个脚本。此时，你就会发现那些没用的右键选项都没有了 ^ ^]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[第一次参加蓝桥杯感受]]></title>
      <url>%2F2016%2F04%2F21%2F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%84%9F%E5%8F%97%2F</url>
      <content type="text"><![CDATA[作为一名大一新生，这是我第一次参加这样的比赛，比赛前也没要指望要得什么奖项，抱着锻炼的态度，还好有所收获。 下面会列出我做的题和做题时的感受 1.煤球数目有一堆煤球，堆成三角棱锥形。具体： 第一层放1个，第二层3个（排列成三角形），第三层6个（排列成三角形），第四层10个（排列成三角形），….如果一共有100层，共有多少个煤球？请填表示煤球总数目的数字。注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。 这个题的第一反应我是用excel做，用excel生成有序的数列，结果建立了excel后出现的是小树，瞬间懵逼…………只好一步一步的写代码，按理说这应该是一个简单的代码，可是我还是写错了，在我记忆里好像写的是5050……额，好心痛…… 2.生日蜡烛某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。现在算起来，他一共吹熄了236根蜡烛。请问，他从多少岁开始过生日party的？请填写他开始过生日party的年龄数。注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。 这个题的第一反应还是excel表，最后我的确是用excel做出来了，也是这次比赛中唯一做对的题目。虽然用excel比较麻烦，但是对于我这种第一时间没有一个很好的明确思路的我来说，这样很快。 3.凑算式这个算式中A~I代表1~9的数字，不同的字母代表不同的数字。比如：6+8/3+952/714 就是一种解法，5+3/1+972/486 是另一种解法。这个算式一共有多少种解法？注意：你提交应该是个整数，不要填写任何多余的内容或说明性文字。 很简单的暴力求解，为什么我没有做对呢…………开始的时候题的要求是0~9，后来改为1~9，可惜，我们考场没有收到任何通知…………我按0~9算的……悲哀的人生 做到这里的时候好像时间就过去了一个半小时了，实在是太慢了，也侧面说面对算法不熟练…… 4.快速排序排序在各种场合经常被用到。快速排序是十分常用的高效率的算法。其思想是：先选一个“标尺”，用它把整个队列过一遍筛子，以保证：其左边的元素都不大于它，其右边的元素都不小于它。这样，排序问题就被分割为两个子区间。再分别对子区间排序就可以了。下面的代码是一种实现，请分析并填写划线部分缺少的代码。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;stdio.h&gt;void swap(int a[], int i, int j)&#123; int t = a[i]; a[i] = a[j]; a[j] = t;&#125;int partition(int a[], int p, int r)&#123; int i = p; int j = r + 1; int x = a[p]; while(1)&#123; while(i&lt;r &amp;&amp; a[++i]&lt;x); while(a[--j]&gt;x); if(i&gt;=j) break; swap(a,i,j); &#125; ______________________; return j;&#125;void quicksort(int a[], int p, int r)&#123; if(p&lt;r)&#123; int q = partition(a,p,r); quicksort(a,p,q-1); quicksort(a,q+1,r); &#125;&#125;int main()&#123; int i; int a[] = &#123;5,13,6,24,2,8,19,27,6,12,1,17&#125;; int N = 12; quicksort(a, 0, N-1); for(i=0; i&lt;N; i++) printf("%d ", a[i]); printf("\n"); return 0;&#125; 其实第一眼看到快速排序就有点后悔，因为之前看过，但是没有记住，当时并没有重视。so，这个题自然是做错了。 ##5.抽签X星球要派出一个5人组成的观察团前往W星。其中：A国最多可以派出4人。B国最多可以派出2人。C国最多可以派出2人。….那么最终派往W星的观察团会有多少种国别的不同组合呢？下面的程序解决了这个问题。数组a[] 中既是每个国家可以派出的最多的名额。程序执行结果为：DEFFFCEFFFCDFFFCDEFFCCFFFCCEFFCCDFFCCDEFBEFFFBDFFFBDEFFBCFFFBCEFFBCDFFBCDEF….(以下省略，总共101行) 没做出来 6.方格填数填入0~9的数字。要求：连续的两个数字不能相邻。（左右、上下、对角都算相邻）一共有多少种可能的填数方案？请填写表示方案数目的整数。注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。 这个题我是把每个格子标了序号，用暴力求解满足条件，好像我算的是400。额，有错了，好吧，我仅仅是做到这里。 虽然我没有做完吧，甚至只做对了一道题，但是我想说，大一才刚刚开始，权当锻炼，而且还有很大的收获，以后要努力喽。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[我一直都在]]></title>
      <url>%2F2016%2F04%2F20%2F%E6%88%91%E4%B8%80%E7%9B%B4%E9%83%BD%E5%9C%A8%2F</url>
      <content type="text"><![CDATA[我没有最烈的酒，我没有阳光和宇宙。讲真儿，我从来没走，所以也不需要留。我在你身后。不要愁，不要愁，风雨与你共舟 谢谢你！加油，共勉！]]></content>
    </entry>

    
  
  
</search>
