<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[黄道十二宫]]></title>
      <url>http://youngxhui.top/2019/02/12/%E9%BB%84%E9%81%93%E5%8D%81%E4%BA%8C%E5%AE%AB/</url>
      <content type="html"><![CDATA[<h1 id="黄道十二宫"><a href="#黄道十二宫" class="headerlink" title="黄道十二宫"></a>黄道十二宫</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这可不是什么希腊神话，更没有什么圣斗士，这只是我给我的项目起的名字而已，当然它也不叫黄道十二宫。</p>
<p>其实刚刚开始并没有这些名字，只是有一天，突然觉得我的后端项目有所寓意，叫做 天秤座 很好，由此一来，就有了其他星座的名称。目前一共是有六个模块，六大模块来组成这个完整的项目。分别有天秤座，水瓶座，处女座，摩羯座和一个还不知道要起什么名字的项目。</p>
<h2 id="天秤座"><a href="#天秤座" class="headerlink" title="天秤座"></a>天秤座</h2><p>先说说天秤座， 这个项目是我维护了最久的一个项目，像对一个新生婴儿一般呵护。这个项目从2017年就开始做，先后经历大约三个版本，现在正在维护第三个版本。第一个版本是课程设计的时候，用 Java 和 Kotlin 混合写的，一个人写完了后台，当时前端第一次用 vue ，大家还是用两周的时间完成了项目，虽然简陋，很多东西都没有，但是已经有了项目雏形，基本解决了核心问题，这个只能叫做一个 DEOM。而后，利用寒假时间，和对象，舍友重构了整个前端和后台，重新对数据库进行了整理，这段时间过得很紧张，各种事情比较多，再加上过年，但是还是开学半个月左右完成了该项目的重写和重构，紧接着就是上线，这样就是 <code>1.0.0</code> 版本。这个版本无论是前端还是后端，相较于 DEMO 得完成度太高了，基本实现了所要的功能，但是有些功能有问题，在线代码评测，完成了一部分功能，加上服务器环境有问题，使得这部分功能被一直耽搁，直到开发下个版本的时候，才完成了该项目，也就是摩羯座，这是后话。</p>
<p>上线并不是一帆风顺的，出现了很多问题，当时服务器是在 腾讯云 上托管，买的基本是最低的配置吧， 单核两G1MB。第一天测试的时候，刚好赶上我下午有课，只能等下了课去看情况。一进实验室，老师就说，150个人同时无法进入，我让50个人先进，还是卡着进不去。此时想，这种小水管，这么多人肯定加载不出网页来。随后在控制台上验证了我的猜想，除了出网流量满核，无论是内存还是CPU使用率都很稳定。随后添加到 5M ， 为什么只添加怎么一点点，因为带宽实在太贵了。本来想着这下子应该可以了，用了一个压测工具，并发到了1000多才会出现连接失败，这下子应该没有问题了。而且事不遂人愿，50名同学同时访问的时候还是卡在哪里一动不动，心里很慌，因为不知道问题出现在哪里，感觉带宽不够。过了大概一到两分钟，才有几名同学的电脑上陆续出现了登录页面，慢慢的，大多数同学都打开了登录页面。心里总算是出了一口气，第一份试题同学们陆续提交，判题系统开始运作，判题系统是很快的，基本每个同学的答案都是秒出。但是也有问题，因为前端上有些地方体验不是很好，加上后端对这个没有进行处理，有些同学提交的答案不符合规范，此时就会出现：后端系统从消息队列里取数据，取到数据不符合规范，导致抛出异常，该数据获取失败，下次还是获取该数据，形成了一个死循环，导致后面提交的试题都积压在消息队列中。第一份试卷试题相对容易，对格式要求不是太高，偶尔有一两个手动处理一下就好。第二张试卷才是噩梦的开始。</p>
<p>第二张试卷的试题对格式有要求，可能是我在说要求的时候同学们没有听得很明白，导致了大批试卷格式错误，格式一错误就发生了上述情况。提交完试卷，老师就继续给他们讲课，而我只能用她讲课的这个空余时间修复这个BUG。一张两张手动还好处理，问题是我不知道有多少张，处理了一份又一份，这样手动处理已经不是办法了。当所有人都提交完试卷后，服务器停机，写了一个处理逻辑，基本就是检查该试卷是否符合规范，不符合直接0分。这样简单粗暴的处理方式，导致很多同学的分数为 0 分。于是乎组织重新进行了一次考试。当然最后对这块的逻辑进行了重新调整，不会如此简单粗暴。在这里写这段话，永远没有当时感觉惊心动魄。</p>
<p>后续进行了很多测试，每次都会发现问题，需要及时的解决问题，只不过后边的问题也来越少。还有一次，对一个小小的逻辑进行了修改，使打分机制更加合理，心想这小小的逻辑应该不会有问题，没有测试代码，直接部署上线。悲剧的事情发生了，该题题型全部是0分。</p>
<p>此后进行了很多次考试，每次考试都会出现加载缓慢的情况，而我的理解也一直认为是带宽不足。直到服务器停机也一直认为是带宽不足。而在九月的某一天，我重新编译前端的时候，瞬间想明白了为什么加载缓慢。前端的 SPA 项目达到了 6MB 多，没有任何优化，每个人访问就要从服务器上去下载 6MB 的代码，怪不得缓慢。因为是第一次使用 SPA 并不知道性能上和体积上的优化，吃了大亏。</p>
<p>天秤座指的是这个后端项目，和前端 vue 并没有多大关系。到了 1.0.0 的项目，完全使用了 kotlin 。到了目前维护的 2.0.0 的项目，依旧是 100% kotlin。kotlin 这个语言是我目前为止最喜欢的语言，没有之一。官方宣称的 100% 的兼容java 也使我尝到了甜头，在不改变原来的生态，框架的基础上，使用了新的语言，不仅仅是简化了繁琐的Java，而且比java更加现代化，了解了一些java没有的语言特性等。</p>
<p>在学习 kotlin 的过程中，个人感觉，语法其实很重要，语言特性很重要，掌握一个语言的语言特性，才能更加的写出地道的代码，就好比如说一口地道的英文一般。而且今天的kotlin，也今非昔比，很多人还认为 kotlin 仅仅是 java 的语法糖。过去一周，尝试了一下 kotlin native，以我猜测，估计过不了多久，官网上就会写出     <code>100% 兼容C/C++</code> ，虽然个人对 C/C++至只剩少，但是通过体验来说，基本可以实现，而且这应该也是 kotlin 团队的愿景，毕竟目前是能寄人篱下。</p>
<h2 id="水瓶座"><a href="#水瓶座" class="headerlink" title="水瓶座"></a>水瓶座</h2><p>前面说到了 SPA 加载缓慢等问题，因为写前端的同学找到了工作，没有时间去维护这套代码。还有一个原因就是当时写的时候时间紧张，功能实现为主，结构，代码混乱，技术债欠的太多，与其去还技术债，不如另起炉灶，重写前端项目。这便是水瓶座的由来。</p>
<p>经过对比了一下前端技术，选择了 Angular 作为开发。相较于其他两个技术来说，Typescript 的完美支持，依赖注入和Rxjs这些后端常常使用的技术等，由此选择了 Angular。当然也有一些缺点，学习曲线陡峭，并不像 vue 一般简单。</p>
<p>水瓶座基本是对上个版本的重写，但是界面设计基本和上个版本一致，将上个版本中用户体验很差的填空题答题部分进行了完善，完成了答题卡功能（上个版本也有这个功能，只是一直有一个bug）。经过了上个版本对单页应用的简单了解，这次非常注意应用体积，虽说 Angular 的打包体积本来就要比其他两个体积要大（Angular 7，日后版本开启 lvy 之后应该体积是差不多的），基本所有的路由都启用了懒加载，而且还注意体积优化，再也不会像之前那样，做一个那么大体积的应用了。水瓶座目前正在经历从零到一的过程，这个过程相对痛苦，但是一旦完成也是最有成就感的阶段。</p>
<p>其实有时候会想 是不是选错了技术栈， react的生态可要比Angular丰富的多，但是有时候也会想Angular真的好厉害，基本把你需要的东西都考虑了，开箱即用。cli 如一把神兵利器，太强了，可能是我见识短，这是我目前讲过最强cli。</p>
]]></content>
      
        
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> SpirngBoot </tag>
            
            <tag> Go </tag>
            
            <tag> 测评机 </tag>
            
            <tag> Angualr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ktor 入门]]></title>
      <url>http://youngxhui.top/2019/02/02/Ktor-%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近要使用 <code>netty</code> 作为消息推送，之前一直想着集成在 <code>Springboot</code> 中使用，但是转念一想，<code>netty</code> 本身就可以作为服务器，为什么不再开一个服务呢？于是就想到了使用 <code>Ktor</code> 构建一个服务。</p>
<p><code>Ktor</code> 是一个使用强大的 <a href="https://www.kotlincn.net/" target="_blank" rel="noopener">Kotlin 语言</a>在互联系统中构建异步服务器与客户端的框架。并且正在努力的向其他平台构建，比如 <code>JavaScript</code>，<code>iOS</code> 和 <code>Android</code> ，且逐步尝试支持原生环境( <code>Native</code> )。</p>
<p>使用 <code>Ktor</code> 可以很快的写出一个 <code>HelloWorld</code></p>
<h1 id="工欲善其事必先利其器"><a href="#工欲善其事必先利其器" class="headerlink" title="工欲善其事必先利其器"></a>工欲善其事必先利其器</h1><p><code>ktor</code> 是以 <code>kotlin</code> 为基础的一个异步框架，那么开发采用 IDEA 成了我们更加友好的选择。</p>
<p>在 IDEA 中 <code>setting</code> <code>Plugins</code> 中的 MarketPlace 搜索 Ktor 。我们安装这个插件将更快的初始化我们的项目。</p>
<p><img src="http://island-hexo.oss-cn-beijing.aliyuncs.com/ktor%20creater.jpg" alt=""></p>
<p>完成了基础工作，就可以开始我们的 <code>Ktor</code> 之旅了。</p>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/ktor1.png" alt=""></p>
<p>暂时不需要选择任何模块。之后便可以下一步 下一步等，直到项目建立。</p>
<p>在 <code>gradle</code> 界面选择 <code>auto-import</code> </p>
<p><img src="http://island-hexo.oss-cn-beijing.aliyuncs.com/ktor%20import.png" alt=""></p>
<p>此时只要耐心等待所有的依赖安装完成</p>
<p><strong>如果多次安装失败可以修改一下gradle的地址,将原有地址注释掉，修改为 阿里镜像。这样安装速度会很快，而且不容易失败</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    mavenLocal()</div><div class="line">    <span class="comment">//jcenter()</span></div><div class="line">    maven &#123; url <span class="string">'https://maven.aliyun.com/nexus/content/groups/public'</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当项目构建完成的时候，在 <code>src</code> 目录下 <code>Application.kt</code> 中已经为我们生成了部分代码。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>: <span class="built_in">Unit</span> = io.ktor.server.netty.EngineMain.main(args)</div><div class="line"></div><div class="line"><span class="meta">@Suppress(<span class="meta-string">"unused"</span>)</span> <span class="comment">// Referenced in application.conf</span></div><div class="line"><span class="meta">@kotlin</span>.jvm.JvmOverloads</div><div class="line"><span class="function"><span class="keyword">fun</span> Application.<span class="title">module</span><span class="params">(testing: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>开始编写我们的代码。</p>
<p>在 <code>Application.module</code> 中，编写我们要使用的路由。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> Application.<span class="title">module</span><span class="params">(testing: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span> &#123;</div><div class="line">    routing &#123;</div><div class="line">        <span class="keyword">get</span>(<span class="string">"/"</span>) &#123;</div><div class="line">            call.respondText(<span class="string">"Hello World"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动项目，访问 <code>http://127.0.0.1:8080</code> 此时就可以看到我们的 <code>Hello World</code>。</p>
<p><code>routing</code> 是 Ktor 中的核心模块，所以我们可以直接去使用。</p>
<h1 id="构建一个-HTML-页面"><a href="#构建一个-HTML-页面" class="headerlink" title="构建一个 HTML 页面"></a>构建一个 HTML 页面</h1><p>ktor 中有 HTML DSL ，所以我们可以直接使用 Kotlin代码构建一个 html 页面。添加 html dsl 依赖</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">"io.ktor:ktor-html-builder:$ktor_version"</span></div></pre></td></tr></table></figure>
<p>之后就可以愉快的写 dsl 了</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">get</span>(<span class="string">"/"</span>) &#123;</div><div class="line">            call.respondHtml &#123;</div><div class="line">                head &#123;</div><div class="line">                    title &#123;</div><div class="line">                        +<span class="string">"Ktor 入门"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                body &#123;</div><div class="line">                    a &#123;</div><div class="line">                        href = <span class="string">"http://127.0.0.1:8080/register"</span></div><div class="line">                        +<span class="string">"注册"</span></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    form &#123;</div><div class="line">                        action = <span class="string">"http://127.0.0.1：8080/user/login"</span></div><div class="line">                        method=FormMethod.post</div><div class="line">                        input &#123;</div><div class="line">                            type = InputType.text</div><div class="line">                            value = <span class="string">""</span></div><div class="line">                            name=<span class="string">"username"</span></div><div class="line">                        &#125;</div><div class="line">                        input &#123;</div><div class="line">                            type = InputType.password</div><div class="line">                            value = <span class="string">""</span></div><div class="line">                            name=<span class="string">"password"</span></div><div class="line">                        &#125;</div><div class="line">                        input &#123;</div><div class="line">                            type = InputType.submit</div><div class="line">                            value = <span class="string">"登录"</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>重新启动一下</p>
<p><img src="http://island-hexo.oss-cn-beijing.aliyuncs.com/htmldsl.png" alt=""></p>
<p>此时 我们的页面就出现了。</p>
<p>目前这个 表单无法访问 action 地址 已向 ktor 提交 <a href="https://github.com/ktorio/ktor/issues/923" target="_blank" rel="noopener">Issues</a></p>
<h1 id="用Locations路由"><a href="#用Locations路由" class="headerlink" title="用Locations路由"></a>用Locations路由</h1><p>但是当我们的路由很多的时候，如果都写在一个文件里，不仅仅文件回变得很大，而且不利于维护和团队协作。所以有了另一个模块 <code>locations</code> 。</p>
<p>首先要安装这个模块，在 <code>gradle</code> 中添加，注 ：功能目前还是实验性功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &quot;io.ktor:ktor-locations:$ktor_version&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>安装完成后启动我们的模块。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> Application.<span class="title">module</span><span class="params">(testing: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span> &#123;</div><div class="line">    install(Locations) <span class="comment">// 启用 Locations</span></div><div class="line">    routing &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先是编写 route 采用 class 的形式</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Location(<span class="meta-string">"/user"</span>)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Location(<span class="meta-string">"/login"</span>)</span></div><div class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLogin</span></span>(<span class="keyword">val</span> username: String, <span class="keyword">val</span> password: String)</div><div class="line"></div><div class="line">    <span class="meta">@Location(<span class="meta-string">"/register"</span>)</span></div><div class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRegister</span></span>(<span class="keyword">val</span> username: String, <span class="keyword">val</span> password: String)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该代码目前必须和 <code>Application</code> 在一起。</p>
<p>我们这样就编写了我们的路由和子路由。</p>
<p>新建一个 <code>UserController.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> Route.<span class="title">user</span><span class="params">()</span></span> &#123;</div><div class="line">    post&lt;User.UserLogin&gt; &#123;</div><div class="line">        call.respondText(<span class="string">"登录成功"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    post&lt;User.UserRegister&gt; &#123; user -&gt;</div><div class="line">        run &#123;</div><div class="line">            call.respondText(<span class="string">"用户 <span class="subst">$&#123;user.username&#125;</span> <span class="subst">$&#123;user.password&#125;</span>"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且在我们的 <code>Application</code> 文件中声明该路由即可。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">routing &#123;</div><div class="line">    <span class="comment">// …………</span></div><div class="line">     user()</div><div class="line">    </div><div class="line">    <span class="comment">//…………</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时访问的时候就可以访问到我们的子路由。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Ktor 中文网 <a href="https://ktor.kotlincn.net/" target="_blank" rel="noopener">https://ktor.kotlincn.net/</a></p>
<h1 id="打个广告"><a href="#打个广告" class="headerlink" title="打个广告"></a>打个广告</h1><p>开发的小程序 生活小程序<img src="http://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular 管道]]></title>
      <url>http://youngxhui.top/2019/01/26/Angular-%E7%AE%A1%E9%81%93/</url>
      <content type="html"><![CDATA[<h1 id="什么是管道"><a href="#什么是管道" class="headerlink" title="什么是管道"></a>什么是管道</h1><p>在 Angular 中有一个管道(pipe)的概念，可以把它理解为一个数据格式化工具，可以将已有的数据进行不同的转换。通过管道，我们可以把日常数据格式化这个工作变得异常简单与便捷。</p>
<h1 id="Angular-中的管道"><a href="#Angular-中的管道" class="headerlink" title="Angular 中的管道"></a>Angular 中的管道</h1><p>在 Angular 中已经有很多内置管道了，有17个 而且我们还可以自定义管道</p>
<ul>
<li><a href="https://www.angular.cn/api/common/AsyncPipe" target="_blank" rel="noopener">AsyncPipe</a> 当我们使用响应式编程的时候，必须对 Observable 进行订阅才会执行，当我们使用该管道的时候就会代替我们手动订阅。</li>
<li><a href="https://www.angular.cn/api/common/CurrencyPipe" target="_blank" rel="noopener">CurrencyPipe</a> 把数字格式化为金额，而且可以本地化，设置金额格式等。</li>
<li><a href="https://www.angular.cn/api/common/DatePipe" target="_blank" rel="noopener">DatePipe</a> 将日期进行格式化</li>
<li><a href="https://www.angular.cn/api/common/DecimalPipe" target="_blank" rel="noopener">DecimalPipe</a> </li>
<li><a href="https://www.angular.cn/api/common/DeprecatedCurrencyPipe" target="_blank" rel="noopener">DeprecatedCurrencyPipe</a></li>
<li><a href="https://www.angular.cn/api/common/DeprecatedDatePipe" target="_blank" rel="noopener">DeprecatedDatePipe</a></li>
<li><a href="https://www.angular.cn/api/common/DeprecatedDecimalPipe" target="_blank" rel="noopener">DeprecatedDecimalPipe</a></li>
<li><a href="https://www.angular.cn/api/common/DeprecatedPercentPipe" target="_blank" rel="noopener">DeprecatedPercentPipe</a></li>
<li><a href="https://www.angular.cn/api/common/I18nPluralPipe" target="_blank" rel="noopener">I18nPluralPipe</a></li>
<li><a href="https://www.angular.cn/api/common/I18nSelectPipe" target="_blank" rel="noopener">I18nSelectPipe</a></li>
<li><a href="https://www.angular.cn/api/common/JsonPipe" target="_blank" rel="noopener">JsonPipe</a></li>
<li><a href="https://www.angular.cn/api/common/KeyValuePipe" target="_blank" rel="noopener"> KeyValuePipe</a></li>
<li><a href="https://www.angular.cn/api/common/LowerCasePipe" target="_blank" rel="noopener">LowerCasePipe</a></li>
<li><a href="https://www.angular.cn/api/common/PercentPipe" target="_blank" rel="noopener">PercentPipe</a></li>
<li><a href="https://www.angular.cn/api/common/SlicePipe" target="_blank" rel="noopener">SlicePipe</a></li>
<li><a href="https://www.angular.cn/api/common/TitleCasePipe" target="_blank" rel="noopener">TitleCasePipe</a></li>
<li><a href="https://www.angular.cn/api/common/UpperCasePipe" target="_blank" rel="noopener">UpperCasePipe</a></li>
</ul>
<p>除了官方给出的管道我们还可以自定义管道</p>
]]></content>
      
        
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot Security 跨域请求配置]]></title>
      <url>http://youngxhui.top/2019/01/26/Spring-Boot-Security-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前的项目一直没有加 token 作为校验，这样的话势必会出现安全隐患。所以在项目维护的时候就添加了 JWT 和 Spring Security 作为安全防护。然而紧接着出现了一个问题，无法进行跨域请求。</p>
<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>这个项目是我之前一直在做的一个在线自动评测系统，包括客观题和主观题。后端采用 Spring Boot ，前端之前使用 vue，结果写前端的同学找工作去了，而且前端的代码很多不规范的地方，所以借此机会就打算把前端重写一次。写之前比较了 vue react 和 angular。最后选择了 Angular， 毕竟 typescript 和 依赖注入 还有 Rxjs 这几个技术太骚了。😂</p>
<h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>当重写前端的时候，采用 .http 文件测试也是可以发送和接收到请求的，然而通过 Angular 的时候发现，请求报错，出现了跨域的问题，这里说明一下，之前没有使用 Security 的时候也是处理的跨域的问题。这里贴一下代码。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> : <span class="type">WebMvcConfigurer &#123;</span></span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 跨域请求配置</div><div class="line">     * <span class="doctag">@param</span> registry 跨域请求</div><div class="line">     */</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addCorsMappings</span><span class="params">(registry: <span class="type">CorsRegistry</span>)</span></span> &#123;</div><div class="line">        registry.addMapping(<span class="string">"/**"</span>)</div><div class="line">            .allowedOrigins(<span class="string">"*"</span>)</div><div class="line">            .allowedMethods(<span class="string">"GET"</span>, <span class="string">"HEAD"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>, <span class="string">"OPTIONS"</span>)</div><div class="line">            .allowCredentials(<span class="literal">false</span>)</div><div class="line">            .maxAge(<span class="number">3600</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我一直认为是前端没有处理好跨域的问题，查看了很多 Angular 的文档，并没有找到问题，于是乎我感觉到了，一定是后端的问题。紧接着想到了 Security 里面的一个参数 <code>cors</code> 当我想到了这个问题的时候立马打开了后端代码。果然 我的后端代码里，并没有写出来 这个跨域问题。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> : <span class="type">WebSecurityConfigurerAdapter</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 拦截请求配置</div><div class="line">     * <span class="doctag">@param</span> http 要拦截的请求</div><div class="line">     */</div><div class="line">    <span class="meta">@Throws(Exception::class)</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">configure</span><span class="params">(http: <span class="type">HttpSecurity</span>)</span></span> &#123;</div><div class="line">        <span class="comment">// 跨域配置</span></div><div class="line">        http.cors()</div><div class="line">      </div><div class="line">        <span class="comment">// 下面代码省略 ...</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时我们重启应用，前端再次发送请求，请求成功。</p>
]]></content>
      
        
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apriori算法]]></title>
      <url>http://youngxhui.top/2018/05/25/Apriori%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>下文所有内容基本总结于 《数据挖掘概念与技术 第三版》机械工业出版社</p>
<p>最近复习数据挖掘课程，就把复习的几个算法记录一下。</p>
<h1 id="什么是Apriori算法"><a href="#什么是Apriori算法" class="headerlink" title="什么是Apriori算法"></a>什么是Apriori算法</h1><p><code>Apriori</code>算法是 Agrawal 和 R.Srikant 与1994 提出的，为布尔关联规则挖掘频繁项集的原创性算法。<code>Apriori</code>算法使用一宗称为逐层搜索的迭代方法，其中 <code>k</code> 项集用于探索 <code>(k+1)</code> 项。</p>
<p>基本为扫描数据库，累计每个项的计数，并且收集满足最小支持度的项，找出频繁1项集的集合。该集合记为L1。然后，使用L1找出频繁2项集的集合L2，如此一直找下去，知道不能再找到频繁k项集，找出每个Lk需要一次数据库的完整扫描。</p>
<h1 id="寻找频繁项集"><a href="#寻找频繁项集" class="headerlink" title="寻找频繁项集"></a>寻找频繁项集</h1><h2 id="先验性质"><a href="#先验性质" class="headerlink" title="先验性质"></a>先验性质</h2><p>为了提高频繁项集逐层产生的效率，一种称为<strong>先验性质</strong>的重要性质用于压缩搜索空间。</p>
<blockquote>
<p><strong>先验性质</strong>：频繁项集的所有非空子集也一定是频繁的。</p>
</blockquote>
<p>该表是一个事务数据库D。该数据库有9个事务，即|D|=9。假设最小支持度为2</p>
<table>
<thead>
<tr>
<th><strong>TID</strong></th>
<th><strong>商品ID的列表</strong></th>
<th><strong>TID</strong></th>
<th><strong>商品ID的列表</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>T100</td>
<td>I1,I2,I5</td>
<td>T600</td>
<td>I2,I3</td>
</tr>
<tr>
<td>T200</td>
<td>I2,I4</td>
<td>T700</td>
<td>I1,I3</td>
</tr>
<tr>
<td>T300</td>
<td>I2,I3</td>
<td>T800</td>
<td>I1,I2,I3,I5</td>
</tr>
<tr>
<td>T400</td>
<td>I1,I2,I4</td>
<td>T900</td>
<td>I1,I2,I3</td>
</tr>
<tr>
<td>T500</td>
<td>I1,I3</td>
<td></td>
</tr>
</tbody>
</table>
<ol>
<li><p>在算法第一次迭代的时候，每个项都是候选1项集的集合C1的成员。算法扫描，统计出每个项出现的次数。</p>
</li>
<li><p>可以确定频繁1项集的集合L1，它由满足最小支持段的候选1项集组成。</p>
</li>
<li><p>为发现频繁2项集的集合L2，算法使用L1 🔗 L1产生候选2项集的集合C2。注意剪枝，没有候选的C2中删除，因为这些候选的每个子集也是频繁的。</p>
</li>
<li><p>扫描D中的事务，累计C2中的每个候选项集的支持技术。</p>
</li>
<li><p>然后确定频繁2项集的集合L2，它由C2中满足最小支持度的候选2项集组成。</p>
</li>
<li><p>…………</p>
</li>
</ol>
<p>重复以上步骤，直到Cn = ∅，此算法终止，找出所有的频繁项集。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/apirori.png" alt=""></p>
<h1 id="由频繁项集产生关联规则"><a href="#由频繁项集产生关联规则" class="headerlink" title="由频繁项集产生关联规则"></a>由频繁项集产生关联规则</h1><p>一旦由数据库D中的事务找出频繁项集，就可以直接由它们产生强关联规则。对于置信度，可以用下面的公式计算。</p>
<blockquote>
<p> confidence(A ＝&gt;B) = P（A | B）= support_count(A ∪ B) / support_count(A)</p>
</blockquote>
<p>继续使用上面的案例，该数据包含频繁项集 x = {I1,I2,I5},可有X产生哪些关联规则，并且计算{I1,I2},{I1,I5},{I1}置信度</p>
<p>产生的关联规则</p>
<p>{I1,I2},{I1,I5},{I2,I5},{I1},{I2},{I5}</p>
<p>{I1,I2} =&gt; I5, confidence = 2 / 4 = 50%</p>
<p>{I1,I5} =&gt; I2, confidence =  2 / 2 = 100%</p>
]]></content>
      
        
        <tags>
            
            <tag> 数据挖掘 </tag>
            
            <tag> 推荐系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vscode 配置c/c++环境]]></title>
      <url>http://youngxhui.top/2018/05/07/vscode-%E9%85%8D%E7%BD%AEc-c-%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>工欲善其事，必先利其器</p>
</blockquote>
<p>最近重新开始了学习c语言和数据结构的过程，毕竟考研要用，所以 clon 在windows上的表现一直感觉不如在linux上，而且也重量，所以不打算使用 clon,而是打算用微软的vscode+gcc完成。</p>
<h1 id="基于命令行运行"><a href="#基于命令行运行" class="headerlink" title="# 基于命令行运行"></a># 基于命令行运行</h1><p>首先肯定要下载和安装好 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">visual studio code</a> 和下载 <a href="http://www.mingw.org/" target="_blank" rel="noopener">minGW</a>。这里不在赘述，安装好 <code>minGW</code> 记得配置环境变量。在终端中敲入 gcc -v 查看<img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/gcc.png" alt=""></p>
<p>然后我们新建一个文件夹并且在文件夹里新建一个 <code>Hello.cpp</code> 文件并且用 <code>vscode</code> 打开，此时 <code>vscode</code> 会提示你安装插件。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/vscgcc.png" alt=""></p>
<p>此时我们在Hello.cpp中书写我们的代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World \n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打开终端，使用 gcc Hello.cpp 进行编译，会形成一个a.exe的文件。然后输入 a.exe 就可以运行</p>
<blockquote>
<p>gcc Hello.cpp</p>
<p>a.exe</p>
</blockquote>
<p>这样就会编译和运行一个HelloWorld</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[大创项目总结]]></title>
      <url>http://youngxhui.top/2018/04/27/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>已经好久没有更新博客了，这个博客一直想写，也一直没有写。</p>
<p>大创是从 2017 年 1 月开始的，直到 2018 年 4 月底才结束，并不是项目难或者什么,而是项目时间就是这么长😂。然而时间长并不是一件好事情，时间越长反而对人的意志消磨就越厉害。一开始，四个人打算开始申报，现在细细想想其实就是两个人，和<a href="https://wevan.github.io/" target="_blank" rel="noopener">对象</a>一直忙前忙后，做 ppt，准备小漫画……</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/Attachment-1.png" alt="对象用ipad的画的漫画"></p>
<h1 id="项目过程"><a href="#项目过程" class="headerlink" title="项目过程"></a>项目过程</h1><p>不管怎么样，经过辛辛苦苦的准备，到最好好歹还是个校级项目，也算没有白白付出了努力。刚刚开始的时候，大家还满怀热情和希望的在做，终究没有利益关系啊，最后剩下的还是两个人。其他两个人的代码基本不能看。刚刚开始打算是原生Android写，四个人的任务剩下两个人，也开始慢慢的怠慢，进度越来越慢，到最后几乎是要停止的节奏。我俩几乎也筋疲力尽想要放弃了。</p>
<h1 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h1><p>一年的时间很快，在此期间和对象放弃了好几个小假期对之前的项目进行推翻重构。在去年冬天的时候，做课程设计选题为一个自动评测系统。</p>
<blockquote>
<p> 要求教师可以出题，可以对选择题，填空题，简答题和代码题进行评分，学生可以进行答题等一些功能。</p>
</blockquote>
<p>这个题和我们的大创中一些模块其实差不多。两周的时间来写这个小课设，经过两周的时间基本完成了一个小  <code>DEMO</code>，答辩的时候老师很满意。但是老师已经很本地的一个教育机构合作开发一个系统，我的这个模块为系统内部的一个子系统。在寒假期间，该教育机构于我进行了联系，我全面负责学生端功能和自动评测模块。对课程设计的 <code>DEMO</code> 用 <code>Kotlin</code> 进行了重写，对项目中不完善的地方进行了完善。考虑了一些并发情况。在于该机构交流的过程中发现了该机构的水平其实一般般。目前该系统基本已经稳定的运行在学院，给大一的学生做章节测试用。🙉</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/Snipaste_2018-04-27_15-39-57.png" alt=""></p>
<p>上面的有点扯得有点多，但是就是这个项目基本完成了我们大创的项目，加上 <code>vue.js</code> 的知识，进行了跨平台的开发，学生端主要是对象开发，教师端是我开发。用 <code>vue.js</code> 开发客户端比原生开发容易多了，速度也快。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作为一个负责人，这其中由我自己很大的错，没有能把一个团队紧密的联合起来，这是我的能力不足，但是一个团队，人有私心的时候，那么这个团队基本也要解散了。各有私心，想得到好处又不想付出。</p>
<p>这周二刚刚进行完答辩，目前还没有出来成绩，不够感觉还可以，毕竟当初立项了那么多，最后才有6个组进行结题答辩。</p>
<p>最后是答辩的时候的演示视频</p>
<iframe src="//player.bilibili.com/player.html?aid=22636989&cid=37559186&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"> </iframe>


]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RabbitMQ 和 Spring Boot 的集成]]></title>
      <url>http://youngxhui.top/2018/02/23/RabbitMQ-%E5%92%8C-Spring-Boot-%E7%9A%84%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在最近的项目中使用了 <code>RabbitMQ</code>。 主要是用来起到一个消峰作用。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装这里分为 <code>windows</code> 和 <code>linux</code>。</p>
<p>我主要的开发环境是在 <code>windows 10</code> 上， 运行环境是 <code>linux(ubuntu)</code>，所以讲解主要从两个系统来说。</p>
<h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p><code>RabbitMQ</code> 是 <code>erlang</code> 开发的，所以使用之前首先要下载 <a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">erlang</a> 选择 <code>windows 64bit</code> 或者 <code>windows 32bit</code> 根据自己电脑进行选择，下载。</p>
<p>下载后进行安装 将 <code>erl</code> 的安装目录下载的 <code>bin</code> 写入环境变量中。 如图所示：</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/erl.png" alt=""></p>
<p>在 <code>cmd/powershell</code> 中输入 <code>erl</code> 会出现 <code>erl</code> 的一些版本信息。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/erlcmd.png" alt=""></p>
<p>这样基本完成了 <code>erlang</code> 的安装。</p>
<p>安装完 <code>erlang</code> 那么就应该安装我们的主角 <code>RabbitMQ</code> 。</p>
<p>首先下载 <code>RabbitMQ</code> ，在<a href="http://www.rabbitmq.com/install-windows.html" target="_blank" rel="noopener">下载页面</a> 下载对应的安装包 <code>exe</code> 文件。</p>
<p>下载完成之后进行安装</p>
<p>安装完成之后就是我们的 <code>RabbitMQ</code> 就可以进行启动了。</p>
<p>运行 </p>
<h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>这里使用的是 <code>ubuntu 16.04 STL</code> 发行版。</p>
<p>首先要安装 erlang 的相关环境 </p>
<blockquote>
<p>sudo apt-get install erlang</p>
</blockquote>
<p>当安装完成之后在控制台输入 erl ，会有erl的版本信息。</p>
<p>此时的 erl 就算安装成功了。</p>
<p>安装完成之后我们就可以开始安装 RabbitMQ 了。</p>
<p>在终端中输入 </p>
<blockquote>
<p>sudo apt-get install rabbitmq-service</p>
</blockquote>
<p>此时的 rabbitmq 就算安装成功了。</p>
<p>我们需要安装一些插件。</p>
<blockquote>
<p>sudo rabbitmq-plugins enable rabbitmq_management</p>
</blockquote>
<p>就可以完成插件的安装</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/linux%20rabbitmq.png" alt=""></p>
<p>当我们通过浏览器访问的时候</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/rabbitmqweb.png" alt=""></p>
<p>此时的默认账户是无法登录的，因为默认 <code>guest</code> 是只能通过本地访问。所以我们要新建一个账户用来可以远程访问。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl add_user admin admin <span class="comment"># 新建一个叫admin账户和密码为admin</span></div><div class="line">rabbitmqctl set_user_tags admin administrator <span class="comment"># 为admin账户设为administrator用户</span></div><div class="line">rabbitmqctl set_permissions -p <span class="string">"/"</span> admin <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span> <span class="comment"># 为账户写入权限</span></div></pre></td></tr></table></figure>
<h1 id="与SpringBoot整合"><a href="#与SpringBoot整合" class="headerlink" title="与SpringBoot整合"></a>与SpringBoot整合</h1><p>基本的安装如上所示，下面将会将如何与 <code>SpringBoot</code> 整合</p>
<p>说明： 项目采用 <code>.yml</code> 格式文件作为 <code>application</code> 配置文件，采用 <code>Gradle</code> 作为构建工具，语言采用 <code>kotlin</code></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>首先我们对项目添加依赖。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">   	<span class="comment">//……</span></div><div class="line">    <span class="comment">// mq</span></div><div class="line">    compile(<span class="string">'org.springframework.boot:spring-boot-starter-amqp'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对 <code>application.yml</code> 进行配置</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  rabbitmq:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span></div><div class="line"><span class="attr">    username:</span> <span class="string">admin</span></div><div class="line"><span class="attr">    password:</span> <span class="string">admin</span></div></pre></td></tr></table></figure>
<p>在代码中进行配置</p>
<p>我们新建一个类用来配置 <code>RabbitMQ</code>。</p>
<p>在代码中新建了一个队列叫做 <code>dc_check</code>，当我们启动服务的时候就可以在 <code>RabbitMQ</code> 的控制台上看到这个队列 </p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nuc.evaluate.config</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue</div><div class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean</div><div class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> 杨晓辉 2018/2/6 16:07</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">checkAns</span><span class="params">()</span></span>: Queue &#123;</div><div class="line">        <span class="keyword">return</span> Queue(<span class="string">"dc_check"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们基本完成了配置。</p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017年终总结]]></title>
      <url>http://youngxhui.top/2018/01/01/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>今天是2017的最后一天，按照常理来说应该写下一个总结。<br>仔细回想一下今年做了什么？</p>
<ul>
<li>Java框架的学习 SSM SSH</li>
<li>kotlin的学习</li>
<li>考研准备</li>
<li>四级考试准备</li>
<li>博客的持续维护</li>
</ul>
<h1 id="框架学习"><a href="#框架学习" class="headerlink" title="框架学习"></a>框架学习</h1><p>年初的时候学习了<code>spring</code>和<code>spring MVC</code> 此时的我才了解到 Java的主要功能和作用点。因为大二就将这些框架学习完成，导致后面的很多专业课程上课很轻松。<br>学习这些框架其实会发现很多相似点，当然也会比较出不同框架之间的优缺点。</p>
<h1 id="kotlin的学习"><a href="#kotlin的学习" class="headerlink" title="kotlin的学习"></a>kotlin的学习</h1><p>虽然博客上的第一篇关于 <code>kotlin</code> 的文章是在8月多，但是在此之前就开始了零零碎碎的学习。之后在大三学习的 <code>struts2</code> 框架的代码全是 <code>kotlin</code>。<br>这些框架虽然没有对 <code>kotlin</code> 做出优化和适配，但是在业务逻辑方面确实可以省不少事情。<br>也给实验室安利过 <code>kotlin</code>，好像没有成功。</p>
<p>尴尬. jpg</p>
<h1 id="考研准备"><a href="#考研准备" class="headerlink" title="考研准备"></a>考研准备</h1><p>报了一个考研班，具体考哪里还没有仔细思考，不过是时候该考虑一下了。考研是一个漫长的过程，看着一些学长的考研经历好像也看到了自己。之前早晨跑步的时候每到图书馆门口的时候就好看到大量的学生拍着长长的队等待着图书馆开门。</p>
<h1 id="四级"><a href="#四级" class="headerlink" title="四级"></a>四级</h1><p>今年六月份考试的时候真的没有做准备，属于裸考，再加上自己的英语比较差，没过也是在预料之中的。假期好好学了一下英语。十二月再次参加考试，希望能过吧，不想在同一件事情花费的时间太长。</p>
<blockquote class="blockquote-center"><p>四级过了  <br> 2018年2月27日 </p>
</blockquote>
<h1 id="博客维护"><a href="#博客维护" class="headerlink" title="博客维护"></a>博客维护</h1><p>博客今年主要的改变为换了好几个评论系统，多说的关闭使很多博客的评论系统受到影响，经过几次的迁移，评论也都丢失，希望现在的评论会一直保存下来。</p>
<h1 id="新年展望"><a href="#新年展望" class="headerlink" title="新年展望"></a>新年展望</h1><p>新年要有个新的计划和准备</p>
<ul>
<li>四级如果没有过下次必须过</li>
<li>算法方面继续学习</li>
<li>认认真真的准备考研</li>
</ul>
<p>今天已经是2018的第一天了，之前在家一直没有带着电脑，刚刚来了学校，把总结补上。</p>
<p>新年快乐。 </p>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一次神奇的课设验收]]></title>
      <url>http://youngxhui.top/2017/12/28/%E4%B8%80%E6%AC%A1%E7%A5%9E%E5%A5%87%E7%9A%84%E8%AF%BE%E8%AE%BE%E9%AA%8C%E6%94%B6/</url>
      <content type="html"><![CDATA[<p>刚刚验收完课程实际，实在是压抑不住我的内心。为什么我们学校验收课程设计会找一堆不懂代码的老师过来验收？</p>
<p>第一句话</p>
<blockquote>
<p>你这代码是抄的吧。</p>
</blockquote>
<p>woc…………，都没有看过我的代码你就知道我的代码是抄的？这种说话无凭无据，信口开河？起码看看代码再说结论。</p>
<blockquote>
<p>画一下流程图</p>
<p>不用注意格式，画圈就好。</p>
</blockquote>
<p>就类似下图的样子把每个模块的都画出来，边画边解释每个圈是什么意思。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E6%B5%81%E7%A8%8B%E5%9B%BE1.png" alt=""></p>
<p>之后又要画主函数的。</p>
<p>和他解释了无数次主函数就一个 <code>menu()</code> 结果这老师神tmd的，非要画。</p>
<p>你他妈的是在逗我？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"welcome\n"</span>);</div><div class="line">    menu();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后都画完又说，你看看你一个一个的画的，谁知道你画的什么？</p>
<p>WTF</p>
<p>难道流程图不应该是一个函数画一个</p>
<p>最后给出了我他的答案</p>
<blockquote>
<p>你看这样的流程图，多清晰。</p>
</blockquote>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E6%B5%81%E7%A8%8B%E5%9B%BE2.png" alt=""></p>
<p>你和谁学的？</p>
<p>你的老师从棺材板里爬出来，估计要找你了。</p>
<p><strong>谁给你的自信一本正经的胡说八道</strong></p>
<p>闲的无聊查了一下这个人</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/Snipaste_2017-12-28_18-21-53.png" alt=""></p>
<p>自己是什么样子，心里没点B数吗？</p>
<p>💊</p>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin中Collection一些语法总结]]></title>
      <url>http://youngxhui.top/2017/12/23/Kotlin%E4%B8%ADCollection%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/1c40461a60dff3e4e24775e216e80547.png" alt="Kotlin"></p>
<p><code>kotlin</code> 对集合问题的支持很好，有很多方法可以方便又直观的对集合进行操作。比如 <code>map</code>，<code>count</code>，<code>reduce</code>，<code>filter</code>等方法，这个博客会持续总结些方法。</p>
<h1 id="any"><a href="#any" class="headerlink" title="any"></a>any</h1><p><code>any</code> 这个函数返回值是一个 <code>boolean</code> 类型，用于判断集合内元素是否用满足条件的，如果有任意一个集合满足该条件，则返回 <code>true</code> 否是为 <code>false</code>。</p>
<p>示例代码</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> list: List&lt;<span class="built_in">Int</span>&gt; = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">55</span>, <span class="number">34</span>) <span class="comment">//sum = 193</span></div><div class="line">    <span class="keyword">val</span> l = list.any &#123;</div><div class="line">        it &gt; <span class="number">30</span></div><div class="line">    &#125;</div><div class="line">    println(<span class="string">"判断结果为 <span class="subst">$l</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果为</p>
<blockquote>
<p>判断结果为 true</p>
</blockquote>
<p>这里的 <code>it</code> 可以理解为 <code>iterator</code> 既为集合中的每个元素。之后有很多函数都是对 <code>it</code> 进行操作。</p>
<h1 id="all"><a href="#all" class="headerlink" title="all"></a>all</h1><p><code>all</code> 几乎和 <code>any</code> 很相似，只是用于判断每个元素，要集合内每个元素满足条件才会返回<code>ture</code>，否则为 <code>false</code></p>
<p>示例代码</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> list: List&lt;<span class="built_in">Int</span>&gt; = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">55</span>, <span class="number">34</span>) <span class="comment">//sum = 193</span></div><div class="line">    <span class="keyword">val</span> l = list.all &#123;</div><div class="line">        it &gt; <span class="number">30</span></div><div class="line">    &#125;</div><div class="line">    println(<span class="string">"判断结果为 <span class="subst">$l</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>判断结果为 false</p>
</blockquote>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p><code>map</code> 这个函数对集合内的每一个元素进行迭代遍历，基本可以替代<code>for</code>循环。</p>
<p>示例</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> list: List&lt;<span class="built_in">Int</span>&gt; = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">55</span>, <span class="number">34</span>)</div><div class="line"></div><div class="line">    list.map &#123;</div><div class="line">        print(<span class="string">"<span class="subst">$it</span> "</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果为：</p>
<blockquote>
<p>1 2 4 67 7 23 55 34 </p>
</blockquote>
<p>这样就完成了对集合的迭代输出。</p>
<h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><p>顾名思义，filter为一个过滤器，可以对我们集合元素进行一次过滤，留下我们想要的元素。<br>例如我们要集合中的偶数元素。</p>
<p>示例代码</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> list: List&lt;<span class="built_in">Int</span>&gt; = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">55</span>, <span class="number">34</span>)</div><div class="line"></div><div class="line">    list.filter &#123; it % <span class="number">2</span> == <span class="number">0</span> &#125;.map &#123; print(<span class="string">"<span class="subst">$it</span> "</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>2 4 34 </p>
</blockquote>
<p>完成了对偶数元素的过滤，结合map进行一下输出。如果我们不用filter和map进行输出，那么我们将会写下下面的这种代码，而且 IDEA 也会给我们警告，让我们及时改进。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until list.size) &#123;</div><div class="line">    <span class="keyword">if</span> (list[i] % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">        print(<span class="string">"<span class="subst">$&#123;list[i]&#125;</span> "</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时就会感觉到了这些语法对于代码的简洁和易用。</p>
<h1 id="count"><a href="#count" class="headerlink" title="count"></a>count</h1><p>即使对集合元素进行统计，如果直接使用 <code>count()</code> 对集合元素统计和直接用 <code>size</code> 没有什么区别，所以说 <code>count</code> 有更加高级的用法。</p>
<p>比如对集合内的某个元素进行统计或者某种类型的元素进行统计，比如统计集合中偶数的个数。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> list: List&lt;<span class="built_in">Int</span>&gt; = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">55</span>, <span class="number">34</span>)</div><div class="line">    <span class="keyword">val</span> count = list.count &#123;</div><div class="line">        it % <span class="number">2</span>== <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    println(<span class="string">"集合中的偶数个数为 <span class="subst">$count</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出</p>
<blockquote>
<p>集合中的偶数个数为 3</p>
</blockquote>
<h1 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h1><p>这个用于分组，对元素进行按要求分组，最后的结果也会保存在两个集合中， true 和 false</p>
<p>示例代码</p>
<p>对奇偶数进行分组</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">val</span> list: List&lt;<span class="built_in">Int</span>&gt; = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">55</span>, <span class="number">34</span>) <span class="comment">//sum = 193</span></div><div class="line">    <span class="keyword">val</span> result = list.groupBy &#123;</div><div class="line">        it % <span class="number">2</span> == <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    println(<span class="string">"<span class="subst">$result</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果</p>
<blockquote>
<p>{false=[1, 67, 7, 23, 55], true=[2, 4, 34]}</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin 1.2:平台之间共享代码]]></title>
      <url>http://youngxhui.top/2017/12/02/Kotlin-1-2-%E5%B9%B3%E5%8F%B0%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一个尝试，之前没有翻译过任何技术文章，做一个尝试，也算是学习，尽管现在这个译文在网上已经是满天飞了。</p>
<p>原文地址<a href="https://blog.jetbrains.com/kotlin/2017/11/kotlin-1-2-released/" target="_blank" rel="noopener">Kotlin 1.2 Released: Sharing Code between Platforms</a></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>今天，我们将要发布 Kotlin 1.2。这是一个重要的新版本和一个大的步伐在我们朝着使用 Kotlin 在现代应用程序中的道路上。</p>
<p>在 Kotlin 1.1 中，我们正式的发布了 <strong>JavaScript 目标</strong>，允许你去编译 Kotlin 代码成为 JS 并且运行在浏览器上。在 <strong>Kotlin 1.2</strong> 中，我们将要添加 <strong>JVM 和 JavaScript</strong> 的代码重用成为可能。现在你可以写一次应用程序的逻辑代码，而在你的应用程序中所有层重用它——后端，浏览器前端和Android移动应用。我们也会在库上进行工作，帮助你重用更多的代码。比如跨平台库。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/cake3-1.png" alt=""></p>
<p>Kotlin 1.2 是已经绑定在 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA 2017.3</a>中，将会在本周发布。如果你正在使用的是 Android Studio 或者 一个旧版本的 Intellij IDEA，你可以从 Tools | Kotlin | Configure Kotlin Plugin 更新框中安装新的版本。</p>
<p>这个版本包括了大量外部贡献者的工作，并且我们想感谢向我们反馈，提交问题和尤其是提交了PR的每个人。</p>
<h2 id="多平台项目"><a href="#多平台项目" class="headerlink" title="多平台项目"></a>多平台项目</h2><p>一个多平台项目允许你编译在你的应用程序的多层 —— 后端，前端和Android应用 —— 在相同的代码基础上。这样的一个项目包含了 <strong>相同模块</strong>,与平台无关以及<strong>特定平台的模块</strong>，包含了特定平台的代码( JVM 或者 JS )和使用了特定平台的库。从通用模块调用特定平台的代码，你可以指定<strong>预期的声明</strong>——所有平台特定模块需要提供<strong>实际实现</strong>声明。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/MPP.png" alt=""></p>
<p>有关该功能的更多信息，请查看这个<a href="http://kotlinlang.org/docs/reference/multiplatform.html" target="_blank" rel="noopener">文档</a></p>
<p>如前所述，我们也在编写一组公共库允许你将更多的逻辑代码转移到公共代码：</p>
<ul>
<li><p><a href="http://kotlinlang.org/api/latest/kotlin.test/index.html" target="_blank" rel="noopener">kotlin.test</a>,包括开箱即用的Kotlin1.2，让你写一次测试并且运行在JVM 和 JS 下；</p>
</li>
<li><p><a href="https://github.com/kotlin/kotlinx.html" target="_blank" rel="noopener">kotlin.html</a>支持 <strong>同构渲染</strong> — 用相同的代码渲染 HTML 在后端和在前端；</p>
</li>
<li><p><a href="https://github.com/kotlin/kotlinx.serialization" target="_blank" rel="noopener">kotlinx.serialization</a>允许你轻松的对 Kotlin对象编组在你的应用程序的不同的层之间，使用 JSON 或者 ProtoBuf 进行序列化格式化。</p>
</li>
</ul>
<p>请注意，多平台项目目前是一个实验性功能；这意味着这个功能是准备使用，但是我们也许需要去改变设计在之后的版本(并且如果我们这样做，我们将会提供代码迁移工具)。</p>
<h2 id="编译性能"><a href="#编译性能" class="headerlink" title="编译性能"></a>编译性能</h2><p>在1.2的发展过程中，我们花费了很多精力来使编译过程更快。我们已经比Kotlin1.1提高了大约 25% 并且我们看见进一步改进的巨大潜力，它将会在发布在 1.2.x的更新中。</p>
<p>下方的图片展示了两个用Kotlin的大型JetBrains项目不同的编译时间：<br><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/CompilationSpeed.png" alt=""></p>
<h2 id="其他语言和库的改进"><a href="#其他语言和库的改进" class="headerlink" title="其他语言和库的改进"></a>其他语言和库的改进</h2><p>我们也做了许多小的改进在语言和标准库：</p>
<ul>
<li><p><a href="http://kotlinlang.org/docs/reference/whatsnew12.html#array-literals-in-annotations" target="_blank" rel="noopener">更简洁的语法</a> 用于将多个参数传递给注解(数组 文字(literals)) <em>不知如何翻译literals 译者注</em></p>
</li>
<li><p>支持 <code>lateinit</code> 修饰在全局属性和局部属性，以及检查一个 <code>lateinit</code> 是否被初始化；</p>
</li>
<li><p><a href="http://kotlinlang.org/docs/reference/whatsnew12.html#smart-cast-improvements" target="_blank" rel="noopener">更加聪明的智能推导</a>和<a href="http://kotlinlang.org/docs/reference/whatsnew12.html#information-from-explicit-casts-is-used-for-type-inference" target="_blank" rel="noopener">改进的类型推断</a>在一些情况下。</p>
</li>
<li><p>标准库和 Java9 中引入的分包限制的兼容；</p>
</li>
<li><p>新的 <code>kotlin.math</code>包在标准库中；</p>
</li>
<li><p>新的标准库函数在处理序列和集合，包含了<a href="http://kotlinlang.org/docs/reference/whatsnew12.html#windowed-chunked-zipwithnext" target="_blank" rel="noopener">一组函数</a> 为了拆分集合和序列为可能重叠的固定大小的组。</p>
</li>
</ul>
<p>更多的信息和代码示例，请看 <a href="http://kotlinlang.org/docs/reference/whatsnew12.html" target="_blank" rel="noopener">Kotlin1.2中新功能</a></p>
<h2 id="世界各地的Kotlin"><a href="#世界各地的Kotlin" class="headerlink" title="世界各地的Kotlin"></a>世界各地的Kotlin</h2><p>自从今年3月发布的Kotlin1.1以来，Kotlin已经取得了巨大的收获在世界各地。这是 KotlinConf 的高潮，我们第一次全球会议，有着1200参会者在11月2，3日的旧金山。我们已经记录了所有的会谈，并且<a href="https://kotlinconf.com/talks/" target="_blank" rel="noopener">视频已经可以看</a>。</p>
<p>Kotlin现在是一个Android开发官方支持的语言，开箱即用的Android Studio 3.0，已经谷歌发布了官方<a href="https://developer.android.com/samples/index.html?language=kotlin" target="_blank" rel="noopener">示例</a>和<a href="https://android.github.io/kotlin-guides/" target="_blank" rel="noopener">风格指南</a>。结果是，在Android Studio中超过了 17% 的项目使用 Kotlin，包含来自很多热门的创业公司以及财富500强公司的许多应用程序。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/KotlinConfUsers.jpg" alt=""></p>
<p>在服务器端，<a href="https://spring.io/blog/2017/09/28/spring-framework-5-0-goes-ga" target="_blank" rel="noopener">Spring 5.0</a> 已经发布，有着<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/languages.html#kotlin" target="_blank" rel="noopener">许多Kotlin支持的功能</a>,而且 <a href="http://vertx.io/" target="_blank" rel="noopener">vert.x</a> 已经<a href="http://vertx.io/docs/vertx-core/kotlin/" target="_blank" rel="noopener">支持Kotlin</a>在3.4.0后。当然，Gradle支持开箱即用Kotlin DSL，而且 Gradle Kotlin DSL 项目正在迅速的接近1.0版本。</p>
<p>在Github上，开源的Kotlin代码行数已经超过了2.5亿。而在 Stack Overflow，Kotlin是<a href="https://stackoverflow.blog/2017/10/31/disliked-programming-languages/" target="_blank" rel="noopener">增长最快的语言之一和最不反感的语言之一</a></p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/KotlinAdoption.png" alt=""></p>
<p>围绕Kotlin的社区建立同样也是令人吃惊的，已经有超过100用户组在全世界，我们很难追踪到所有的人 —— 但是针对我们所知道的，这个<a href="http://kotlinlang.org/community/talks.html" target="_blank" rel="noopener">会谈地图</a>给了你一个很好的想法，kotlin是多么广泛的使用。</p>
<p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/11/KUGmap.png" alt=""></p>
<p>对于刚刚学习Kotlin的人来说，书籍的数量是不断的增长(包含我们自己的 “Kotlin in Action”,现在有<a href="https://manning.com/books/kotlin-in-action" target="_blank" rel="noopener">英文</a>，<a href="https://dmkpress.com/catalog/computer/programming/java/978-5-97060-497-7/" target="_blank" rel="noopener">俄语</a>，<a href="https://www.amazon.co.jp/Kotlin%E3%82%A4%E3%83%B3%E3%83%BB%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-Dmitry-Jemerov/dp/4839961743/ref=sr_1_2?ie=UTF8&amp;qid=1511539431&amp;sr=8-2&amp;keywords=kotlin" target="_blank" rel="noopener">日语</a>，<a href="https://www.amazon.com/Kotlin%E5%AE%9E%E6%88%98-Svetlana-Isakova-Dmitry-Jemerov/dp/B07568C58F/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1511539582&amp;sr=1-3" target="_blank" rel="noopener">中文</a>和<a href="https://novatec.com.br/livros/kotlin-em-acao/" target="_blank" rel="noopener">葡萄牙语</a>),线上课程，教程和<a href="http://kotlinlang.org/community/" target="_blank" rel="noopener">其他资源</a></p>
<h2 id="团队见面：网络研讨会和Reddit-AMA"><a href="#团队见面：网络研讨会和Reddit-AMA" class="headerlink" title="团队见面：网络研讨会和Reddit AMA"></a>团队见面：网络研讨会和Reddit AMA</h2><p>分享你更多的信息关于新版本，我们计划组织一个<a href="https://info.jetbrains.com/Kotlin-Webinar-December2017.html" target="_blank" rel="noopener">网络研讨会关于Kotlin1.2多平台项目</a>在12月7日，18:00 CET。请注册；空间有限。</p>
<p>Kotlin团队也将会举办 AMA(Ask Me Anything) 在 <a href="https://www.reddit.com/r/Kotlin/" target="_blank" rel="noopener">Kotlin Reddit</a> 上在12月5号。我们将开始中午开始(CET),并且我们接下来的24小时和你在一起。</p>
<h2 id="如何升级"><a href="#如何升级" class="headerlink" title="如何升级"></a>如何升级</h2><p>一如既往，你可以<strong>在线尝试Kotlin</strong>在<a href="http://try.kotlinlang.org/" target="_blank" rel="noopener">try.kotlinlang.org</a></p>
<ul>
<li><p>在 Maven，Gradle和npm中：使用<code>1.2.0</code>作为编译器和标准库的版本号。看<a href="http://kotlinlang.org/docs/reference/using-gradle.html" target="_blank" rel="noopener">这里</a></p>
</li>
<li><p><strong>IntelliJ IDEA</strong>：2017.3已经和Kotlin1.2绑定，在早期版本中安装或者升级 Kotlin 插件到1.2.0版本。</p>
</li>
<li><p><strong>Android Studio</strong>：安装或者升级插件通过 <code>Plugin Manager</code>。</p>
</li>
<li><p><strong>Eclips</strong>：安装插件在 <a href="https://marketplace.eclipse.org/content/kotlin-plugin-eclipse" target="_blank" rel="noopener">MarketPlace</a>。</p>
</li>
<li><p><strong>命令行编译</strong>可以从<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.2.0" target="_blank" rel="noopener">Github发布页面</a>上下载。</p>
</li>
</ul>
<p><strong>兼容性</strong> 在Kotlin1.2的语言和标准库是<a href="http://kotlinlang.org/docs/reference/compatibility.html" target="_blank" rel="noopener">向后兼容的(模块错误)</a>:如果一些编译和运行在1.0或者1.1，将会继续在1.2上运行。帮助逐渐共享的打团队，我们将提供不使用新特性的编译开关。<a href="http://kotlinlang.org/docs/reference/compatibility.html#binary-compatibility-warnings" target="_blank" rel="noopener">这里</a>是一个包含可能的缺陷文档</p>
]]></content>
      
        
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 译文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Number of 1 Bits(#191)]]></title>
      <url>http://youngxhui.top/2017/12/01/LeetCode-Number-of-1-Bits-191/</url>
      <content type="html"><![CDATA[<h1 id="Number-of-1-Bits-191"><a href="#Number-of-1-Bits-191" class="headerlink" title="Number of 1 Bits(#191)"></a>Number of 1 Bits(#191)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>191</td>
<td>Number of 1 Bits</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个题其实就是统计一个无符号整数的二进制数中1的个数，<code>Java</code> 已经给我们提供了api <code>Intger.bitCount(int n)</code>,所以一行代码解决</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">// you need to treat n as an unsigned value</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.bitCount(n);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Self Dividing Numbers(#728)]]></title>
      <url>http://youngxhui.top/2017/12/01/LeetCode-Self-Dividing-Numbers-728/</url>
      <content type="html"><![CDATA[<h1 id="Self-Dividing-Numbers-728"><a href="#Self-Dividing-Numbers-728" class="headerlink" title="Self Dividing Numbers(#728)"></a>Self Dividing Numbers(#728)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>728</td>
<td>Self Dividing Numbers</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个题首先要把给的数字每一位进行分割，写了一个递归 foo 返回一个list，这个list是数字的每一位。</p>
<p>之后再写个循环对产生的结果进行遍历就好。基本没什么难点。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">selfDividingNumbers</span><span class="params">(left: <span class="type">Int</span>, right: <span class="type">Int</span>)</span></span>: List&lt;<span class="built_in">Int</span>&gt; &#123;</div><div class="line">        <span class="keyword">var</span> result = ArrayList&lt;<span class="built_in">Int</span>&gt;()</div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> left..right) &#123;</div><div class="line">            <span class="keyword">var</span> list = ArrayList&lt;<span class="built_in">Int</span>&gt;()</div><div class="line">            <span class="keyword">val</span> arrayList = foo(i, list)</div><div class="line">            <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">            arrayList.map &#123;</div><div class="line">                <span class="keyword">if</span> (it != <span class="number">0</span> &amp;&amp; i % it == <span class="number">0</span>) &#123;</div><div class="line">                    sum += <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (sum == arrayList.size) &#123;</div><div class="line">                result.add(i)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(num: <span class="type">Int</span>, list: <span class="type">ArrayList</span>&lt;<span class="type">Int</span>&gt;)</span></span>: ArrayList&lt;<span class="built_in">Int</span>&gt; &#123;</div><div class="line">        <span class="keyword">if</span> ((num / <span class="number">10</span> == <span class="number">0</span>) and (num % <span class="number">10</span> == <span class="number">0</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> list</div><div class="line">        &#125;</div><div class="line">        list.add(num % <span class="number">10</span>)</div><div class="line">        <span class="keyword">val</span> nums = num / <span class="number">10</span></div><div class="line">        foo(nums, list)</div><div class="line">        <span class="keyword">return</span> list</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Binary Number with Alternating Bits(#693)]]></title>
      <url>http://youngxhui.top/2017/12/01/LeetCode-Binary-Number-with-Alternating-Bits-693/</url>
      <content type="html"><![CDATA[<p> 好久都没有写过博客了，大概一个月，一个字都没有写。乱七八糟的的事情有点多，再加上考试等，一个月也没有做什么。最近发现 <code>LeetCode</code> 上支持了 <code>kotlin</code>。算法的学习还是不能停止的，毕竟自己还是个渣。</p>
<p> 估计以后的 <code>LeetCode</code> 上的题都是用 <code>kotlin</code> 刷了。</p>
<h1 id="Binary-Number-with-Alternating-Bits-693"><a href="#Binary-Number-with-Alternating-Bits-693" class="headerlink" title="Binary Number with Alternating Bits(#693)"></a>Binary Number with Alternating Bits(#693)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>693</td>
<td>Binary Number with Alternating Bits</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个题是要找到带有交替位的二进制数，比如 <code>2(10)</code>, <code>5(101)</code> ,这样的数字。</p>
<p>我的想法应该是相对来说比较笨的，就是先把数转为二进制数，再将二进制数分割位字符数组，对字符数组进行奇数偶数的选择。通过选择后判断奇偶位中的每一位是否相同。</p>
<p>第一次提交的时候就是这个样子想的，当提交代码的时候发现错了因为 <code>7(111)</code> 这个样子的并不符合奇偶交替，而是一样，所以在后面加了一个判断，判断奇偶位的内容是否一致，如果一样代表不成立。</p>
<p>当再次提交的时候发现忽略了 <code>1</code> 因为有了判断，所以1的偶位肯定是不存在的，这样的话就会判断出错误的结果，最后在开头添加这个判断。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hasAlternatingBits</span><span class="params">(n: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">        <span class="keyword">if</span> (n ==<span class="number">1</span> )&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span></div><div class="line">        <span class="keyword">val</span> a = Integer.toBinaryString(n)</div><div class="line">        <span class="keyword">val</span> b: CharArray = a.toCharArray()</div><div class="line">        <span class="keyword">val</span> c = ArrayList&lt;<span class="built_in">Char</span>&gt;()</div><div class="line">        <span class="keyword">val</span> d = ArrayList&lt;<span class="built_in">Char</span>&gt;()</div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until b.size) &#123;</div><div class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">                c.add(b[i])</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                d.add(b[i])</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> twp1 = <span class="string">'0'</span></div><div class="line">        <span class="keyword">var</span> twp2 = <span class="string">'1'</span></div><div class="line">        <span class="keyword">if</span> (c.size != <span class="number">0</span>) &#123;</div><div class="line">            twp1 = c[<span class="number">0</span>]</div><div class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until c.size) &#123;</div><div class="line">                <span class="keyword">if</span> (c[i] != twp1) &#123;</div><div class="line">                    flag = <span class="literal">false</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (d.size != <span class="number">0</span>) &#123;</div><div class="line">            twp2 = d[<span class="number">0</span>]</div><div class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until d.size) &#123;</div><div class="line">                <span class="keyword">if</span> (d[i] != twp2) &#123;</div><div class="line">                    flag = <span class="literal">false</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (twp1 == twp2) &#123;</div><div class="line">            flag = <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Length of Last Word(#58)]]></title>
      <url>http://youngxhui.top/2017/09/14/LeetCode-Length-of-Last-Word-58/</url>
      <content type="html"><![CDATA[<h1 id="Length-of-Last-Word-58"><a href="#Length-of-Last-Word-58" class="headerlink" title="Length of Last Word(#58)"></a>Length of Last Word(#58)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>58</td>
<td>Length of Last Word</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题目要求计算出字符串最后一个单词的长度，如果不存在就返回 <code>0</code> 。 首先就是要判断这个字符串中有没有字符，是否是一个空的字符串，如果是返回 <code>0</code>。 否则的话就是通过 split() 切割字符串。最后返回最后一个字符串的长度就好。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Java 代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (s.trim().isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        String[] args = s.split(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">return</span> args[args.length - <span class="number">1</span>].length();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Kotlin 代码</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">lengthOfLastWord</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> s.trim().substringAfterLast(<span class="string">' '</span>).length</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Add Digits(#258)]]></title>
      <url>http://youngxhui.top/2017/09/10/LeetCode-Add-Digits-258/</url>
      <content type="html"><![CDATA[<h1 id="Add-Digits-258"><a href="#Add-Digits-258" class="headerlink" title="Add Digits(#258)"></a>Add Digits(#258)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>258</td>
<td>Add Digits</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>竟然还有这样的操作？？？？😥</p>
<p>一个非0非9的数除以9竟然就是答案，这样的规律大佬们是如何找到的？</p>
<p>🤔</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> num == <span class="number">0</span>? <span class="number">0</span>: (num% <span class="number">9</span> == <span class="number">0</span>? <span class="number">9</span>: (num%<span class="number">9</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Find the Difference(#389)]]></title>
      <url>http://youngxhui.top/2017/09/10/LeetCode-Find-the-Difference-389/</url>
      <content type="html"><![CDATA[<h1 id="Find-the-Difference-389"><a href="#Find-the-Difference-389" class="headerlink" title="Find the Difference(#389)"></a>Find the Difference(#389)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>389</td>
<td>Find the Difference</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个题主要是用于寻找两个字符串之间不同的字符，用到之前的一个规律，在 <a href="http://youngxhui.github.io/2017/08/27/LeetCode-Single-Number-136/" target="_blank" rel="noopener">#136</a>,即</p>
<blockquote>
<p>N ^ N = 0<br>N ^ 0 = 0</p>
</blockquote>
<p>利用这个规律可以很方便的找出那个不同的字符。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span>[] sc = s.toCharArray();</div><div class="line">        <span class="keyword">char</span>[] tc = t.toCharArray();</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> out = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c: sc) &#123;</div><div class="line">            out ^= c;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c: tc) &#123;</div><div class="line">            out ^= c;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>)out;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Bit Manipulation </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[协同过滤算法]]></title>
      <url>http://youngxhui.top/2017/09/01/%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在推荐系统中有很多算法，其中一种就是协同过滤算法。</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>在协同过滤算法中，分为两类，基于用户的协同过滤(UserCF)和基于物品的协同过滤(ItemCF)。每个类型的适用情况不同。</p>
<p>在上述的两种类型中，基于用户的协同过滤算法是不太常用的，原因如下</p>
<ul>
<li>用户的数量是远远大于物品的数量，计算用户之间的相似度计算量会很大。</li>
<li>对于一个新用户很难找到相似度</li>
</ul>
<p>所以一般是不会使用基于用户的协同过滤，但是并不表示不用，一般用于新闻推送等。</p>
<h1 id="相似度计算"><a href="#相似度计算" class="headerlink" title="相似度计算"></a>相似度计算</h1><h2 id="离散图表示"><a href="#离散图表示" class="headerlink" title="离散图表示"></a>离散图表示</h2><p>目前有五个用户对商品1和商品2的喜爱程度，分析用户之间的关系。</p>
<table>
<thead>
<tr>
<th>用户</th>
<th>商品1</th>
<th>商品2</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>3.3</td>
<td>6.5</td>
</tr>
<tr>
<td>2</td>
<td>5.8</td>
<td>2.6</td>
</tr>
<tr>
<td>3</td>
<td>3.6</td>
<td>6.3</td>
</tr>
<tr>
<td>4</td>
<td>3.4</td>
<td>5.8 </td>
</tr>
<tr>
<td>5</td>
<td>5.2</td>
<td>3.1 </td>
</tr>
</tbody>
</table>
<p>寻找他们的相似度</p>
<p>通过离散图来进行表示</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/shopping.png" alt=""></p>
<p>可以看出 <code>用户1</code> <code>用户3</code> <code>用户4</code> 之间是存在关系的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding = utf8</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># 散点图分析五个用户之间的相关程度</span></div><div class="line"><span class="comment"># x轴为对于商品 1 的喜欢程度</span></div><div class="line"><span class="comment"># y轴是对于商品 2 的喜欢程度</span></div><div class="line"><span class="comment"># 数据如下</span></div><div class="line"><span class="comment"># 商品1 [3.3, 5.8, 3.6, 3.4, 5.2]</span></div><div class="line"><span class="comment"># 商品2 [6.5, 2.6, 6.3, 5.8, 3.1]</span></div><div class="line"></div><div class="line">shop1 = [<span class="number">3.3</span>, <span class="number">5.8</span>, <span class="number">3.6</span>, <span class="number">3.4</span>, <span class="number">5.2</span>]</div><div class="line">shop2 = [<span class="number">6.5</span>, <span class="number">2.6</span>, <span class="number">6.3</span>, <span class="number">5.8</span>, <span class="number">3.1</span>]</div><div class="line">color = [<span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'g'</span>, <span class="string">'y'</span>, <span class="string">'k'</span>, <span class="string">'m'</span>, <span class="string">'0xff0012'</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(shop1)):</div><div class="line">    plt.scatter(shop1[i], shop2[i], c=color[i])</div><div class="line">plt.xlim(<span class="number">0</span>, <span class="number">10</span>)</div><div class="line">plt.ylim(<span class="number">0</span>, <span class="number">10</span>)</div><div class="line">plt.ylabel(<span class="string">"shopping 2"</span>)</div><div class="line">plt.xlabel(<span class="string">"shopping 1"</span>)</div><div class="line">plt.legend(<span class="string">'12345'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h2 id="欧几里得距离"><a href="#欧几里得距离" class="headerlink" title="欧几里得距离"></a>欧几里得距离</h2><p>欧几里得距离是最常用的距离公式,用于计算两点之间的距离。公式如下：</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/render.gif" alt=""></p>
<p>通过计算两点之间的距离来表示他们之间的相关程度。</p>
<p>我们通过 <code>python</code> 计算 欧几里得距离。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding = utf8</span></div><div class="line"></div><div class="line"><span class="comment">#        1    2     3   4   5</span></div><div class="line">shop1 = [<span class="number">3.3</span>, <span class="number">5.8</span>, <span class="number">3.6</span>, <span class="number">3.4</span>, <span class="number">5.2</span>]</div><div class="line">shop2 = [<span class="number">6.5</span>, <span class="number">2.6</span>, <span class="number">6.3</span>, <span class="number">5.8</span>, <span class="number">3.1</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(shop1) - <span class="number">1</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(shop2)):</div><div class="line">        distance = (shop1[i] - shop1[j]) ** <span class="number">2</span> + (shop2[i] - shop2[j]) ** <span class="number">2</span></div><div class="line">        correlation = <span class="number">1</span> / (<span class="number">1</span> + distance) <span class="comment"># 将范围缩小至0 ~ 1 之间</span></div><div class="line">        <span class="keyword">if</span> correlation &gt; <span class="number">0.60</span>:  <span class="comment"># 根据需求更换相关系数</span></div><div class="line">            print(<span class="string">"第 &#123;&#125; and &#123;&#125;  distance is &#123;&#125;"</span>.format(i + <span class="number">1</span>, j + <span class="number">1</span>, correlation))</div></pre></td></tr></table></figure>
<p>计算结果</p>
<hr>
<blockquote>
<p>第 1 和 2  相关系数是 0.04452359750667854</p>
<p>第 1 和 3  相关系数是 0.8849557522123891</p>
<p>第 1 和 4  相关系数是 0.6666666666666665</p>
<p>第 1 和 5  相关系数是 0.061842918985776124</p>
<p>第 2 和 3  相关系数是 0.051203277009728626</p>
<p>第 2 和 4  相关系数是 0.058823529411764705</p>
<p>第 2 和 5  相关系数是 0.6211180124223604</p>
<p>第 3 和 4  相关系数是 0.7751937984496123</p>
<p>第 3 和 5  相关系数是 0.07246376811594203</p>
<p>第 4 和 5  相关系数是 0.08673026886383348</p>
</blockquote>
<hr>
<p>得出结论，基本和离散图相似。</p>
<p>这样就可以根据需求来判断用户之间的相似度。</p>
<h2 id="皮尔逊相关系数"><a href="#皮尔逊相关系数" class="headerlink" title="皮尔逊相关系数"></a>皮尔逊相关系数</h2><p>皮尔逊相关系数同样也是计算距离的一种方式</p>
<p>通过相关系数可以计算出他们的相关程度。</p>
<h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>皮尔逊相关系数是有一定的适用条件。</p>
<blockquote>
<p>当两个变量的标准差都不为零时，相关系数才有定义，皮尔逊相关系数适用于：<br>(1)、两个变量之间是线性关系，都是连续数据。<br>(2)、两个变量的总体是正态分布，或接近正态的单峰分布。<br>(3)、两个变量的观测值是成对的，每对观测值之间相互独立。</p>
</blockquote>
<p>同样这个算法也是有缺陷的,但数据越少的时候,波动性越大。当数据很少的时候不建议使用。</p>
<p>皮尔逊相关系数公式有四个</p>
<p>公式一：</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/person1.gif" alt=""></p>
<p>公式二：</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/person2.gif" alt=""></p>
<p>公式三：</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/person3.gif" alt=""></p>
<p>公式四：</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/person4.gif" alt=""></p>
<p>相关系数</p>
<ul>
<li>0.8-1.0     极强相关</li>
<li>0.6-0.8     强相关</li>
<li>0.4-0.6     中等程度相关</li>
<li>0.2-0.4     弱相关</li>
<li>0.0-0.2     极弱相关或无相关</li>
</ul>
<p>我们通过第四个公式进行计算</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/person4.gif" alt=""></p>
<h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><p>通过 <code>python</code> 计算出相关系数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf8</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 皮尔孙相关系数计算</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PearsonCorrelationSimilarity</span><span class="params">(vec1, vec2)</span>:</span></div><div class="line">    value = range(len(vec1))</div><div class="line"></div><div class="line">    sum_vec1 = sum([vec1[i] <span class="keyword">for</span> i <span class="keyword">in</span> value])</div><div class="line">    sum_vec2 = sum([vec2[i] <span class="keyword">for</span> i <span class="keyword">in</span> value])</div><div class="line"></div><div class="line">    square_sum_vec1 = sum([pow(vec1[i], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> value])</div><div class="line">    square_sum_vec2 = sum([pow(vec2[i], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> value])</div><div class="line"></div><div class="line">    product = sum([vec1[i] * vec2[i] <span class="keyword">for</span> i <span class="keyword">in</span> value])</div><div class="line"></div><div class="line">    numerator = product - (sum_vec1 * sum_vec2 / len(vec1))</div><div class="line">    dominator = ((square_sum_vec1 - pow(sum_vec1, <span class="number">2</span>) / len(vec1)) * (</div><div class="line">        square_sum_vec2 - pow(sum_vec2, <span class="number">2</span>) / len(vec2))) ** <span class="number">0.5</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> dominator == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    result = numerator / (dominator * <span class="number">1.0</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 五个用户对五个商品的评价</span></div><div class="line">    user1 = [<span class="number">3.3</span>, <span class="number">5.8</span>, <span class="number">3.6</span>, <span class="number">3.4</span>, <span class="number">5.2</span>]</div><div class="line">    user2 = [<span class="number">6.5</span>, <span class="number">2.6</span>, <span class="number">6.3</span>, <span class="number">5.8</span>, <span class="number">3.1</span>]</div><div class="line">    user3 = [<span class="number">5.5</span>, <span class="number">3.2</span>, <span class="number">6.5</span>, <span class="number">4.7</span>, <span class="number">4.4</span>]</div><div class="line">    user4 = [<span class="number">4.4</span>, <span class="number">6.2</span>, <span class="number">2.3</span>, <span class="number">5.1</span>, <span class="number">3.3</span>]</div><div class="line">    user5 = [<span class="number">2.1</span>, <span class="number">5.2</span>, <span class="number">4.2</span>, <span class="number">2.2</span>, <span class="number">4.1</span>]</div><div class="line"></div><div class="line">    userlist = [user1, user2, user3, user4, user5]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(userlist) - <span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(userlist)):</div><div class="line">            result = PearsonCorrelationSimilarity(userlist[i], userlist[j])</div><div class="line">            <span class="keyword">print</span> <span class="string">"user%d 和 user%d 的相关系数是%f"</span> % (i + <span class="number">1</span>, j + <span class="number">1</span>, result)</div></pre></td></tr></table></figure>
<blockquote>
<p>user1 和 user2 的相关系数是0.999774</p>
<p>user1 和 user3 的相关系数是-0.847758</p>
<p>user1 和 user4 的相关系数是-0.841816</p>
<p>user1 和 user5 的相关系数是-0.915237</p>
<p>user2 和 user3 的相关系数是-0.841741</p>
<p>user2 和 user4 的相关系数是-0.835320</p>
<p>user2 和 user5 的相关系数是-0.909975</p>
<p>user3 和 user4 的相关系数是0.998987</p>
<p>user3 和 user5 的相关系数是0.976272</p>
<p>user4 和 user5 的相关系数是0.969782</p>
</blockquote>
<p>通过计算出来的结果可以看出来等到的结果</p>
<h2 id="余弦距离"><a href="#余弦距离" class="headerlink" title="余弦距离"></a>余弦距离</h2><p>余弦相似度用向量空间中两个向量夹角的余弦值作为衡量两个个体间差异的大小。余弦值越接近1，就表明夹角越接近0度，也就是两个向量越相似，这就叫”余弦相似性”。</p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>一般余弦定理这个公式运用与文本分析。</p>
<p>分别采用下列的文本进行</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>A：这里距离北京有多远，火车多长时间</p>
<p>B:北京离这里有多远，坐火车多长时间</p>
<h4 id="对A，B进行分词"><a href="#对A，B进行分词" class="headerlink" title="对A，B进行分词"></a>对A，B进行分词</h4><p>A:这里/距离/北京/有/多远，火车/多长/时间</p>
<p>B:北京/离/这里/有/多远，坐/火车/多长/时间</p>
<h4 id="列出所有的词"><a href="#列出所有的词" class="headerlink" title="列出所有的词"></a>列出所有的词</h4><p>这里 距离 北京 有 多远 火车 多长 时间 离 坐</p>
<h4 id="进行词频统计"><a href="#进行词频统计" class="headerlink" title="进行词频统计"></a>进行词频统计</h4><p>A: 这里(1)距离(1)北京(1)有(1)多远(1)火车(1)多长(1)时间(1)离(0)坐(0)</p>
<p>B: 这里(1)距离(0)北京(1)有(1)多远(1)火车(1)多长(1)时间(1)离(1)坐(1)</p>
<h4 id="计算句子的词频向量"><a href="#计算句子的词频向量" class="headerlink" title="计算句子的词频向量"></a>计算句子的词频向量</h4><p>A (1,1,1,1,1,1,1,1,0,0)</p>
<p>B (1,0,1,1,1,1,1,1,1,1)</p>
<h4 id="通过余弦定理计算相似度"><a href="#通过余弦定理计算相似度" class="headerlink" title="通过余弦定理计算相似度"></a>通过余弦定理计算相似度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="comment"># 余弦定理</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cos</span><span class="params">(v1, v2)</span>:</span></div><div class="line">    l = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(v1)):</div><div class="line">        l += v1[i] * v2[i]</div><div class="line">    v = <span class="number">0.0</span></div><div class="line">    w = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(v1)):</div><div class="line">        v += math.pow(v1[i], <span class="number">2</span>)</div><div class="line">        w += math.pow(v2[i], <span class="number">2</span>)</div><div class="line">    cos = l / (math.sqrt(v) * math.sqrt(w))</div><div class="line">    <span class="keyword">return</span> cos</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    v1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</div><div class="line">    v2 = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</div><div class="line">    l = cos(v1, v2)</div><div class="line">    <span class="keyword">print</span> l</div></pre></td></tr></table></figure>
<p>计算出的相似度为：</p>
<blockquote>
<p>0.824957911384</p>
</blockquote>
<p>说明这两句话基本相等</p>
<p>这是一些基本的相似度计算方法。</p>
]]></content>
      
        
        <tags>
            
            <tag> 推荐系统 </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Reverse Integer(#7)]]></title>
      <url>http://youngxhui.top/2017/08/28/LeetCode-Reverse-Integer-7/</url>
      <content type="html"><![CDATA[<h1 id="Reverse-Integer-7"><a href="#Reverse-Integer-7" class="headerlink" title="Reverse Integer(#7)"></a>Reverse Integer(#7)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>Reverse Integer</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个题可是满满的坑，测试用例个人感觉给的很好，考虑到了一些临界值的情况，提交了六次才通过，或许是代码很垃圾。<del>其实是个人很垃圾。</del></p>
<p>主要是判断反转，要求各个数进行反转，这让我想到了之前的字符串反转的试题(<a href="http://youngxhui.github.io/2017/08/04/LeetCode-Reverse-String-344/" target="_blank" rel="noopener">Reverse String(#344)</a>)。但是这个试题要比之前的考虑的多，因为字符串反转不需要考虑范围，而数字反转就要考虑他的范围。</p>
<ol>
<li>判断正负，如果是负数，因为在后面进行绝对值的时候会无法进行正负判断，从而无法获取到正确的结果。</li>
<li>判断字符取绝对值后是否越界，在这里有个问题 如果使用 <code>Math.abs()</code> 这个方法的话,传入整型则返回整型，如果整型越界，则不变。</li>
<li>判断翻转后是否越界。</li>
</ol>
<p>总的来说就这个三个步骤。</p>
<p>代码中的 <code>f</code> 是为了判断是否为负数，将传入的数转化为 <code>long</code> 类型有助于后期，防止 <code>int</code> 越界。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> f = x &lt; <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> a = x;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        a = a &lt; <span class="number">0</span> ? -a : a;</div><div class="line">        sb.append(a);</div><div class="line">        <span class="keyword">long</span> out = f ? -Long.parseLong(sb.reverse().toString()) : Long.parseLong(sb.reverse().toString());</div><div class="line">        <span class="keyword">if</span> (out &gt;= Integer.MAX_VALUE || out &lt;= Integer.MIN_VALUE) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) out;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Single Number(#136)]]></title>
      <url>http://youngxhui.top/2017/08/27/LeetCode-Single-Number-136/</url>
      <content type="html"><![CDATA[<h1 id="Single-Number-136"><a href="#Single-Number-136" class="headerlink" title="Single Number(#136)"></a>Single Number(#136)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>136</td>
<td>Single Number</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题目要求在给出的数组中，要求找到一个单独的数字。看了一些答案后总结出来了一个运算规律。</p>
<p>按位异或</p>
<blockquote>
<p>N ^ N = 0<br>0 ^ N = N</p>
</blockquote>
<p>通过这个规律，那么只要对数组里面的每个数进行按位异或就好。相同的数字按位异或就会是 0 ， 剩下的那个单独的数字按位异或还是自己本事，就会直到最后的结论。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length;i++) &#123;</div><div class="line">            ans ^= nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>这种方法还适用于字符串中的唯一一个元素。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;;</div><div class="line">        System.out.println(singleChar(chars));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 该程序是判断 数字/字符/字符串。toArrayChar 中的唯一存在的字符</span></div><div class="line">    <span class="comment">// 主要方法位 N ^ 0 = N; N ^ N = N</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">singleChar</span><span class="params">(<span class="keyword">char</span>[] chars)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> aChar : chars) &#123;</div><div class="line">            ans ^= aChar;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>) ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Move Zeroes(#283)]]></title>
      <url>http://youngxhui.top/2017/08/27/LeetCode-Move-Zeroes-283/</url>
      <content type="html"><![CDATA[<h1 id="Move-Zeroes-283"><a href="#Move-Zeroes-283" class="headerlink" title="Move Zeroes(#283)"></a>Move Zeroes(#283)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>283</td>
<td>Move Zeroes</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>该题要求如果数组中含有 <code>0</code> ，就把 <code>0</code> 放置到最后，采用简单的排序手法，只是不是在比较大小，而是判断是否为 <code>0</code> ，如果是 <code>0</code> 就与下一个发生交换。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">int</span> tem = nums[j];</div><div class="line">                    nums[j] = nums[i];</div><div class="line">                    nums[i] = tem;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Judge Route Circle(#657)]]></title>
      <url>http://youngxhui.top/2017/08/16/LeetCode-Judge-Route-Circle-657/</url>
      <content type="html"><![CDATA[<h1 id="Judge-Route-Circle-657"><a href="#Judge-Route-Circle-657" class="headerlink" title="Judge Route Circle(#657)"></a>Judge Route Circle(#657)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>657</td>
<td>Judge Route Circle</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个题先上图</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/leetcode.png" alt=""></p>
<p>终于有一次 <strong>前10%</strong> 了 <del>（也许是人少而已）</del>，总体来说这个题其实很水。</p>
<p>判断机器人是否回到了原处。只要机器人前进和后退，左移和右移走的路一样就肯定在原点。所以只要统计一下就好。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Java 代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeCircle</span><span class="params">(String moves)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> rCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> dCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> uCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">char</span> step[] = moves.toCharArray();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; step.length; i++) &#123;</div><div class="line">            <span class="keyword">switch</span>(step[i]) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'L'</span>:</div><div class="line">                    lCount++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'R'</span>:</div><div class="line">                    rCount++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'U'</span>:</div><div class="line">                    uCount++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:</div><div class="line">                    dCount++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        (lCount == rCount &amp;&amp; uCount == dCount) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Kotlin 代码</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">judgeCircle</span><span class="params">(moves: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">        <span class="keyword">val</span> m = moves.toCharArray()</div><div class="line">        <span class="keyword">var</span> lSum = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> dSum = <span class="number">0</span></div><div class="line">        m.map &#123;</div><div class="line">            <span class="keyword">when</span> (it) &#123;</div><div class="line">                <span class="string">'L'</span> -&gt; lSum += <span class="number">1</span></div><div class="line">                <span class="string">'R'</span> -&gt; lSum -= <span class="number">1</span></div><div class="line">                <span class="string">'D'</span> -&gt; dSum += <span class="number">1</span></div><div class="line">                <span class="string">'U'</span> -&gt; dSum -= <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (lSum == <span class="number">0</span> &amp;&amp; dSum == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Longest Uncommon Subsequence I(#521)]]></title>
      <url>http://youngxhui.top/2017/08/16/LeetCode-Longest-Uncommon-Subsequence-I-521/</url>
      <content type="html"><![CDATA[<h1 id="LeetCode-Longest-Uncommon-Subsequence-I-521"><a href="#LeetCode-Longest-Uncommon-Subsequence-I-521" class="headerlink" title="LeetCode:Longest Uncommon Subsequence I(#521)"></a>LeetCode:Longest Uncommon Subsequence I(#521)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>521</td>
<td>Longest Uncommon Subsequence</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>没读懂题，但是做出来了，而且这个题就是个水题，个人理解就是如果两个字符串一样，就输出 <code>-1</code> 否则输出最长的。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLUSlength</span><span class="params">(String a, String b)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (a.equals(b))&#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> a.length() &gt; b.length() ? a.length() : b.length();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Next Greater Element I(#496)]]></title>
      <url>http://youngxhui.top/2017/08/13/LeetCode-Next-Greater-Element-I-496/</url>
      <content type="html"><![CDATA[<h1 id="Next-Greater-Element-I-496"><a href="#Next-Greater-Element-I-496" class="headerlink" title="Next Greater Element I(#496)"></a>Next Greater Element I(#496)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>496</td>
<td>Next Greater Element I</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>刚刚开始的思路是在第二个数组中寻找第一个数组的元素，如果找到并且后面还有比他大的就返回那个大数，否则就返回 -1 。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] nextGreaterElement(<span class="keyword">int</span>[] findNums, <span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">int</span>[] out = <span class="keyword">new</span> <span class="keyword">int</span>[findNums.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; findNums.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (findNums[i] == nums[j]) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; nums.length - j; k++) &#123;</div><div class="line">                        <span class="keyword">if</span> (j + <span class="number">1</span> &lt; nums.length &amp;&amp; findNums[i] &lt; nums[j + k]) &#123;</div><div class="line">                            out[i] = nums[j + k];</div><div class="line">                            findNums[i] = <span class="number">0</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (findNums[i] != <span class="number">0</span>) &#123;</div><div class="line">                        out[i] = -<span class="number">1</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> out;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个代码在前面的测试数据可以过去，但是当测试数据到了后面的数的时候就 gg 了。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/snipaste_20170813_184225.png" alt=""></p>
<p>然后又又又看大神的代码。</p>
<p>通过 Stack 和 Map 进行操作。</p>
<h1 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] nextGreaterElement(<span class="keyword">int</span>[] findNums, <span class="keyword">int</span>[] nums) &#123;</div><div class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); </div><div class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</div><div class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt; num)</div><div class="line">            map.put(stack.pop(), num);</div><div class="line">        stack.push(num);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; findNums.length; i++)</div><div class="line">        findNums[i] = map.getOrDefault(findNums[i], -<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> findNums;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Nim Game(#292)]]></title>
      <url>http://youngxhui.top/2017/08/13/LeetCode-Nim-Game-292/</url>
      <content type="html"><![CDATA[<h1 id="Nim-Game-292"><a href="#Nim-Game-292" class="headerlink" title="Nim Game(#292)"></a>Nim Game(#292)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>292</td>
<td>Nim Game</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个题是让算几个石头的情况下会赢和会输。参考了一下大神答案，其中有一个很有趣，也很通俗易懂。</p>
<p>巧妙的找到了规律，只要是 <code>4</code> 的倍数，就会输。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> n % <span class="number">4</span> != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Brainteaser </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin 扩展函数/属性]]></title>
      <url>http://youngxhui.top/2017/08/12/Kotlin-%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0-%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>扩展函数和扩展属性在 Java 里面是没有的，这样的话很好的弥补了 Java 的缺陷。所谓扩展方法或者属性是指在原来没有的方法或者属性上进行扩展，不会改变原来的属性和方法。</p>
<h1 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h1><p>声明扩展函数的方法是先写上要扩展的类名，之后在写扩展方法。</p>
<p>对 Book 这个类进行扩展，这个类只有一个方法，在我们不修改 Book 类的前提下对其进行扩展。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">var</span> price: <span class="built_in">Int</span>) &#123;</div><div class="line">    <span class="keyword">val</span> ISBN: <span class="built_in">Int</span> = <span class="number">123456789</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">()</span></span> &#123;</div><div class="line">        println(<span class="string">"Add a book,name is <span class="subst">$name</span>,price is <span class="subst">$price</span>,ISBN is <span class="subst">$ISBN</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> Book.<span class="title">show</span><span class="params">()</span></span> = add()</div></pre></td></tr></table></figure>
<p>这样我们便完成了对 Book 类进行扩展。</p>
<p>在扩展函数中，可以使用原有类的方法，变量。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> book = Book(<span class="string">"红楼梦"</span>, <span class="number">50</span>)</div><div class="line">    book.show()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>扩展是静态解析的</strong><br>扩展不能真正的修改他们所扩展的类。通过定义一个扩展，你并没有在一个类中插入新成员， 仅仅是可以通过该类型的变量用点表达式去调用这个新函数。</p>
</blockquote>
<h1 id="扩展属性"><a href="#扩展属性" class="headerlink" title="扩展属性"></a>扩展属性</h1><p>扩展属性不能初始化器,所以只能是使用显示 <code>get/set</code> 方法进行定义。</p>
<p>任就采用上面的例子。给 <code>Book</code> 添加一个 <code>profit</code> 属性。</p>
<p>像这个样子，我们就定义了这个类的扩展属性</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> Book.profit: <span class="built_in">Int</span></div><div class="line">    <span class="keyword">get</span>() = price - <span class="number">20</span></div></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> book = Book(<span class="string">"红楼梦"</span>, <span class="number">50</span>)</div><div class="line">    book.show()</div><div class="line">    println(<span class="string">"book's profit is <span class="subst">$&#123;book.profit&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多关于扩展函数/方法的例子可以参考官方网站</p>
<p><a href="https://www.kotlincn.net/docs/reference/extensions.html" target="_blank" rel="noopener">kotlin官方文档(中文)</a></p>
<p><a href="https://kotlinlang.org/docs/reference/extensions.html" target="_blank" rel="noopener">kotlin官方文档(英文)</a></p>
]]></content>
      
        
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin初步学习]]></title>
      <url>http://youngxhui.top/2017/08/11/kotlin-%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>最近项目逐渐使用 <code>Kotlin</code> 代替 <code>Java</code> 。</p>
<h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>关于 <code>Kotlin</code> 的最大的感受就是：代码少写了很多。</p>
<h1 id="相遇"><a href="#相遇" class="headerlink" title="相遇"></a>相遇</h1><p>最开始知道这个语言是在使用 <code>IDEA</code> 的时候，当时只是知道，并没有过多的关心，也并没有去了解，更不要说是使用了。直到今年的 <strong>Google I/O</strong> 提出来 <code>Kotlin</code> 被上升到 <code>Android</code> 开发的一级开发语言。整个互联网沸腾了一把，大家纷纷百度 <code>Kotlin</code> 是什么？当然也包括我。</p>
<h1 id="相识"><a href="#相识" class="headerlink" title="相识"></a>相识</h1><p><code>Kotlin</code> 的学习使我感觉到了欣喜，为什么这么说呢？语法简洁，和 <code>Java</code> 基本兼容。也就是 <code>Kotlin</code> 一出生便是站在 <code>Java</code> 的肩膀上。很好的融入了 <code>Java</code> 生态，基本上说 <code>Java</code> 能做的 <code>Kotlin</code> 都能做，而且在代码方面更加简洁高效。</p>
<p>从 <code>Kotlin</code> 诞生开始，便有了 <code>JetBrains</code> 的编译器支持，毕竟是自己家的语言，而且 <code>IDEA</code> 也一直宣传做 <code>Capable and Emic IDE rgonofor JVM</code> ，而且目前还有了  <code>Google</code> 的支持。前两天 <code>Jake Wharton</code>  加入了 <code>Google</code> 的 <code>Android Formwork</code> 的 <code>Kotlin</code> 团队。 就当前情况看来 <code>Kotlin</code> 会有一个不错的发展。</p>
<h1 id="相遇-1"><a href="#相遇-1" class="headerlink" title="相遇"></a>相遇</h1><p>前面说了 <code>Kotlin</code> 从一诞生就有强大的编译器支持。刚刚开始不会 <code>Kotlin</code> 的时候，全靠 <code>IDEA</code> 的 <code>Java</code> 转 <code>Kotlin</code> </p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/javatokotlin.png" alt=""></p>
<p>通过对比 <code>Java</code> 和 <code>Kotlin</code> 的语法，也就慢慢的掌握了 <code>Kotlin</code> 的语法规则。</p>
<p>后来开始使用 <code>Kotlin</code> 写了一下 <code>struts2</code>,表示完全兼容。</p>
<p>尝试用 Kotlin 写了一下 <code>SpringMVC 4</code> 应该是不兼容或者是我的打开方式不对， 在 <code>Controller</code> 发生错误，不过其他层并没有错误。好的是 <code>Spring 5</code> 已经支持 <code>Kotlin</code> 。 </p>
<p>在 Android 方面(并没有使用 Anko)，只是简单的使用了扩展。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'Kotlin-android-extensions'</span></div></pre></td></tr></table></figure>
<p>再也不用写 <code>findViewById()</code>,直接用控件 <code>id</code> 就可以完成操作。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>慢慢尝试一些 <strong>黑魔法</strong> 😝</p>
<p>待补充(毕竟我也才开始慢慢学习)</p>
<h1 id="学习资源推荐"><a href="#学习资源推荐" class="headerlink" title="学习资源推荐"></a>学习资源推荐</h1><p><a href="http://Kotlinlang.org/docs/reference/" target="_blank" rel="noopener">官方文档(英文)</a></p>
<p><a href="https://www.Kotlincn.net/docs/reference/" target="_blank" rel="noopener">官方文档(中文)</a></p>
<p><a href="http://ice1000.org/" target="_blank" rel="noopener">冰封博客</a></p>
<p><a href="https://Kotliner.cn" target="_blank" rel="noopener">Kotlin 社区</a></p>
]]></content>
      
        
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Island Perimeter(#463)]]></title>
      <url>http://youngxhui.top/2017/08/08/LeetCode-Island-Perimeter-463/</url>
      <content type="html"><![CDATA[<h1 id="Island-Perimeter-463"><a href="#Island-Perimeter-463" class="headerlink" title="Island Perimeter(#463)"></a>Island Perimeter(#463)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>463</td>
<td>Island Perimeter</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>思考了很久无解😥，看了一下大神的解题，不得不说很巧妙。</p>
<p>首先遍历地图，如果这个方格是选中的，那么边数加 4 。然后分别看该方块的上和左是否被选中或者越界。如果是那么在原来的情况下减 2 。这个推算一下就知道了。 只能说这个规律找的很巧妙。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j ++)&#123;</div><div class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</div><div class="line">                    p += <span class="number">4</span>;</div><div class="line">                    <span class="keyword">if</span>(i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i - <span class="number">1</span>][j] == <span class="number">1</span>)&#123;</div><div class="line">                        p -= <span class="number">2</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i][j - <span class="number">1</span>] == <span class="number">1</span>)&#123;</div><div class="line">                        p -= <span class="number">2</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Fizz Buzz(#412)]]></title>
      <url>http://youngxhui.top/2017/08/04/LeetCode-Fizz-Buzz-412/</url>
      <content type="html"><![CDATA[<h1 id="Fizz-Buzz-412"><a href="#Fizz-Buzz-412" class="headerlink" title="Fizz Buzz(#412)"></a>Fizz Buzz(#412)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>412</td>
<td>Fizz Buzz</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>该题就是 当是三的倍数 输出 <code>Fizz</code> ，五的倍数输出 <code>Buzz</code> ，十五的倍数是 <code>Fizz Buzz</code>。 这题好水，唯一要注意的是先判断 15 在判断其他。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fizzBuzz</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; i ++ )&#123;</div><div class="line">            <span class="keyword">if</span>(i % <span class="number">15</span> == <span class="number">0</span>)&#123;</div><div class="line">                list.add(<span class="string">"FizzBuzz"</span>);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>)&#123;</div><div class="line">                list.add(<span class="string">"Fizz"</span>);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)&#123;</div><div class="line">                list.add(<span class="string">"Buzz"</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                list.add(String.valueOf(i));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Reverse String(#344)]]></title>
      <url>http://youngxhui.top/2017/08/04/LeetCode-Reverse-String-344/</url>
      <content type="html"><![CDATA[<h1 id="Reverse-String-344"><a href="#Reverse-String-344" class="headerlink" title="Reverse String(#344)"></a>Reverse String(#344)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>344</td>
<td>Reverse String</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>解题思路请看 <a href="http://youngxhui.github.io/2017/08/02/LeetCode-Reverse-Words-in-a-String-III-557/" target="_blank" rel="noopener">#557 Reverse Words In a String III</a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> StringBuilder(s).reverse().toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Merge Two Binary Trees(#617)]]></title>
      <url>http://youngxhui.top/2017/08/04/LeetCode-Merge-Two-Binary-Trees-617/</url>
      <content type="html"><![CDATA[<h1 id="Merge-Two-Binary-Trees-617"><a href="#Merge-Two-Binary-Trees-617" class="headerlink" title="Merge Two Binary Trees(#617)"></a>Merge Two Binary Trees(#617)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>617</td>
<td>Merge Two Binary Trees</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>试题已经给出了 TreeNode 的数据结构。就是将数据的每一项都加起来。通过递归可以完成。</p>
<p>需要注意的是 <code>t1</code> 或者 <code>t2</code> 可能为空。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (t1 == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> t2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (t2 == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> t1;</div><div class="line">        &#125;</div><div class="line">        t1.val += t2.val;</div><div class="line">        t1.left = mergeTrees(t1.left, t2.left);</div><div class="line">        t1.right = mergeTrees(t1.right, t2.right);</div><div class="line">        <span class="keyword">return</span> t1;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Reverse Words in a String III(#557)]]></title>
      <url>http://youngxhui.top/2017/08/02/LeetCode-Reverse-Words-in-a-String-III-557/</url>
      <content type="html"><![CDATA[<h1 id="Words-in-a-String-III-557"><a href="#Words-in-a-String-III-557" class="headerlink" title="Words in a String III(#557)"></a>Words in a String III(#557)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>557</td>
<td>Words in a String III</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个题是要将给出的句子中的每个单词进行反转，这个反转的方法在  <code>StringBuilder/StringBuffer</code> 都用提供。所以整个题的难度会化简的很小。关键在知道不知道有这个方法。</p>
<p>首先对字符串进行分割，分割为每个单词，在对么个单词进行反转。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function">fun <span class="title">selfDividingNumbers</span><span class="params">(left: Int, right: Int)</span>: List&lt;Int&gt; </span>&#123;</div><div class="line">        var result = ArrayList&lt;Int&gt;()</div><div class="line">        <span class="keyword">for</span> (i in left..right) &#123;</div><div class="line">            var list = ArrayList&lt;Int&gt;()</div><div class="line">            val arrayList = foo(i, list)</div><div class="line">            var sum = <span class="number">0</span></div><div class="line">            arrayList.map &#123;</div><div class="line">                <span class="keyword">if</span> (it != <span class="number">0</span> &amp;&amp; i % it == <span class="number">0</span>) &#123;</div><div class="line">                    sum += <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (sum == arrayList.size) &#123;</div><div class="line">                result.add(i)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function">fun <span class="title">foo</span><span class="params">(num: Int, list: ArrayList&lt;Int&gt;)</span>: ArrayList&lt;Int&gt; </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((num / <span class="number">10</span> == <span class="number">0</span>) and (num % <span class="number">10</span> == <span class="number">0</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> list</div><div class="line">        &#125;</div><div class="line">        list.add(num % <span class="number">10</span>)</div><div class="line">        val nums = num / <span class="number">10</span></div><div class="line">        foo(nums, list)</div><div class="line">        <span class="keyword">return</span> list</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Distribute Candies(#575)]]></title>
      <url>http://youngxhui.top/2017/08/02/LeetCode-Distribute-Candies-575/</url>
      <content type="html"><![CDATA[<h1 id="Distribute-Candies-575"><a href="#Distribute-Candies-575" class="headerlink" title="Distribute Candies(#575)"></a>Distribute Candies(#575)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>575</td>
<td>Distribute Candies</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个题就是看分蛋糕🍰，简单的说就是 种类大于上限的时候，只能拿最多，如果种类少于上限的话，那就是种类了。就是这样</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">distributeCandies</span><span class="params">(<span class="keyword">int</span>[] candies)</span> </span>&#123;</div><div class="line">       List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> candy : candies) &#123;</div><div class="line">            list.add(candy);</div><div class="line">        &#125;</div><div class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(list);</div><div class="line">        <span class="keyword">return</span> set.size() &gt; candies.length/<span class="number">2</span> ? candies.length/<span class="number">2</span> : set.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Number Complement(#476)]]></title>
      <url>http://youngxhui.top/2017/08/02/LeetCode-Number-Complement-476/</url>
      <content type="html"><![CDATA[<h1 id="Number-Complement-476"><a href="#Number-Complement-476" class="headerlink" title="Number Complement(#476)"></a>Number Complement(#476)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>476</td>
<td>Number Complement</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>没思路</p>
<p>为什么大神说这个显而易见的呢？严重怀疑我的智商。<br><code>Math.pow()</code> 是用来将二进制转化为十进制。但是为什么是 <code>i&lt;num</code> ？ 因为i的值为 1 3 7 15 … 而原来的数的二进制 <code>101</code> 和 反码 <code>010</code> 相加为 <code>111</code> 为 7。 所以用相加的值减去原来的值就是 <strong>反码</strong> 的值</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码为 <a href="https://discuss.leetcode.com/topic/75605/java-very-simple-code-and-self-evident-explanation" target="_blank" rel="noopener">Description</a> 中的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findComplement</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; num)&#123;</div><div class="line">            i += Math.pow(<span class="number">2</span>, j);</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> i - num;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Keyboard Row(#500)]]></title>
      <url>http://youngxhui.top/2017/08/02/LeetCode-Keyboard-Row-500/</url>
      <content type="html"><![CDATA[<h1 id="KeyBoard-Row-500"><a href="#KeyBoard-Row-500" class="headerlink" title="KeyBoard Row(#500)"></a>KeyBoard Row(#500)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>500</td>
<td>KeyBoard Row</td>
<td>Easy  </td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>他的要是是检查输入的字符串是否是键盘的同一行。首先想到的是正则匹配。匹配是否是同一行，不是的话 <code>break</code>。是的话一直匹配。匹配结束的时候计算匹配数是否和单词长度一样。如果一样，表示匹配成功。其中正则表达式不太会写，而且运用了一个集合转换为数组的方法。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String[] findWords(String[] words) &#123;</div><div class="line">        Set&lt;String&gt; st = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        String[] key = <span class="keyword">new</span> String[]&#123;<span class="string">"[qwertyuiopQWERTYUIOP]"</span>, <span class="string">"[ASDFGHJKLasdfghjkl]"</span>, <span class="string">"[zxcvbnmZXCVBNM]"</span>&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</div><div class="line">            <span class="keyword">char</span>[] c = words[i].toCharArray();</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; key.length; k++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c.length; j++) &#123;</div><div class="line">                    <span class="keyword">if</span> (Pattern.matches(key[k], String.valueOf(c[j]))) &#123;</div><div class="line">                        count++;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (count == c.length) &#123;</div><div class="line">                st.add(words[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        String[] str = st.toArray(<span class="keyword">new</span> String[st.size()]);</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Two Sum (#1)]]></title>
      <url>http://youngxhui.top/2017/08/01/LeetCode-Two-Sum-1/</url>
      <content type="html"><![CDATA[<h1 id="Two-Sum-1"><a href="#Two-Sum-1" class="headerlink" title="Two Sum(#1)"></a>Two Sum(#1)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Two Sum</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题目的意思是给出一个数组 <code>nums</code> ，和一个 <code>target</code> 要求用数组内的数相加完成 <code>target</code>。</p>
<p>这个题相对用了 暴力求解 方法不是很优。排名为 25.45% 时间复杂度有点大。看来还是要后期优化一下或者参考一下大神做法。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">int</span>[] sum=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j&lt;nums.length;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(target == nums[i] + nums [j])&#123;</div><div class="line">                    sum[<span class="number">0</span>] = i;</div><div class="line">                    sum[<span class="number">1</span>] = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode:Array Partition I(#561)]]></title>
      <url>http://youngxhui.top/2017/08/01/LeetCode-Array-Partition-I-561/</url>
      <content type="html"><![CDATA[<h1 id="Array-Partition-561"><a href="#Array-Partition-561" class="headerlink" title="Array Partition(#561)"></a>Array Partition(#561)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>561</td>
<td>Array Partition I</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>该题相对简单，也比较水，差评达到了 <code>222</code>,好评才 <code>81</code>。解决思路也好理解。通过排序数组，将奇数位进行相加即可。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length; i+=<span class="number">2</span>)&#123;</div><div class="line">            sum += nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hamming Distance 问题]]></title>
      <url>http://youngxhui.top/2017/08/01/Hamming-Distance-%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过了好久，终于开始学习算法，刷算法题了。从<a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="noopener">LeetCode</a>上开始刷题。也是完成之前立下的<strong>flag</strong>。  </p>
<h1 id="Hamming-Distance-461"><a href="#Hamming-Distance-461" class="headerlink" title="Hamming Distance(#461)"></a>Hamming Distance(#461)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>461</td>
<td>Hamming Distance</td>
<td>Easy</td>
</tr>
</tbody>
</table>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这个试题 主要是计算 两个数源码中有几位不相同。</p>
<p>对于这个问题，首先我想到的是用按位异或(^)，按位异或后再用递归移位来计算。这仅仅是一个想法。但是思考了好久都没有写出来。无奈之下只好到 Discuss 看一下。</p>
<p>原来还有这个奇淫技巧。。。。。</p>
<p><code>Java</code> 是提供了 <code>API</code> 来统计原码中的 1 的。这个方法叫做 <code>binCount()</code> 。 这个题就这样解决了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Integer.bitCount(x ^ y);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Total-Hamming-Distance-477"><a href="#Total-Hamming-Distance-477" class="headerlink" title="Total Hamming Distance(#477)"></a>Total Hamming Distance(#477)</h1><table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>等级</th>
</tr>
</thead>
<tbody>
<tr>
<td>477</td>
<td>Total Hamming Distance</td>
<td>medium</td>
</tr>
</tbody>
</table>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>该题只不过是把给出的数组中的每两个数的 <code>Hamming Distance</code> 相加。</p>
<p>还是使用 <code>#461</code> 的方法。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalHammingDistance</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.length-<span class="number">1</span>;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;nums.length;j++)&#123; </div><div class="line">                sum += Integer.bitCount(nums[i] ^ nums[i + <span class="number">1</span>]);</div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim 基础学习]]></title>
      <url>http://youngxhui.top/2017/07/23/vim-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><p>默认为命令模式，要进入编辑模式 按下 <code>a</code> <code>i</code> <code>o</code></p>
<p>a 在光标之后进行插入</p>
<p>i 在光标之前进行插入</p>
<p>o 换行插入</p>
<p>I 在行首进行编辑</p>
<p>A 在行末进行编辑</p>
<p>O 向上插入</p>
<h1 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h1><p>按下 <code>ESC</code> 退回到命令模式</p>
<h1 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h1><p><code>:</code> 进入末行模式<br>末行模式按下 <code>ESC</code> 回到编辑模式</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>wq</td>
<td>保存退出</td>
</tr>
<tr>
<td>x</td>
<td>保存退出</td>
</tr>
<tr>
<td>w</td>
<td>保存</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
</tbody>
</table>
<h1 id="移动定位"><a href="#移动定位" class="headerlink" title="移动定位"></a>移动定位</h1><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>h</td>
<td>左移</td>
</tr>
<tr>
<td>j</td>
<td>下移</td>
</tr>
<tr>
<td>k</td>
<td>上移</td>
</tr>
<tr>
<td>l</td>
<td>右移</td>
</tr>
<tr>
<td>G</td>
<td>直接移动到末尾</td>
</tr>
<tr>
<td>行号+G</td>
<td>快速定位行</td>
</tr>
<tr>
<td>gg</td>
<td>快速回到第一行</td>
</tr>
<tr>
<td>w</td>
<td>下一个单词</td>
</tr>
<tr>
<td>q!</td>
<td>不保存退出</td>
</tr>
</tbody>
</table>
<h1 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h1><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>dd</td>
<td>剪切/删除一行</td>
</tr>
<tr>
<td>num-dd</td>
<td>剪切/删除几行 从当前光标开始</td>
</tr>
<tr>
<td>D</td>
<td>删除光标之后</td>
</tr>
<tr>
<td>d0</td>
<td>删除光标之前的D</td>
</tr>
<tr>
<td>x</td>
<td>删除后面的 </td>
</tr>
<tr>
<td>X</td>
<td>删除前面的</td>
</tr>
<tr>
<td>u</td>
<td>撤销</td>
</tr>
<tr>
<td>ctrl +r</td>
<td>返撤销</td>
</tr>
<tr>
<td>yy</td>
<td>复制</td>
</tr>
<tr>
<td>mun yy</td>
<td>复制几行</td>
</tr>
<tr>
<td>r</td>
<td>进行替换</td>
</tr>
</tbody>
</table>
<h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><p>末行模式</p>
<p>将5，15的main替换成MAIN</p>
<p>% 全部<br>5,15s/main/MAIN/g<br>%s///g</p>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>命令模式</p>
<p>/ +word</p>
<p>n 下一个<br>N 上一个</p>
]]></content>
      
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 实现微信打飞机]]></title>
      <url>http://youngxhui.top/2017/06/22/python-%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%89%93%E9%A3%9E%E6%9C%BA/</url>
      <content type="html"><![CDATA[<h1 id="微信打飞机-python-实现"><a href="#微信打飞机-python-实现" class="headerlink" title="微信打飞机 python 实现"></a>微信打飞机 python 实现</h1><h1 id="所用技术和软件"><a href="#所用技术和软件" class="headerlink" title="所用技术和软件"></a>所用技术和软件</h1><p>python 2.7</p>
<p>pygame 1.9.3</p>
<p>pyCharm</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>安装好 pygame 在第一次使用 pygame 的时候，pyCharm 会自动 install pygame。</li>
<li>下载好使用的素材。</li>
</ol>
<h1 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h1><h2 id="初始化-pygame"><a href="#初始化-pygame" class="headerlink" title="初始化 pygame"></a>初始化 pygame</h2><p>首先要初始化 pygame ，之后设定一些基本的要点，比如窗口大小（尽量避免魔法数字），窗口标题以及背景图像。pygame 通过加载图片，最后返回一个 surface 对象，我们不需要关系图片的格式。但是通过 <code>convert()</code> 这个函数，会使我们的图片转换效率提高。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pygame</div><div class="line"></div><div class="line">WIDTH = <span class="number">480</span></div><div class="line">HEIGHT = <span class="number">800</span></div><div class="line"></div><div class="line">pygame.init()</div><div class="line"></div><div class="line">screen = pygame.display.set_mode((WIDTH, HEIGHT))</div><div class="line"></div><div class="line">pygame.display.set_caption(<span class="string">'飞机大战'</span>)</div><div class="line"></div><div class="line">background = pygame.image.load(<span class="string">'resources/image/background.png'</span>).convert()</div><div class="line"></div><div class="line">screen.fill(<span class="number">0</span>)</div><div class="line">screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))</div></pre></td></tr></table></figure>
<p>默认图片左上角为原点 (0,0)。</p>
<h2 id="显示窗口"><a href="#显示窗口" class="headerlink" title="显示窗口"></a>显示窗口</h2><p>如果我们这样设定，当我们运行的时候，窗口会一闪而过，并不会出现我们想象的画面。因为窗口只是运行一下就会关闭，所以我们要写一个循环，使窗口一直保持出现。当然如果我们简单的写一个 while True那么我们的程序就出现了死循环，卡死。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/flyerroe.png" alt=""></p>
<p>所以还需要写个退出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    screen.fill(<span class="number">0</span>)</div><div class="line">    screen.blit(background, (<span class="number">0</span>, <span class="number">0</span>))</div><div class="line"></div><div class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</div><div class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</div><div class="line">            pygame.quit()</div><div class="line">            exit()</div></pre></td></tr></table></figure>
<h2 id="显示飞机"><a href="#显示飞机" class="headerlink" title="显示飞机"></a>显示飞机</h2><p>首先我们要初始化我们的主角飞机</p>
<p>仍旧需要加载我们需要的资源，我们的资源文件里已经准备好各种各样的飞机，但是他们都在一张切图上。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/shoot.png" alt=""></p>
<p>同时我们的资源文件里还有一个叫做 <code>shoot.pack</code> 的文件，里面记录了每个图片所在的位置。</p>
<p>我们通过下面的代码加载资源图片，并且获得我们需要的主角飞机。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plane_img = pygame.image.load(<span class="string">'resources/image/shoot.png'</span>)</div><div class="line"></div><div class="line">player = plane_img.subsurface(pygame.Rect(<span class="number">0</span>, <span class="number">99</span>, <span class="number">102</span>, <span class="number">126</span>))</div></pre></td></tr></table></figure>
<p>将 player 显示在屏幕上，并且刷新屏幕</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">screen.blit(player, [<span class="number">100</span>, <span class="number">400</span>])</div><div class="line"></div><div class="line">pygame.display.update()</div></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/flyplayer.png" alt=""></p>
<h2 id="让飞机-“飞”-起来"><a href="#让飞机-“飞”-起来" class="headerlink" title="让飞机 “飞” 起来"></a>让飞机 “飞” 起来</h2><p>飞机已经出现在我们的屏幕上了，现在需要让飞机动起来让他可以上下左右的移动。</p>
<p>首先要获取键盘事件，获取键盘上什么按键被按下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">key_pressed = pygame.key.get_pressed()</div></pre></td></tr></table></figure>
<p>通过 <code>key_pressed</code> 获取当前的键盘按键。并进行判断，这里写了四个函数进行对 <code>player</code> 移动。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> key_pressed[pygame.K_w] <span class="keyword">or</span> key_pressed[pygame.K_UP]:</div><div class="line">    player.moveUp()</div><div class="line"><span class="keyword">if</span> key_pressed[pygame.K_s] <span class="keyword">or</span> key_pressed[pygame.K_DOWN]:</div><div class="line">    player.moveDown()</div><div class="line"><span class="keyword">if</span> key_pressed[pygame.K_a] <span class="keyword">or</span> key_pressed[pygame.K_LEFT]:</div><div class="line">    player.moveLeft()</div><div class="line"><span class="keyword">if</span> key_pressed[pygame.K_d] <span class="keyword">or</span> key_pressed[pygame.K_RIGHT]:</div><div class="line">    player.moveRight()</div></pre></td></tr></table></figure>
<p>下一步就是完善这四个方法。</p>
<p>简单的说就是按下方向键的时候(w,a,s,d)飞机向四周移动，但是不能移动离开屏幕。</p>
<p>此时我们就应该把我们的飞机形成一个类，类里面有控制飞机的方法。</p>
<p>这里写类比较麻烦一点</p>
<h3 id="Player的出现"><a href="#Player的出现" class="headerlink" title="Player的出现"></a>Player的出现</h3><p>首先要明确一点，这个类需要什么。</p>
<p>我们之前对 <code>player</code> 有什么操作？定义了他的图片和他出现的位置。所以我们的构造方法就要初始化这些值。<br>所有的这些对象，我们在 <code>pygame</code> 里叫做精灵(sprite)，这个概念也在其他游戏开发中使用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span><span class="params">(pygame.sprite.Sprite)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, plane_img, player_rect, player_position)</span>:</span></div><div class="line">        pygame.sprite.Sprite.__init__(self)</div><div class="line">        self.img = plane_img.subsurface(player_rect)</div><div class="line">        self.rect = player_rect</div><div class="line">        self.rect.topleft = player_position</div></pre></td></tr></table></figure>
<p>简单的说就是获取飞机的图片，初始化飞机的矩形区域。<code>rect</code> 该属性会获得四个值。分别是左上角 <code>x</code> ,<code>y</code> 坐标，矩形的宽度。<code>topleft</code> 初始化飞机的左上角坐标，也就是飞机出现的位置。如下图所示。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/surfaceposition.jpg" alt=""></p>
<h3 id="player的控制"><a href="#player的控制" class="headerlink" title="player的控制"></a>player的控制</h3><p>当飞机出现了，我们就应该实现我们在循环里写的方法。我们首先要判断它还在不在屏幕内，不能让飞机飞出屏幕。可以通过 <code>rect.top</code>,<code>rect.bottom</code>,<code>rect.left</code>,<code>rect.right</code>四个方法获取飞机图片的上下左右四个边界值。</p>
<p>这样我们就能对飞机进行判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveUp</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.rect.top &lt;= <span class="number">0</span>:</div><div class="line">        self.rect.top = <span class="number">0</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.rect.top -= self.move</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveDown</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.rect.bottom &gt;= HEIGHT:</div><div class="line">        self.rect.bottom = HEIGHT</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.rect.bottom += self.move</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveLeft</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.rect.left &lt;= <span class="number">0</span>:</div><div class="line">        self.rect.left = <span class="number">0</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.rect.left -= self.move</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveRight</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.rect.right &gt;= WIDTH:</div><div class="line">        self.rect.right = WIDTH</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.rect.right += self.move</div></pre></td></tr></table></figure>
<p>这里的 <code>move</code> 是我们对飞机的移动的位移定义的常量。</p>
<h2 id="让子弹飞"><a href="#让子弹飞" class="headerlink" title="让子弹飞"></a>让子弹飞</h2><p>子弹要沿着发射方向射出去。可以在屏幕上一直移动，直到移出屏幕。<br>我们只要有定义一个子弹对象，让这个对象显示在屏幕上就可以。<br>先定义飞机子弹类，基本和定义 <code>player</code> 一样，获得图片，裁剪图片，设置图片初始位置，在屏幕上显示图片<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span><span class="params">(pygame.sprite.Sprite)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, bullet_image, bullet_position)</span>:</span></div><div class="line">        pygame.sprite.Sprite.__init__(self)</div><div class="line">        self.image = bullet_image</div><div class="line">        self.rect = self.image.get_rect()</div><div class="line">        self.rect.midbottom = bullet_position</div><div class="line"></div><div class="line"></div><div class="line">        </div><div class="line"><span class="comment"># 省略其他代码</span></div><div class="line"></div><div class="line"><span class="comment"># 加载子弹图片</span></div><div class="line">bullet_rect = pygame.Rect(<span class="number">69</span>, <span class="number">78</span>, <span class="number">9</span>, <span class="number">21</span>)</div><div class="line">bullet_img = plane_img.subsurface(bullet_rect)</div><div class="line"></div><div class="line"><span class="comment"># 省略其他代码</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"></div><div class="line">    <span class="comment"># 省略其他代码</span></div><div class="line">    </div><div class="line">    screen.blit(bullet.img, bullet.rect)</div><div class="line">    </div><div class="line">    <span class="comment"># 省略其他代码</span></div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/bulletShow.jpg" alt=""></p>
<p>下一步就是让飞机的子弹跟随飞机。<br>我们需要在 Player 类里面添加方法。<br>首先我们规定，按下空格发射子弹。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> key_pressed[pygame.K_SPACE]:</div><div class="line">    player.shoot()</div></pre></td></tr></table></figure></p>
<p>完善shoot方法。子弹类已经有了，我们每次只要在按下空格的时候创建一个对象就好。<br>首先要每次传入一个子弹的图像，然后还有出现位置，这样子弹才能跟随飞机。<br>定义一个<code>pygame.sprite.Group()</code> 来存放精灵组。这样我们就能把我们的子弹都放进去。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shoot</span><span class="params">(self, bullet_img)</span>:</span></div><div class="line">   bullet = Bullet(bullet_img, self.rect.midtop)</div><div class="line">   self.bullets.add(bullet)</div></pre></td></tr></table></figure>
<p>每次按下空格的时候传入一个子弹图片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> key_pressed[pygame.K_SPACE]:</div><div class="line">    player.shoot(bullet_img)</div></pre></td></tr></table></figure>
<p>最后我们只需要在屏幕上进行子弹的绘制即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">player.bullets.draw(screen)</div></pre></td></tr></table></figure>
<p>这样我们的子弹就会跟随飞机出现。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/bulletShow2.jpg" alt=""></p>
<p>下一步就是让子弹在屏幕上移动。</p>
<p>创建移动的方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self)</span>:</span></div><div class="line">    self.rect.top -= self.move</div></pre></td></tr></table></figure>
<p>因为我们的子弹在 bullets 里，所以我们仅需要一个循环，遍历每个子弹，之后移动即可。当子弹移出屏幕的时候我们只要在 <code>bullets</code> 中移出就可以。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">for</span> bullet <span class="keyword">in</span> player.bullets:</div><div class="line">    bullet.bulletMove()</div><div class="line">    <span class="keyword">if</span> bullet.rect.bottom &lt; <span class="number">0</span>:</div><div class="line">        player.bullets.remove(bullet)</div></pre></td></tr></table></figure>
<p>结果<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/playerflyshoot.gif" alt=""></p>
<p>这个和我们的预期还是有差别的，频率太快了。</p>
<p>关于pygame 的键盘重复事件 官方好像并没有这个设置。那么我们只能在添加一个计数器，通过计算器的数值来判断子弹是否发射。这里的数值是多次测试后，自己感觉一个比较满意的频率。可以自己调整。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 省略其他代码</span></div><div class="line"></div><div class="line"><span class="comment"># 子弹频率</span></div><div class="line">SHOOT_PC = <span class="number">0</span></div></pre></td></tr></table></figure>
<p>在键盘事件中我们需要判断频率。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> key_pressed[pygame.K_SPACE]:</div><div class="line">    SHOOT_PC = SHOOT_PC + <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> SHOOT_PC % <span class="number">400</span> == <span class="number">0</span>:</div><div class="line">        player.shoot(bullet_img)</div></pre></td></tr></table></figure>
<p>player 的飞机就算基本绘制好了</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/playerflyshoot2.gif" alt=""></p>
<h2 id="绘制敌机"><a href="#绘制敌机" class="headerlink" title="绘制敌机"></a>绘制敌机</h2><p>下一步就是绘制敌机。敌机是从屏幕上方移动到屏幕下方。我们任就需要一个类来设置敌机。设置类任就和我们前面的差不多，加载资源，设置 <code>rect</code>，设置位置。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 加载敌机图片</span></div><div class="line"></div><div class="line">enemy_rect = pygame.Rect(<span class="number">267</span>, <span class="number">347</span>, <span class="number">57</span>, <span class="number">51</span>)</div><div class="line">enemy_img = plane_img.subsurface(enemy_rect)</div><div class="line">enemy_position = [<span class="number">200</span>, <span class="number">200</span>]</div><div class="line">enemy = Enemy(enemy_img, enemy_position)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 敌机类</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Enemy</span><span class="params">(pygame.sprite.Sprite)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, enemy_img, enemy_position)</span>:</span></div><div class="line">        pygame.sprite.Sprite.__init__(self)</div><div class="line">        self.image = enemy_img</div><div class="line">        self.rect = self.image.get_rect()</div><div class="line">        self.rect.topleft = enemy_position</div></pre></td></tr></table></figure>
<p>最后在屏幕显示出来</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">screen.blit(enemy_img, enemy_rect)</div></pre></td></tr></table></figure>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/enemy.jpg" alt=""></p>
<p>现在我们就应该想想敌机的特点了，其实他和子弹的特点基本一直，只不过方向不一样而已。还有一点是敌机是随机生成的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 敌机计数器</span></div><div class="line">EnEMY_PC = <span class="number">0</span></div><div class="line"><span class="comment"># 省略代码</span></div><div class="line">enemy_position = [random.randint(<span class="number">0</span>, WIDTH - enemy_rect.width), <span class="number">0</span>]</div><div class="line">        enemy = Enemy(enemy_img, enemy_position)</div><div class="line">        enemies.add(enemy)</div></pre></td></tr></table></figure>
<p>我们随机在顶部生成飞机。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/enemyshow.gif" alt=""></p>
<p>这个方式的情况和子弹其实差不多，我们应该给出现敌机确定一个频率。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if EnEMY_PC % 500 == 0:</div><div class="line">    enemy_position = [random.randint(0, WIDTH - enemy_rect.width), 0]</div><div class="line">    enemy = Enemy(enemy_img, enemy_position)</div><div class="line">    enemies.add(enemy)</div><div class="line"></div><div class="line">EnEMY_PC = EnEMY_PC + 1</div></pre></td></tr></table></figure>
<p>这样的话出现情况就变得缓慢。下一步实现敌机的移动。敌机的移动原理和子弹的移动其实也是一样的。不多解释</p>
<p>移动方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">enemyMove</span><span class="params">(self)</span>:</span></div><div class="line">    self.rect.top += self.move</div></pre></td></tr></table></figure></p>
<p>移动实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> enemy <span class="keyword">in</span> enemies:</div><div class="line">       enemy.enemyMove()</div><div class="line">       <span class="keyword">if</span> enemy.rect.top &gt; HEIGHT:</div><div class="line">           enemies.remove(enemy)</div><div class="line"></div><div class="line">   enemies.draw(screen)</div></pre></td></tr></table></figure></p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/enemyMove.gif" alt=""></p>
<h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><p>飞机和敌机还有子弹都有了，我们现在需要进行完成碰撞检测。有下面几种场景。</p>
<ol>
<li>敌机和玩家碰撞在一起</li>
<li>子弹和敌机碰撞在一起</li>
</ol>
<p>无论是那种情况的碰撞，其实就是两张图片有了交集。<br>如图<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/penz.jpg" alt=""><br>pygame 给我们提供了碰撞检测的方法。首先两个对象必须是 <code>sprite</code> 。通过 <code>pygame.sprite.collide_rect()</code> 进行碰撞检测。</p>
<p>我们先进行一个测试<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> pygame.sprite.collide_rect(enemy, player):</div><div class="line">    <span class="keyword">print</span> <span class="string">'检测成功'</span></div></pre></td></tr></table></figure></p>
<p>结果</p>
<blockquote>
<p> 检测成功</p>
</blockquote>
<p>此时我们就可以完成,当玩家和敌机发生碰撞,游戏结束,当子弹和敌机碰撞,敌机消失。</p>
<p>同样的 pygame 给我们提供了一个 <code>pygame.sprite.groupcollide()</code> 用于 <code>Group</code> 之间的碰撞检测.当发生碰撞的时候这两个对象都会在 <code>Group</code> 中移出。</p>
<p>用于检测敌机和子弹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pygame.sprite.groupcollide(enemies, player.bullets, 1, 1)</div></pre></td></tr></table></figure></p>
<p>敌机和子弹的关系已经和好的处理。<br>处理敌机和玩家飞机的关系。</p>
<p>我们需要在 <code>Player</code> 里添加一个属性判断当前玩家是否被击中的 <code>boolean</code> 值.当集中的时候把属性改为 <code>True</code>.当为 <code>True</code> 的时候游戏结束.也就是我们一开始设置的循环就会结束.所以我们需要更改之前写的一些代码,使它更加完善。</p>
<p>在 Player 类里面添加是否击中属性。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.is_hit = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>修改循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">RUN = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> RUN:</div><div class="line">    <span class="comment"># 省略代码</span></div><div class="line">        <span class="keyword">if</span> pygame.sprite.collide_rect(enemy, player):</div><div class="line">        player.is_hit = <span class="keyword">True</span></div><div class="line">        RUN = <span class="keyword">False</span></div><div class="line">    <span class="comment"># 省略代码</span></div></pre></td></tr></table></figure>
<p>执行结果</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/gameover2.gif" alt=""></p>
<p>当玩家被击中的时候,在显示一张 GameOver 图片提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gameOver = pygame.image.load(&apos;resources/image/gameover.png&apos;)</div><div class="line"></div><div class="line">while GAMEOVER:</div><div class="line">    screen.fill(0)</div><div class="line">    screen.blit(gameOver, (0, 0))</div><div class="line"></div><div class="line">    pygame.display.update()</div><div class="line"></div><div class="line">    # 退出程序</div><div class="line">    for event in pygame.event.get():</div><div class="line">        if event.type == pygame.QUIT:</div><div class="line">            pygame.quit()</div><div class="line">            exit()</div></pre></td></tr></table></figure>
<p>做到这里基本算是实现了飞机大战.但是还有很多细节处理。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/finish1.gif" alt=""></p>
<h1 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h1><h2 id="精细的碰撞检测"><a href="#精细的碰撞检测" class="headerlink" title="精细的碰撞检测"></a>精细的碰撞检测</h2><p>从图上看,当敌机看似还没有和我们接触时,但是已经 GameOver 了。<br>实际情况是这样的,所有的图片都是矩形,当两张图片的矩形边框线碰撞的时候,就算两个对象碰撞,所以我们要更加精细的使用碰撞检测。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/coll.jpg" alt=""></p>
<p>我们可以按着图片中心的某个长度为半径，在这个半径内发生碰撞才是碰撞。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/coll2.jpg" alt=""></p>
<p>pygame 给我们提供了这样的方法。<code>pygame.sprite.collide_circle_ratio()</code> 可以自己算出一个半径，作为检测半径。并且可以做出一个有效检测的百分比。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> pygame.sprite.collide_circle_ratio(<span class="number">0.6</span>)(player, enemy):</div><div class="line">    player.is_hit = <span class="keyword">True</span></div><div class="line">    RUN = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>同样，子弹和敌机也可以修改，让碰撞检测更加精细。<br>修改后面的两个参数，使得碰撞检测更加精细。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pygame.sprite.groupcollide(enemies, player.bullets, <span class="number">0.6</span>, <span class="number">0.8</span>)</div></pre></td></tr></table></figure>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>做了怎么就，感觉它没有一点动效，感觉死气沉沉的。无论是飞机飞行，还是飞机被击中，都没有一个明确的反馈。<br>对于2d游戏，动画其实就是一张一张的图片不停的变化。就和电影的原理类似。要想让我们的飞机动起来，我们需要定义一个列表来存放这些图片，然后写个循环，让他一直不停的更换图片就好。</p>
<p>首先我们更改我们的主角 <code>Player</code><br>任就是老套路，加载图片。把加载的图片放到list 里。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">player_rect = [pygame.Rect(<span class="number">0</span>, <span class="number">99</span>, <span class="number">102</span>, <span class="number">126</span>),</div><div class="line">               pygame.Rect(<span class="number">165</span>, <span class="number">360</span>, <span class="number">102</span>, <span class="number">126</span>),</div><div class="line">               pygame.Rect(<span class="number">165</span>, <span class="number">234</span>, <span class="number">102</span>, <span class="number">126</span>),</div><div class="line">               pygame.Rect(<span class="number">330</span>, <span class="number">624</span>, <span class="number">102</span>, <span class="number">126</span>), </div><div class="line">               pygame.Rect(<span class="number">330</span>, <span class="number">498</span>, <span class="number">102</span>, <span class="number">126</span>), </div><div class="line">               pygame.Rect(<span class="number">432</span>, <span class="number">624</span>, <span class="number">102</span>, <span class="number">126</span>)]</div><div class="line"></div><div class="line">player_position = [<span class="number">100</span>, <span class="number">400</span>]</div><div class="line">player = Player(plane_img, player_rect, player_position)</div></pre></td></tr></table></figure>
<p>之后在 <code>Player</code> 添加循环的方法。获取图片。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span><span class="params">(pygame.sprite.Sprite)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, plane_img, player_rect, player_position)</span>:</span></div><div class="line">        pygame.sprite.Sprite.__init__(self)</div><div class="line">        self.image = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(player_rect)):</div><div class="line">            self.image.append(plane_img.subsurface(player_rect[i]).convert_alpha())</div><div class="line">        self.rect = player_rect[<span class="number">0</span>]</div><div class="line">        self.rect.topleft = player_position</div><div class="line">        self.img_index = <span class="number">0</span></div><div class="line">        self.move = <span class="number">1</span></div><div class="line">        self.bullets = pygame.sprite.Group()</div><div class="line">        self.is_hit = <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>飞机正常飞行的图片只有两张。所以我们要循环变化这两张图片。所以每发射一个子弹，图片变化两张。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">screen.blit(player.image[player.img_index], player.rect)</div><div class="line">player.img_index = SHOOT_PC / <span class="number">248</span></div><div class="line"><span class="comment"># 省略代码</span></div><div class="line"><span class="keyword">if</span> key_pressed[pygame.K_SPACE]:</div><div class="line">    <span class="keyword">if</span> SHOOT_PC % <span class="number">495</span> == <span class="number">0</span>:</div><div class="line">        player.shoot(bullet_img)</div><div class="line">    SHOOT_PC = SHOOT_PC + <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> SHOOT_PC &gt;= <span class="number">495</span>:</div><div class="line">        SHOOT_PC = <span class="number">0</span></div></pre></td></tr></table></figure>
<p>正常发射子弹的动画效果已经做完。我们还需要进行被击中爆炸的动画效果。</p>
<p>击中的原理和正常也一样。只不过先要判断当前飞机状态，是否被击中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> player.is_hit:</div><div class="line">    screen.blit(player.image[player.img_index], player.rect)</div><div class="line">    player.img_index = SHOOT_PC / <span class="number">248</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    player.img_index = player_shoot / <span class="number">248</span></div><div class="line">    screen.blit(player.image[player.img_index], player.rect)</div><div class="line">    player_shoot += <span class="number">30</span></div><div class="line">    <span class="keyword">if</span> player_shoot &gt; <span class="number">495</span>:</div><div class="line">        RUN = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># 省略代码</span></div><div class="line"><span class="keyword">if</span> pygame.sprite.collide_circle_ratio(<span class="number">0.6</span>)(player, enemy):</div><div class="line">    player.is_hit = <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p><code>248</code>，<code>30</code>，<code>495</code>，<code>1457</code> 这些数字是什么？如何计算出来的。先说 <code>495</code> 这个数字。<br>495 这个数字很随便，只是控制子弹的发射间隔。完全可以自定义。但是495这个数字一旦确定，其他三个数字基本确定。<br>248 为 495 的一半，因为发射一个子弹，图片要变化两张。<br>30 这个数字基本也是自定义的，只要比1大就好，他影响了结束动画出现的时间。</p>
<p>1488 这个数字是通过 248 确定的，是 248 的 6倍，因为飞机被射击后会有四张图片的显示。<br>同理，把敌机接触子弹的动画写出来。</p>
<p>加载图片<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">enemies_shoot_img = [plane_img.subsurface(pygame.Rect(<span class="number">267</span>, <span class="number">347</span>, <span class="number">57</span>, <span class="number">43</span>)),</div><div class="line">                     plane_img.subsurface(pygame.Rect(<span class="number">873</span>, <span class="number">697</span>, <span class="number">57</span>, <span class="number">43</span>)),</div><div class="line">                     plane_img.subsurface(pygame.Rect(<span class="number">267</span>, <span class="number">296</span>, <span class="number">57</span>, <span class="number">43</span>)),</div><div class="line">                     plane_img.subsurface(pygame.Rect(<span class="number">930</span>, <span class="number">697</span>, <span class="number">57</span>, <span class="number">43</span>))]</div></pre></td></tr></table></figure></p>
<p>同样我们需要创建 Group() 来存放被击中的敌机。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">enemies_shoot = pygame.sprite.Group()</div></pre></td></tr></table></figure></p>
<p>之后的处理逻辑基本相似，不多介绍<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> enemy <span class="keyword">in</span> enemies:</div><div class="line">    enemy.enemyMove()</div><div class="line">    <span class="keyword">if</span> pygame.sprite.collide_circle_ratio(<span class="number">0.6</span>)(player, enemy):</div><div class="line">        enemies_shoot.add(enemy)</div><div class="line">        enemies.remove(enemy)</div><div class="line">        player.is_hit = <span class="keyword">True</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> enemy.rect.top &gt; HEIGHT:</div><div class="line">        enemies.remove(enemy)</div><div class="line"></div><div class="line"><span class="keyword">for</span> enemy_shoots <span class="keyword">in</span> enemies_shoot:</div><div class="line">    <span class="keyword">if</span> enemy_shoots.shoot_index == <span class="number">0</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">if</span> enemy_shoots.shoot_index &gt; <span class="number">70</span>:</div><div class="line">        enemies_shoot.remove(enemy_shoots)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    screen.blit(enemy_shoots.shoot_imgs[enemy_shoots.shoot_index / <span class="number">20</span>], enemy_shoots.rect)</div><div class="line">    enemy_shoots.shoot_index += <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>这样的话基本完成了动画效果。</p>
<h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><p>有了动画还的有音乐。</p>
<p>音乐的处理只要在特定的地方播放音乐就好，比如子弹发射的时候，背景音乐，被击中的时候，游戏结束的时候，等等。他们的处理逻辑都一样。先加载资源，然后在播放。</p>
<p>背景音乐的播放。</p>
<p> <code>pygame</code> 在处理背景音乐的时候都在 <code>pygame.mixer</code> 方法中。其中播放音乐的play中的参数，第一个为播放几次，-1 为循环播放，后面的浮点表示 从第几秒开始播放。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">backgroundMusic = pygame.mixer.music.load(<span class="string">'resources/sound/game_music.mp3'</span>)</div><div class="line">pygame.mixer.music.play(<span class="number">-1</span>, <span class="number">0.0</span>)</div></pre></td></tr></table></figure>
<p>其他的音乐先加载资源，在需要的地方播放。</p>
<p>发射子弹</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shoot</span><span class="params">(self, bullet_img)</span>:</span></div><div class="line">       shootMusic = pygame.mixer.Sound(<span class="string">'resources/sound/bullet.mp3'</span>)</div><div class="line">       bullet = Bullet(bullet_img, self.rect.midtop)</div><div class="line">       self.bullets.add(bullet)</div><div class="line">       shootMusic.play()</div></pre></td></tr></table></figure>
<p>其他音乐处理一样，不多解释。</p>
<h2 id="分数-amp-等级"><a href="#分数-amp-等级" class="headerlink" title="分数&amp;等级"></a>分数&amp;等级</h2><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><p>首先绘制得分情况，在屏幕上显示多少分。</p>
<p>绘制字体基本和绘制精灵是差不多的。首先要生成字体<br>两个参数分别是字体和字号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">score_font = pygame.font.Font(<span class="keyword">None</span>, <span class="number">36</span>)</div></pre></td></tr></table></figure></p>
<p>有了字体那么需要写点字。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">score_font.render(<span class="string">"分数"</span>,<span class="keyword">True</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</div></pre></td></tr></table></figure>
<p>第一个参数是写的文字；第二个参数是个布尔值，以为这是否开启抗锯齿，就是说True的话字体会比较平滑，不过相应的速度有一点点影响；第三个参数是字体的颜色；第四个是背景色，如果你想没有背景色（也就是透明），那么可以不加这第四个参数<br>字体也有了，文本也有了，下一步就是绘制。通过 <code>get_rect()</code> 获得矩形，之后绘制和精灵绘制方法一样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">score_font = pygame.font.Font(<span class="keyword">None</span>, <span class="number">36</span>)</div><div class="line">score_text = score_font.render(<span class="string">'分数：0'</span>, <span class="keyword">True</span>, (<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>))</div><div class="line">text_rect = score_text.get_rect()</div><div class="line">text_rect.topleft = [<span class="number">10</span>, <span class="number">10</span>]</div><div class="line">screen.blit(score_text, text_rect)</div></pre></td></tr></table></figure>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/scoreShow.jpg" alt=""></p>
<p>分数已经显示了，就可以积分。我们每击落一个飞机增加 100 分。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> enemy_shoots.shoot_index &gt; <span class="number">70</span>:</div><div class="line">           enemies_shoot.remove(enemy_shoots)</div><div class="line">           score += <span class="number">100</span></div><div class="line">           <span class="keyword">continue</span></div></pre></td></tr></table></figure>
<p>我们还需要在文本的地方强制转换为 str 。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">score_text = score_font.render(str(score), <span class="keyword">True</span>, (<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>))</div></pre></td></tr></table></figure>
<h3 id="等级"><a href="#等级" class="headerlink" title="等级"></a>等级</h3><p>有了分数，那么再加点等级会使游戏更加有趣味性。</p>
<p>同样的先绘制等级。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">level_font = pygame.font.Font(<span class="keyword">None</span>, <span class="number">42</span>)</div><div class="line">level_text = level_font.render(<span class="string">'Level '</span>+str(level), <span class="keyword">True</span>, (<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>))</div><div class="line">level_rect = level_text.get_rect()</div><div class="line">level_rect.midtop = [<span class="number">240</span>, <span class="number">10</span>]</div><div class="line">screen.blit(level_text, level_rect)</div></pre></td></tr></table></figure>
<p>下一步就是写等级函数。<br>随着分数的增加，等级增加，飞机变多，等等。<br>首先写分数和等级的关系。<br>随便瞎写的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> score == <span class="number">100</span> * (level ** <span class="number">2</span> + level):</div><div class="line">       level += <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>这个是控制敌机数量的，我们可以设定一个变量，使敌机越来越多。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if ENEMY_PC % 500 == 0:</div></pre></td></tr></table></figure></p>
<p>每增加一级，就添加敌机数量。等级也不能一直增加，所以当等级是摸个值的时候，就算最高级别了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> score == <span class="number">100</span> * (level ** <span class="number">2</span> +  level):</div><div class="line">    level += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> level != <span class="number">10</span>:</div><div class="line">        enemy_add -= <span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>基本到这里算是写了一个相对完整的游戏。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/end.jpg" alt=""></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/youngxhui/PlaneWars" target="_blank" rel="noopener">Github地址</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一个 Android 项目]]></title>
      <url>http://youngxhui.top/2017/05/08/%E7%AC%AC%E4%B8%80%E4%B8%AA-Android-%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>想想也是有点意思，自己的第一个相对完整的 Android 项目竟然是在金钱的诱惑下完成的。</p>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>事情是这样，在前两天，在学校的某个群内，看到一个哥们找做课程设计。于是乎就拦下了。谈好价钱 120 。120 就把我给收买了。简单的看了一下需求文档。<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/KOJ%5B%7DEE9VE3_X%7B%29GBK45~%7B6.jpg" alt=""></p>
<p>其实我也是个半吊子，从来没有这样完整的写过，之前都是一个个小 Demo 这样写的。所以，自己看了一下没敢全接，就答应了任务为1,2,3,4。现在看来，120的价格，赔的连内裤都没有了。</p>
<p>从周五下午开始写的，到周一中午交付，计算一下也就是三天左右。每天估计要写近 <code>8 - 9</code> 小时左右,感觉自己的身体要被掏空了。</p>
<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>其实就是三个功能，视频展示，计划展示，用户管理，每个不外乎就是 增删改查 四个功能。简单的分析过后，就开始动手编码。</p>
<h1 id="编码阶段"><a href="#编码阶段" class="headerlink" title="编码阶段"></a>编码阶段</h1><p>说实话，之前从来没有写过 Android 数据库 <code>sqLite</code>，<code>recycleView</code>没有完全使用过，<code>NavagationView</code>没有使用过，视频获取播放没用过，不知道 <code>Android</code> 的开发模式，于是乎就开始边学边做模式,最后对我可以做出来，其实我也感到惊奇。</p>
<p>果然</p>
<blockquote>
<p>有钱能使鬼推磨</p>
</blockquote>
<h2 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h2><p><code>NavigationView</code> 这个控件是 <code>Google</code> 的在 <code>MD</code> 设计中引入的滑动菜单，在 <code>Google</code> 自己的 App 上有很多应用。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/navagation.gif" alt=""></p>
<p><code>NavigationView</code> 分为两部分。<code>menu</code> 和 <code>header</code> 。<code>menu</code>为下面的选项，<code>header</code> 上面整块。</p>
<p>menu.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_class"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_format_list_bulleted_black_24dp"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"课程"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_plan"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_access_time_black_24dp"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"计划"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/action_settings"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_settings_black_24dp"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"修改密码"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 <code>menu</code> 中可以嵌套 <code>group</code> 和 <code>item</code>。group 可以看做一个组，我们可以对这个组里面的 <code>item</code> 定义属性，这里定义的是 <code>single</code> 表示每个 <code>item</code> 只能单选。</p>
<p>下面定义 header</p>
<p>header.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">de.hdodenhof.circleimageview.CircleImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/icon_image"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"120dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"120dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/header"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">tools:layout_constraintBottom_creator</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">tools:layout_constraintLeft_creator</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">tools:layout_constraintRight_creator</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">tools:layout_constraintTop_creator</span>=<span class="string">"1"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/icon_username"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"@color/white"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"username"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">tools:layout_constraintBottom_creator</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">tools:layout_constraintLeft_creator</span>=<span class="string">"1"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>header 表示上方的部分。我放了一个头像 ，头像使用了一个开源库 <code>compile &#39;de.hdodenhof:circleimageview:2.1.0&#39;</code>,这个库可以把图片转换为圆形。这个就是一个简单的布局，不过多介绍。</p>
<p>当我们设置好 header 和 menu 的时候就可以进行 <code>NavigationVIew</code> 的设置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">            <span class="comment">&lt;!--省略其他布局 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/nav_menu"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.NavigationView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>NavigationView</code> 要放在 <code>DrawerLayout</code> 里面。<code>CoordinatorLayout</code>/<code>FrameLayout</code> 是在主布局内要显示的。 <code>NavigationView</code> 通过 <code>app:headerLayout</code> 加载 <code>header</code> 通过 <code>app:menu</code> 加载 <code>menu</code>。<br>刚刚开始的时候，在 <code>header</code> 里面设置一个 <code>ImageView</code> 然后把头像和文字放到 <code>ImageView</code> 中，这样做不是不可以，但是如果 <code>ImageView</code> 中是一个图片，会对性能造成很大的影响，滑动栏会很卡。建议把背景直接通过父布局直接加载。</p>
<p>在布局中写完，下面需要进行 Java 代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> DrawerLayout drawerLayout;</div><div class="line">    <span class="keyword">private</span> TextView uname;</div><div class="line">    <span class="comment">//省略其他代码</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//省略其他代码</span></div><div class="line">        drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">        ActionBar actionBar = getSupportActionBar();</div><div class="line">        <span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</div><div class="line">            actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">            actionBar.setHomeAsUpIndicator(R.drawable.ic_menu_black_24dp);</div><div class="line">        &#125;</div><div class="line">        navigationView.setCheckedItem(R.id.nav_class);</div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</div><div class="line">                drawerLayout.closeDrawers();</div><div class="line">                <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">                    <span class="keyword">case</span> R.id.nav_plan:</div><div class="line">                        startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,PalnActivity.class));</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.action_settings:</div><div class="line">                        startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,ResetActivity.class));</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        View headerView = navigationView.getHeaderView(<span class="number">0</span>);</div><div class="line">        uname= (TextView) headerView.findViewById(R.id.icon_username);</div><div class="line">        uname.setText(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> android.R.id.home:</div><div class="line">                drawerLayout.openDrawer(GravityCompat.START);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.action_settings:</div><div class="line">                drawerLayout.openDrawer(GravityCompat.START);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 省略其他代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>setCheckedItem</code> 表示当前选择的 <code>item</code> 。<code>setNavigationItemSelectedListener</code> 来设置每个 <code>item</code> 的点击事件。</p>
<p>这个就是简单的 <code>NavigationView</code> 的简单使用。</p>
<h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><p><code>RecyclerView</code> 在我刚刚开始学 <code>Android</code> 的时候就已经听说过，知道它比 <code>ListView</code> 优秀，所以说在做列表布局的时候直接想到了使用 <code>RecyclerView</code> 替代。</p>
<p>使用 <code>RecyclerView</code> 首先用做一个布局，布局文件为每个 <code>item</code> 要展示的效果。</p>
<p>我命名为 course_item</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/img_video_rc"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"24dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginStart</span>=<span class="string">"24dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:contentDescription</span>=<span class="string">""</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_slow_motion_video_black_24dp"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.0"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">"0.0"</span></div><div class="line">        <span class="attr">tools:layout_constraintLeft_creator</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">tools:layout_constraintTop_creator</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tx_classname_rc"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:maxLines</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"title"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.0"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toRightOf</span>=<span class="string">"@+id/img_video_rc"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">tools:layout_constraintLeft_creator</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">tools:layout_constraintTop_creator</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tx_classcontext_rc"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:maxLines</span>=<span class="string">"2"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"context"</span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.0"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toRightOf</span>=<span class="string">"@+id/img_video_rc"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/tx_classname_rc"</span></div><div class="line">        <span class="attr">tools:layout_conversion_absoluteHeight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">tools:layout_conversion_absoluteWidth</span>=<span class="string">"47dp"</span></div><div class="line">        <span class="attr">tools:layout_conversion_absoluteX</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">tools:layout_conversion_absoluteY</span>=<span class="string">"42dp"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个为列表里每个 <code>item</code> 的显示样式。不多介绍。</p>
<p>在使用 <code>RecyclerView</code> 的时候，主要还是要有适配器。通过适配器来加载布局，绑定控件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">CourseAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Course&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> View view = LayoutInflater.from(parent.getContext())</div><div class="line">                .inflate(R.layout.course_item, parent, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">final</span> ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        holder.courseView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">               <span class="comment">//监听事件</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        holder.courseView.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">//监听事件</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Course cl = list.get(position);</div><div class="line">        holder.imageView.setImageResource(R.drawable.ic_slow_motion_video_black_24dp);</div><div class="line">        holder.title.setText(cl.getCourseName());</div><div class="line">        holder.context.setText(cl.getVideoContext());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        View courseView;</div><div class="line">        ImageView imageView;</div><div class="line">        TextView title;</div><div class="line">        TextView context;</div><div class="line"></div><div class="line">        ViewHolder(View itemView) &#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            courseView = itemView;</div><div class="line">            imageView = (ImageView) itemView.findViewById(R.id.img_video_rc);</div><div class="line">            title = (TextView) itemView.findViewById(R.id.tx_classname_rc);</div><div class="line">            context = (TextView) itemView.findViewById(R.id.tx_classcontext_rc);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CourseAdapter</span><span class="params">(List&lt;Course&gt; courselist)</span> </span>&#123;</div><div class="line">        list = courselist;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>适配器继承了 <code>RecyclerView.Adapter</code> 主要有三个方法。<code>onCreateViewHolder</code> ，<code>onBindViewHolder</code> ，<code>getItemCount</code></p>
<h3 id="onCreateViewHolder"><a href="#onCreateViewHolder" class="headerlink" title="onCreateViewHolder"></a>onCreateViewHolder</h3><p>这个方法是用来创建一个 <code>view</code>，负责绑定 <code>item</code> 布局，添加监听。</p>
<h3 id="onBindViewHolder"><a href="#onBindViewHolder" class="headerlink" title="onBindViewHolder"></a>onBindViewHolder</h3><p>通过名字可以看出来，这是一个布局绑定的方法，主要用于 绑定我们写的 <code>item</code> 里面的布局文件。通过传入的 <code>positon</code> 获得每个 <code>item</code>的位置。然后对每个位置的 <code>item</code> 进行操作。</p>
<h3 id="getItemCount"><a href="#getItemCount" class="headerlink" title="getItemCount"></a>getItemCount</h3><p>获得 <code>item</code> 长度，也就是你要展示出来多少个 <code>item</code> 。</p>
<p>除了上述的三个方法，其中还有一个内部类，内部类主要是用绑定 <code>item</code> 的布局。适配器主要是将前面的 <code>list</code> 传入进行适配</p>
<h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p>我们在显示的 Activity 中，通过适配器将数据传入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Course&gt; courseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> CourseAdapter adapter;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//其他控件绑定</span></div><div class="line">        initClassList();</div><div class="line">        RecyclerView recyclerview = (RecyclerView) findViewById(R.id.rclv_list);</div><div class="line">        LinearLayoutManager layoutManger = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        recyclerview.setLayoutManager(layoutManger);</div><div class="line">        adapter = <span class="keyword">new</span> CourseAdapter(courseList);</div><div class="line">        recyclerview.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 省略其他代码 </span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initCourseList</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Course&gt; courseDB = DataSupport.findAll(Course.class);</div><div class="line">        <span class="keyword">for</span> (Course cou : courseDB</div><div class="line">                ) &#123;</div><div class="line">            Course course = <span class="keyword">new</span> Course();</div><div class="line">            course.setId(cou.getId());</div><div class="line">            course.setCourseName(cou.getCourseName());</div><div class="line">            course.setVideoContext(cou.getVideoContext());</div><div class="line">            courseList.add(course);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要通过适配器将 <code>list</code> 进行传入。在 <code>initCourseList</code> 中通过获取到数据库中的值，然后进行遍历，将遍历的结果存到 <code>Course</code>  中，最后将  <code>Courese</code>  放到 <code>list</code> 中。</p>
<p>在这里要说明一下，有可能 RecycleView 被其他控件遮挡，最后一个只能显示出一半。如下图。解决办法就是调整布局，应该是 <code>item</code> 的布局有问题。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/recycleView%E9%81%AE%E6%8C%A1.png" alt=""></p>
<h2 id="数据库存取"><a href="#数据库存取" class="headerlink" title="数据库存取"></a>数据库存取</h2><p>这是我第一次使用 <code>Android</code> 数据库。对于 <code>Android</code> 的数据库想想就知道很麻烦，因为无法查看，要在真机上查看还比较方便，要是在模拟器上查看，还要打开 <code>Moniter</code> ，在从 <code>Moniter</code> 把数据库导出，然后在通过看数据库的软件看是否写入成功。不仅仅这个，还要看 SQL 语句是否写对了，想想都觉得很麻烦。</p>
<p>在 《第一行代码(第二版)》中看到了 <code>Litepal</code> 这个框架，瞬间感觉到了压力减轻。在郭霖大神的博客里也很详细的介绍了这个框架的使用。</p>
<p>具体使用就不多介绍了，请转跳郭霖大神博客 <a href="http://blog.csdn.net/guolin_blog/article/details/38083103" target="_blank" rel="noopener"><a href="http://blog.csdn.net/guolin_blog/article/details/38083103" target="_blank" rel="noopener">Android数据库高手秘籍(零)——前言</a></a></p>
<p>在表关联的时候，一对多关联的时候，因为是更新表，所以曾经一度无法写入数据。例如 我创建的user表和plan表，在plan表中有一个 user_id 的字段，但是一度写不进去。后来查了资料，应该如下这样写。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">          String id = String.valueOf(MainActivity.userID);</div><div class="line">          User user = DataSupport.find(User.class, MainActivity.userID);</div><div class="line">          Plan plan = <span class="keyword">new</span> Plan();</div><div class="line">          plan.setPlanTitle(planTitle.getText().toString());</div><div class="line">          plan.setPlanContext(planContent.getText().toString());</div><div class="line">          String date1 = tv_startTime.getText().toString();</div><div class="line">          plan.setStartData(date1);</div><div class="line">          plan.setUser(user);</div><div class="line">          plan.save();</div><div class="line">          user.getPlanList().add(plan);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>关键在于<code>plan.setUser(user)</code>要先 <code>set</code>  User对象，在 save ，user.getPlanList().add()方法添加 plan ，这样在更新表的时候才会关联起来。</p>
<h2 id="多媒体文件获取"><a href="#多媒体文件获取" class="headerlink" title="多媒体文件获取"></a>多媒体文件获取</h2><p>获取多媒体文件首先要获取权限，在配置文件中添加相应的权限。通过 intent 打开Android 的文件管理器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chooseVideo</span><span class="params">()</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">        intent.setType(<span class="string">"video/*"</span>);</div><div class="line">        intent.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">        startActivityForResult(intent, <span class="number">2</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里的 video/<em> 是获取视频，同样修改可获取其他 比如任意文件 </em>/ * 等。</p>
<p>之后的部分其实还不太懂，等搞明白在补全这块。</p>
<h2 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h2><p>下拉刷新，使用的控件叫做  <code>SwipeRefreshLayout</code> ,然后对该控件添加监听事件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">swipeRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                refreshList();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>我们的  <code>refreshList</code> 中主要是开启一个新的线程来加载我们要展示的 <code>list</code>。</p>
<p>在加载 <code>list</code> 之前我们一定要先清空它，否则会出现重复加载。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshList</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    courseList.clear();</div><div class="line">                    initCourseList();</div><div class="line">                    adapter.notifyDataSetChanged();</div><div class="line">                    swipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就可以获得刷新列表，重新读取数据库数据。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个项目日后应该还会维护，添加一些新的功能，完善一些不足之处，比如添加点击的水波纹效果，点击浮动。添加获得视频的预览图等等。会不定期更新。</p>
<p><a href="https://github.com/youngxhui/MyApplication" target="_blank" rel="noopener">源码地址</a></p>
]]></content>
      
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git教程及使用经验]]></title>
      <url>http://youngxhui.top/2017/04/30/Git%E6%95%99%E7%A8%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过一周的准备，完成了 Git 的一些使用经验及教程。</p>
<p>主要是从命令行的角度来讲解。</p>
<h1 id="Git-是什么"><a href="#Git-是什么" class="headerlink" title="Git 是什么"></a>Git 是什么</h1><p>git 在维基百科上的解释是这样的</p>
<blockquote>
<p>git是一个分布式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。应注意的是，这与GNU Interactive Tools（一个类似Norton Commander界面的文件管理器）有所不同。 </p>
</blockquote>
<p>在我看来 Git 是一个 版本控制工具 和 团队协作 软件。</p>
<h1 id="Git-版本控制"><a href="#Git-版本控制" class="headerlink" title="Git 版本控制"></a>Git 版本控制</h1><p>简单的使用看这个博客 <a href="http://youngxhui.github.io/2016/08/13/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">Git教程操作</a></p>
<p>这个博客会在这个基础上更加详细的讲解命令行的使用，以及一些操作原理。</p>
<h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>当我们通过 <code>git add</code> 命令添加文件到 git 中的时候，可以通过 <code>git status</code> 来了解当前代码库的情况。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/git%20status.png" alt=""></p>
<p>通过 <code>git status</code>这个命令我们可以知道当前代码库的状态</p>
<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add -?"></a>git add -?</h2><p>为什么每次都要使用 <code>git add</code> 把修改文件添加，之后在提交。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/git%E4%BB%93%E5%BA%93.png" alt=""></p>
<p>这就是 git 的一个原理图。</p>
<p>git 工作时候分为工作区和版本库。工作区就是我们自己本地编辑的区域。而代码库又有一个 暂存区/缓存区。我们每次提交版本(<code>commit</code>) 都是在暂存区向代码库提交。所以我们每次都要通过 <code>add</code> 命令进行对修改的添加。</p>
<p>在给 git 添加文件的时候，我们使用的是 <code>git add &lt;filename&gt;</code>,但是当我们要添加大量的文件的时候，采用 <code>git add</code> 不仅浪费时间，而且还容易出错。此时我们使用 <code>git add -A</code> 会把所更改(包括文件的添加，删除，修改)的文件添加到代码库中。</p>
<p><code>git add -i</code> 会进入一个命令的子系统，提供我们选择。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/git%20add%20-i.png" alt=""></p>
<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p><code>git diff</code> 是一个比较代码的命令，如果不加参数表示本次和上一次的比较。我们可以添加要比较的两个版本的哈希值。</p>
<p><code>git diff 01df58 6e1baa</code></p>
<h1 id="Git-协作开发"><a href="#Git-协作开发" class="headerlink" title="Git 协作开发"></a>Git 协作开发</h1><p>之前的 Git 是用来用做简单的 版本控制，记录了每一个版本。下面我们进行团队协作开发。</p>
<h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><p>当一个人开发功能 A 而另一个人开发功能 B ，之后代码进行整合的时候，使代码既有功能 A 也有功能 B 。在 Git 中，Git 给了我们分支的概念。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/git%20branch-a.png" alt=""></p>
<p>分支可以使用我们快速的开发协作，并且快速的合并。</p>
<h2 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h2><p>通过命令 <code>git branch</code> 来查看分支情况，当前分支会前面带 * 标识。<code>git branch &lt;branch name&gt;</code> 来创建分支。<br>分支创建会拷贝当前的内容到新的分支。通过 <code>git checkout &lt;branch name&gt;</code> 来切换到我们需要切换的分支。</p>
<p>我们也可以通过 <code>git checkout -b &lt;filename&gt;</code> 来创建分支并且切换到该分支。</p>
<h2 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h2><p>当我们创建出新的分支的时候，就可以对这个分支进行版本的迭代。当我们做完版本迭代，版本更新的时候，就会向我们的 <code>master</code> 分支上就行合并。</p>
<p>如果我们要向 <code>master</code> 分支上合并我们新创建的分支叫 <code>dev</code> ，那么我们先切换分支到 <code>master</code>，在通过 <code>git merge dev</code> 进行合并两个分支。期间会有合并冲突，通过修改来进行保留。</p>
<h1 id="Git-flow"><a href="#Git-flow" class="headerlink" title="Git flow"></a>Git flow</h1><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/git%20flow.png" alt=""></p>
<p>如上图，git flow 是 <code>git</code> 给我们的一个协作的开发流程，<code>master</code> 分支一般是用于上线产品的发布，<code>develop</code> 分支使用开发， 在他的支线上我们一般会创建功能分支。我们在功能分支上开发完成后合并到 <code>develop</code> 分支上。这样就完成了我们的 git flow 开发。</p>
<p><a href="https://island-hexo.oss-cn-beijing.aliyuncs.com/Git&amp;Github.pptx" target="_blank" rel="noopener">PPT下载</a></p>
]]></content>
      
        
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客一周年]]></title>
      <url>http://youngxhui.top/2017/04/20/%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4/</url>
      <content type="html"><![CDATA[<p>2016年4月20日完成了博客搭建，今天2017年4月20日，博客已经维护运行一年。<br>博客由 Github+Hexo 搭建，托管于 Github 。</p>
<p>在一年中，在 <code>Github</code> 上<strong>commits:179</strong> ，<strong>star:5</strong>, <strong>fork:6</strong></p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/github%E7%BB%9F%E8%AE%A1.png" alt=""></p>
<p>更新博客 <strong>30</strong> 篇。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/snipaste_20170420_200335.png" alt=""></p>
<p>其中访问量最大的是 <strong><a href="http://youngxhui.github.io/tags/GitHub/" target="_blank" rel="noopener">Github 使用教程</a></strong> 系列。大多数的访问量都来源于这个系列博客。</p>
<p>总计评论为 <strong>46</strong> 条(可惜多说要关闭了，现在评论迁移到 <strong>disqus</strong>，国内IP无法访问)</p>
<p>截至十九点十分，百度统计最后统计 <strong>PV</strong> 为 <strong>39706</strong> ，<strong>UV</strong> 为 <strong>13484</strong> </p>
<p>下图为 <code>百度统计</code></p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A11.png" alt=""></p>
<p>其中文章的阅读量为 <strong>27000</strong> 下图为 <code>leancould</code> 统计</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/leancould1.png" alt=""></p>
<p>有来自 <strong>32</strong> 个国家或地区的IP</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A12.png" alt=""></p>
<p>HAPPY BIRTHDAY</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/timg.jpg" alt=""></p>
<p><a href="youngxhui.github.io">ISLAND</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017蓝桥杯]]></title>
      <url>http://youngxhui.top/2017/04/15/2017%E8%93%9D%E6%A1%A5%E6%9D%AF/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是第二年参加蓝桥杯了。一年过去了，还是没有好好的学习算法。今年才意识到算法的重要性，所以立下一个 <strong>flag</strong>—手头这个项目做完就开始系统的学习一下算法。</p>
<p>相比于去年的 蓝桥杯，今年感觉提醒有点变化，不在是一味的暴力。数据量变大了，但是个人感觉没有意义。第一道题完全是个水题，按照出题意思应该是要从文件读取数据吧。可是我用了 Excel 。一分钟秒出答案。就连我这样的菜鸟都能做出来，不说了。</p>
<h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><blockquote>
<p>题目：<br>用扑克牌 A,2,3,4,5,6,7,8,9组成一个三角形,使每条边的和相同<br>三角形如下</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E8%93%9D%E6%A1%A5%E6%9D%AFjavab2.png" alt=""></p>
<p>A代表1，符合三边之和相等的一共有多少种情况？经过翻转，镜像为同一种的算一种！</p>
</blockquote>
<p>这个题首先要考虑的是镜像和翻转的情况.<br>如图 这个为镜像</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E9%95%9C%E5%83%8F.png" alt=""> </p>
<p>在考虑翻转和镜像问题后,同样的排列就会产生6种情况,我们需要在最后的结果除以6。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tra</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">9</span>];</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        dfs(<span class="number">0</span>);</div><div class="line">        System.out.println(count / <span class="number">6</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index == <span class="number">9</span>) &#123;</div><div class="line">            <span class="keyword">int</span> b1 = a[<span class="number">0</span>] + a[<span class="number">1</span>] + a[<span class="number">3</span>] + a[<span class="number">5</span>];</div><div class="line">            <span class="keyword">int</span> b2 = a[<span class="number">0</span>] + a[<span class="number">2</span>] + a[<span class="number">4</span>] + a[<span class="number">8</span>];</div><div class="line">            <span class="keyword">int</span> b3 = a[<span class="number">5</span>] + a[<span class="number">6</span>] + a[<span class="number">7</span>] + a[<span class="number">8</span>];</div><div class="line">            <span class="keyword">if</span> (b1 == b2 &amp;&amp; b1 == b3) &#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (flag[i]) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            flag[i] = <span class="keyword">true</span>;</div><div class="line">            a[index] = i;</div><div class="line">            dfs(index + <span class="number">1</span>);</div><div class="line">            flag[i] = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>答案:144</p>
<h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/3%E9%87%91%E5%AD%97%E5%A1%94.png" alt=""></p>
<p>又是一个数据量比较大的题，这个题是没有做出来的，回头自己再慢慢题解研究一下吧。这个题应该也是要从文件读取，而且当时没有找出什么规律。</p>
<h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><p>还是不会，一个拧魔方的题，要求是二阶魔方，目前还没有找到题，找到题后补上。</p>
<h1 id="代码填空"><a href="#代码填空" class="headerlink" title="代码填空"></a>代码填空</h1><p>代码填空题略过，一般我做代码填空题是在所需要填写的位置打断点，根据 DEBUG 和输出要求来进行试探性的填写，一般不需要读懂全部代码，只需要知道部分代码即可，做题速度比较快。<br>可惜，一不小心翻船了。</p>
<h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><p>所填写的空 f(x/10,k)</p>
<h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><p>答案 a[i-1][j-1]+1</p>
<p>船翻在了第六题，但是直接填写了 <code>i</code> 答案是测试是正常输出的。不知道给不给分。排除这个模棱两可的答案，前面一共做对了三道题。比去年是有点进步，但是发现还是很差啊。。。。。一定要好好研究算法。</p>
<h1 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h1><blockquote>
<p>标题：日期问题<br>小明正在整理一批历史文献。这些历史文献中出现了很多日期。小明知道这些日期都在1960年1月1日至2059年12月31日。令小明头疼的是，这些日期采用的格式非常不统一，有采用年/月/日的，有采用月/日/年的，还有采用日/月/年的。更加麻烦的是，年份也都省略了前两位，使得文献上的一个日期，存在很多可能的日期与其对应。<br>比如02/03/04，可能是2002年03月04日、2004年02月03日或2004年03月02日。<br>给出一个文献上的日期，你能帮助小明判断有哪些可能的日期对其对应吗？</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一个日期，格式是”AA/BB/CC”。  (0 &lt;= A, B, C &lt;= 9)</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出若干个不相同的日期，每个日期一行，格式是”yyyy-MM-dd”。多个日期按从早到晚排列</p>
<h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>02/03/04</p>
<h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>2002-03-04<br>2004-02-03<br>2004-03-02<br>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗  &lt; 1000ms<br>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p>
</blockquote>
<p>这个题说实话，其实不难，关键是考虑各种情况，比如是否闰年，年，月，日格式是否合法，最后还要有个排序。我没有写完，当时越写越烦，最后就成了能过多少测试过多少测试，完全成了骗分。</p>
<h1 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h1><blockquote>
<p>标题：包子凑数</p>
<p>小明几乎每天早晨都会在一家包子铺吃早餐。他发现这家包子铺有N种蒸笼，其中第i种蒸笼恰好能放Ai个包子。每种&gt; 蒸笼都有非常多笼，可以认为是无限笼。</p>
<p>每当有顾客想买X个包子，卖包子的大叔就会迅速选出若干笼包子来，使得这若干笼中恰好一共有X个包子。比如一共有&gt; 3种蒸笼，分别能放3、4和5个包子。当顾客想买11个包子时，大叔就会选2笼3个的再加1笼5个的（也可能选出1笼3个&gt; 的再加2笼4个的）。</p>
<p>当然有时包子大叔无论如何也凑不出顾客想买的数量。比如一共有3种蒸笼，分别能放4、5和6个包子。而顾客想买7个&gt; 包子时，大叔就凑不出来了。</p>
<p>小明想知道一共有多少种数目是包子大叔凑不出来的。</p>
<h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>第一行包含一个整数N。(1 &lt;= N &lt;= 100)<br>以下N行每行包含一个整数Ai。(1 &lt;= Ai &lt;= 100)</p>
<h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>一个整数代表答案。如果凑不出的数目有无限多个，输出INF。</p>
<p>例如，<br>输入：<br>2<br>4<br>5   </p>
<p>程序应该输出：<br>6  </p>
<p>再例如，<br>输入：<br>2<br>4<br>6    </p>
<p>程序应该输出：<br>INF</p>
<p>样例解释：<br>对于样例1，凑不出的数目包括：1, 2, 3, 6, 7, 11。<br>对于样例2，所有奇数都凑不出来，所以有无限多个。  </p>
</blockquote>
<p>刚刚开始的时候想的这个题使用除法，比如输入4和5两种包子，分别枚举出1~1000，用每个数去除以包子的情况，如果有余数，就用余数接着除。但是很快发现了不对。然后就叒变成了一个骗分题。把输入是偶数的情况先输出 <code>INF</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后的试题就写到了第八题，感觉今年的题应该是要比去年难的，明显不是暴力杯了。成绩很快出来了，省二。钱还没有白交，剩下就看看能不能申请学校的单项奖学金了。钱不是重要的，重要的是靠前的一周备考中还是学会了 DFS 。之前是不会这个算法的。有收获就好，记得自己立下的 Flag 。</p>
]]></content>
      
        
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计蒜客蓝桥杯模拟赛(5)试题]]></title>
      <url>http://youngxhui.top/2017/04/04/%E8%AE%A1%E8%92%9C%E5%AE%A2%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B-5-%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是近期 计蒜客 的一个关于蓝桥杯的算法模拟赛。每个题进行一下简单的计算。</p>
<h1 id="试题"><a href="#试题" class="headerlink" title="试题"></a>试题</h1><h2 id="试题一"><a href="#试题一" class="headerlink" title="试题一"></a>试题一</h2><blockquote>
<p>某君的年龄是个两位数，如果把他年龄的两位数字交换位置后与原数字相加和为 x，与原数字相减差的绝对值为 y。已知 x 比 y 大 32。请你计算 y 的值是多少。</p>
</blockquote>
<p>这个试题很明显是一个送分题。通过手算就可以计算出这个答案。</p>
<p>答案：45</p>
<h2 id="试题二"><a href="#试题二" class="headerlink" title="试题二"></a>试题二</h2><blockquote>
<p>给出方程组：<br>   11x+13y+17z=2471<br>   13x+17y+11z=2739</p>
<p>   已知 x，y，z 均为正整数，请你计算 x，y，z相加和最小为多少</p>
</blockquote>
<p>这个题也是一个送分题,写个简单的暴力就可以算出。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">1000</span>; x++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">1000</span>; y++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">1000</span>; z++) &#123;</div><div class="line">                    <span class="keyword">if</span> (<span class="number">11</span> * x + <span class="number">13</span> * y + <span class="number">17</span> * z == <span class="number">2471</span> &amp;&amp; <span class="number">13</span> * x + <span class="number">17</span> * y + <span class="number">11</span> * z == <span class="number">2739</span>) &#123;</div><div class="line">                        sum = x + y + z;</div><div class="line">                        System.out.println(sum);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>答案：181</p>
<h2 id="试题三"><a href="#试题三" class="headerlink" title="试题三"></a>试题三</h2><blockquote>
<p>将数字 1…9 填入一个3×3 的九宫格中，使得格子中每一横行和的值全部相等，每一竖列和的值全部相等。请你计    算有多少种填数字的方案。</p>
</blockquote>
<p>这个还是一个暴力</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_3</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</div><div class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (a[<span class="number">0</span>] = <span class="number">1</span>; a[<span class="number">0</span>] &lt; <span class="number">10</span>; a[<span class="number">0</span>]++) &#123;</div><div class="line">            <span class="keyword">for</span> (a[<span class="number">1</span>] = <span class="number">1</span>; a[<span class="number">1</span>] &lt; <span class="number">10</span>; a[<span class="number">1</span>]++) &#123;</div><div class="line">                <span class="keyword">for</span> (a[<span class="number">2</span>] = <span class="number">1</span>; a[<span class="number">2</span>] &lt; <span class="number">10</span>; a[<span class="number">2</span>]++) &#123;</div><div class="line">                    <span class="keyword">for</span> (a[<span class="number">3</span>] = <span class="number">1</span>; a[<span class="number">3</span>] &lt; <span class="number">10</span>; a[<span class="number">3</span>]++) &#123;</div><div class="line">                        <span class="keyword">for</span> (a[<span class="number">4</span>] = <span class="number">1</span>; a[<span class="number">4</span>] &lt; <span class="number">10</span>; a[<span class="number">4</span>]++) &#123;</div><div class="line">                            <span class="keyword">for</span> (a[<span class="number">5</span>] = <span class="number">1</span>; a[<span class="number">5</span>] &lt; <span class="number">10</span>; a[<span class="number">5</span>]++) &#123;</div><div class="line">                                <span class="keyword">for</span> (a[<span class="number">6</span>] = <span class="number">1</span>; a[<span class="number">6</span>] &lt; <span class="number">10</span>; a[<span class="number">6</span>]++) &#123;</div><div class="line">                                    <span class="keyword">for</span> (a[<span class="number">7</span>] = <span class="number">1</span>; a[<span class="number">7</span>] &lt; <span class="number">10</span>; a[<span class="number">7</span>]++) &#123;</div><div class="line">                                        <span class="keyword">for</span> (a[<span class="number">8</span>] = <span class="number">1</span>; a[<span class="number">8</span>] &lt; <span class="number">10</span>; a[<span class="number">8</span>]++) &#123;</div><div class="line">                                            <span class="keyword">int</span> row1 = a[<span class="number">0</span>] + a[<span class="number">1</span>] + a[<span class="number">2</span>];</div><div class="line">                                            <span class="keyword">int</span> row2 = a[<span class="number">3</span>] + a[<span class="number">4</span>] + a[<span class="number">5</span>];</div><div class="line">                                            <span class="keyword">int</span> row3 = a[<span class="number">6</span>] + a[<span class="number">7</span>] + a[<span class="number">8</span>];</div><div class="line">                                            <span class="keyword">int</span> col1 = a[<span class="number">0</span>] + a[<span class="number">3</span>] + a[<span class="number">6</span>];</div><div class="line">                                            <span class="keyword">int</span> col2 = a[<span class="number">1</span>] + a[<span class="number">4</span>] + a[<span class="number">7</span>];</div><div class="line">                                            <span class="keyword">int</span> col3 = a[<span class="number">2</span>] + a[<span class="number">5</span>] + a[<span class="number">8</span>];</div><div class="line">                                            <span class="keyword">if</span> (col1 == col2 &amp;&amp; col2 == col3 &amp;&amp; row1 == row2 &amp;&amp; row1 == row3 &amp;&amp; col1 == row1) &#123;</div><div class="line">                                                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">                                                    set.add(a[i]);</div><div class="line">                                                &#125;</div><div class="line">                                                <span class="keyword">if</span> (set.size() == <span class="number">9</span>) &#123;</div><div class="line">                                                    count++;</div><div class="line">                                                &#125;</div><div class="line">                                                set.clear();</div><div class="line">                                            &#125;</div><div class="line">                                        &#125;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>答案：72</p>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python爬取斗鱼图片]]></title>
      <url>http://youngxhui.top/2017/04/03/python%E7%88%AC%E5%8F%96%E6%96%97%E9%B1%BC%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>一个简单的 Python 爬虫，用于爬取斗鱼网上的图片。</p>
<ul>
<li>编辑工具：Visual Studio Code</li>
<li>Python 版本：2.7</li>
<li>使用的库：urllib</li>
</ul>
<hr>
<p>Visual Studio Code插件</p>
<ul>
<li>Code Runner</li>
<li>Python</li>
<li>Python for VSCode</li>
<li>MagicPython</li>
</ul>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>首先要打开地址，并且获取该网页的代码。</p>
<p>从代码里获得你要图片。这里我们需要简单的分析一下该网页。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E6%96%97%E9%B1%BC%E5%9B%BE%E7%89%87.png" alt=""></p>
<p>当我们把鼠标移到地址上的时候就会出现该图片，这个就是我们要爬取的图片。</p>
<p>这个图片是在 <code>data-original</code> 后面，我们就需要进行匹配，通过正则表达式很快就可以达到目的。</p>
<p>网页代码片段</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-original</span>=<span class="string">"https://rpic.douyucdn.cn/a1704/03/15/1032029_170403155245.jpg"</span> <span class="attr">src</span>=<span class="string">"https://rpic.douyucdn.cn/a1704/03/15/1032029_170403155245.jpg"</span> <span class="attr">width</span>=<span class="string">"283"</span> <span class="attr">height</span>=<span class="string">"163"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>正则表达式 <code>data-original=&quot;(.*?\.(jpg|png))</code></p>
<p>这样我们就获取到了这个页面上所有的 jpg 和 png 图片。</p>
<p>最后通过 urlretrieve 这个方法把图片保存到你想要放的地方。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf8</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"> <span class="comment"># 通过filename设置路径和名字</span></div><div class="line">response=urllib.urlopen(<span class="string">'https://www.douyu.com/directory/game/TVgame'</span>)</div><div class="line">html=response.read()</div><div class="line"><span class="keyword">print</span> html</div><div class="line">imglist=re.findall(<span class="string">r'data-original="(.*?\.(jpg|png))"'</span>,html)</div><div class="line"><span class="keyword">print</span> imglist</div><div class="line">x=<span class="number">0</span></div><div class="line"><span class="keyword">for</span> imgurl <span class="keyword">in</span> imglist:</div><div class="line">    <span class="keyword">print</span> (<span class="string">'下载图片 %s'</span>%imgurl[<span class="number">0</span>])</div><div class="line">    <span class="keyword">if</span> imgurl[<span class="number">1</span>]==<span class="string">'gif'</span>:</div><div class="line">        urllib.urlretrieve(imgurl[<span class="number">0</span>],filename=<span class="string">'G:\PythonCode\pic\%d.gif'</span>%x)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        urllib.urlretrieve(imgurl[<span class="number">0</span>],filename=<span class="string">'G:\PythonCode\pic\%d.jpg'</span>%x)</div><div class="line">    x+=<span class="number">1</span></div><div class="line">    time.sleep(<span class="number">1</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring学习记录(二)]]></title>
      <url>http://youngxhui.top/2017/03/02/Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="AOP简述"><a href="#AOP简述" class="headerlink" title="AOP简述"></a>AOP简述</h1><p>面向切面编程，扩展功能不修改源代码实现。AOP采用横向抽取机制，取代了传统的纵向继承体系重复代码。</p>
<h1 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h1><h1 id="AOP操作相关术语"><a href="#AOP操作相关术语" class="headerlink" title="AOP操作相关术语"></a>AOP操作相关术语</h1><ul>
<li>链接点：类里面的被增强的方法。</li>
<li>切入点：类里面的增强的方法，在实际操作中，实际增强的方法叫切入点。</li>
<li>通知/增强：增强的逻辑，称为增强，比如扩展日志功能，这个日志功能称为增强。<br> 前置通知：在方法之前执行<br> 后置通知：在方法之后执行<br> 异常通知：出现异之后执行<br> 最终通知：在后置之后执行<br> 环绕通知：在方法之前和之后执行</li>
<li>切面：把增强应用到具体的方法上面，这个过程称为切面。把增强用到切入点的过程。</li>
</ul>
<h1 id="Spring的AOP操作"><a href="#Spring的AOP操作" class="headerlink" title="Spring的AOP操作"></a>Spring的AOP操作</h1><h2 id="Aspectj框架"><a href="#Aspectj框架" class="headerlink" title="Aspectj框架"></a>Aspectj框架</h2><p>在Spring进行aop操作，使用<code>Aspectj</code>框架，这个框架本身不是Spring的一部分，只是一起使用进行AOP操作。</p>
<ul>
<li>版本在2.0以后支持切点表达式支持。</li>
</ul>
<h2 id="基于Aspectj实现AOP操作"><a href="#基于Aspectj实现AOP操作" class="headerlink" title="基于Aspectj实现AOP操作"></a>基于Aspectj实现AOP操作</h2><ul>
<li>相关ja包</li>
</ul>
<blockquote>
<p><code>aopalliance</code>,<code>aspectjweaver</code>,<code>spring-aop</code>,<code>spring-aspects</code></p>
</blockquote>
<ul>
<li>创建Spring核心配置文件导入AOP约束。<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/aop</div><div class="line">       http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="基于Aspectj的xml实现"><a href="#基于Aspectj的xml实现" class="headerlink" title="基于Aspectj的xml实现"></a>基于Aspectj的xml实现</h3><ul>
<li>常用表达式<br>通过<code>execution</code>函数表达式实现。</li>
</ul>
<blockquote>
<p>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)</p>
</blockquote>
<ul>
<li>execution(<em> /增强方法的全路径/): </em>代表任意修饰符，空格后跟随增强方法的全路径。</li>
<li>execution(<em> com.Hello.</em>):代表该类的所有方法</li>
<li>execution(<em> </em>.*(..))</li>
<li>execution(<em> save</em>(..)) 表示以<code>save</code>开头的方法进行增强。</li>
</ul>
<p>xml配置代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--1.配置类--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"aop.Book"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBook"</span> <span class="attr">class</span>=<span class="string">"aop.MyBook"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--2.配置aop操作--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--2.1配置切入点--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut1"</span> <span class="attr">expression</span>=<span class="string">"execution(* aop.Book.add())"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--2.2配置切面--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myBook"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before1"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="基于Aspectj的注解实现"><a href="#基于Aspectj的注解实现" class="headerlink" title="基于Aspectj的注解实现"></a>基于Aspectj的注解实现</h3><p>创建类的对象，在spring的配置文件中开启aop操作。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span> <span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过注解来实现。</p>
<p>在增强类上<br><code>@Aspect</code>注解类，<code>@Before</code>注解方法(前置通知)。</p>
<ul>
<li>@Before</li>
<li>@AfterReturning</li>
<li>@Around</li>
<li>@AfterThrowing</li>
<li>@After</li>
</ul>
<h1 id="Spring的JdbcTemplate操作"><a href="#Spring的JdbcTemplate操作" class="headerlink" title="Spring的JdbcTemplate操作"></a>Spring的JdbcTemplate操作</h1><p><code>Spring</code>在<code>dao</code>层，使用<code>JdbcTemplate</code>，Spring为各种支持的持久化技术，都提供了简单操作的模板和回调。</p>
<table>
<thead>
<tr>
<th>ORM持久化技术</th>
<th>模板类</th>
</tr>
</thead>
<tbody>
<tr>
<td>JDBC</td>
<td>org.springframework.jdbc.core.JdbcTemplate</td>
</tr>
<tr>
<td>Hibemate5.0</td>
<td>org.springframework.orm.hibernate5.HibernateTemplate</td>
</tr>
<tr>
<td>IBatis(MyBatis)</td>
<td>org.springframework.orm.ibatis.sqlMapClientTempate</td>
</tr>
<tr>
<td>JPA</td>
<td>org.springframework.orm.jpa.JpaTempate</td>
</tr>
</tbody>
</table>
<h2 id="JdbcTemplate使用"><a href="#JdbcTemplate使用" class="headerlink" title="JdbcTemplate使用"></a>JdbcTemplate使用</h2><p>都是对数据库进行<code>crud</code>操作。</p>
<ul>
<li>导入JdbcTemplate相关jar包</li>
</ul>
<blockquote>
<p><code>spring-jdbc</code> <code>spring-tx</code></p>
</blockquote>
<ul>
<li>创建对象设置数据库信息，比如：加载驱动，设置url，用户名，密码等。<br>实例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">        dataSource.setUsername(<span class="string">"root"</span>);</div><div class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/JdbcDemo"</span>);</div><div class="line">        dataSource.setPassword(<span class="string">"12qwaszx"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>创建<br>JdbcTemplate模板对象，设置数据源。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div></pre></td></tr></table></figure>
<ul>
<li>调用JdbcTemplate对象里面的方法实现操作。</li>
</ul>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"INSERT INTO jdbcTest (id, name, password) VALUES (?,?,?)"</span>;</div><div class="line">jdbcTemplate.update(sql, <span class="string">"1"</span>, <span class="string">"lucy"</span>, <span class="string">"1234"</span>);</div></pre></td></tr></table></figure>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"UPDATE jdbcTest\n"</span> +</div><div class="line">            <span class="string">"SET name = ?\n"</span> +</div><div class="line">            <span class="string">"WHERE id=?"</span>;</div><div class="line">jdbcTemplate.update(sql,<span class="string">"cat"</span>,<span class="string">"1"</span>);</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"DELETE FROM jdbcTest WHERE name=?"</span>;</div><div class="line">jdbcTemplate.update(sql,<span class="string">"cat"</span>);</div></pre></td></tr></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p><code>JdbcTemplate</code>实现查询，有接口<code>RowMapper</code>,<br><code>JdbcTemplate</code>针对这个接口美欧提供实现类，等到不同的类型数据需要自己封装</p>
<ul>
<li>查询一个值</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询返回某值</span></div><div class="line">String sql1=<span class="string">"SELECT count(*) FROM jdbcTest"</span>;</div><div class="line"><span class="keyword">int</span> count=template.queryForObject(sql1,Integer.class);</div></pre></td></tr></table></figure>
<ul>
<li>返回对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询返回对象</span></div><div class="line">String sql2 = <span class="string">"select * from jdbcTest where name=?"</span>;</div><div class="line"><span class="comment">//调用jdbcTemplate方法</span></div><div class="line">User user=template.queryForObject(sql2,<span class="keyword">new</span> MyRowMapper() , <span class="string">"tom"</span>);</div><div class="line">System.out.println(user);</div></pre></td></tr></table></figure>
<p>要自己封装这个类<br>其中querForObject这个方法的第二个值为RowMapper，需要自己进行封装。<br>MyRowMapper.class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="comment">//从结果集里面把数据得到</span></div><div class="line">        String username = resultSet.getString(<span class="string">"name"</span>);</div><div class="line">        String password = resultSet.getString(<span class="string">"password"</span>);</div><div class="line">        <span class="comment">//把数据封装到对象里面</span></div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(username);</div><div class="line">        user.setPassword(password);</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>返回list集合</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String sql3 = <span class="string">"select * from jdbcTest"</span>;</div><div class="line">List&lt;User&gt; list = template.query(sql3, <span class="keyword">new</span> MyRowMapper());</div><div class="line">System.out.println(list);</div></pre></td></tr></table></figure>
<h2 id="Spring配置连接池和dao使用JdbcTemplate"><a href="#Spring配置连接池和dao使用JdbcTemplate" class="headerlink" title="Spring配置连接池和dao使用JdbcTemplate"></a>Spring配置连接池和dao使用JdbcTemplate</h2><h3 id="配置c3p0连接池"><a href="#配置c3p0连接池" class="headerlink" title="配置c3p0连接池"></a>配置c3p0连接池</h3><ol>
<li>导入jar包 <code>c3p0</code>和<code>mchange-commons-java</code></li>
<li>在Spring的配置文件配置连接池</li>
<li>在dao中使用</li>
</ol>
<h3 id="dao使用jdbctemplate"><a href="#dao使用jdbctemplate" class="headerlink" title="dao使用jdbctemplate"></a>dao使用jdbctemplate</h3><ol>
<li>在Service中注入Dao。</li>
<li>在Dao中注入jdbc模板。</li>
<li>在模板中注入连接池。</li>
<li>在连接池中写配置。</li>
</ol>
<p>示例代码</p>
<p>UserService.class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.c3p0;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by youngxhui</div><div class="line"> * Time is 17-2-19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> UserDao userDao;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">        userDao.add();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UserDao.class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.c3p0;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by youngxhui</div><div class="line"> * Time is 17-2-19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        String sql=<span class="string">"INSERT INTO jdbcTest (id, name, password) VALUES (?,?,?)"</span>;</div><div class="line">        jdbcTemplate.update(sql, <span class="number">5</span>, <span class="string">"lili"</span>, <span class="string">"123456"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SpringContext.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--配置c3p0的连接池--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"comboPooledDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/JdbcDemo"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"12qwaszx"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.c3p0.UserService"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.c3p0.UserDao"</span> <span class="attr">id</span>=<span class="string">"userDao"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"comboPooledDataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务是访问数据库的一个操作序列，数据库应用系统通过事务集来完成对数据库的存取。事务的正确执行使得数据库从一种状态转换成另一种状态。</p>
<h2 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><ul>
<li>原子性（atomicity）</li>
<li>一致性（consistency</li>
<li>隔离性 （isolation）</li>
<li>持久性（durability）</li>
</ul>
<h2 id="Sping事务管理api"><a href="#Sping事务管理api" class="headerlink" title="Sping事务管理api"></a>Sping事务管理api</h2><p>spring对事务管理的两种方式</p>
<ul>
<li>编程式事务管理(不用)</li>
<li>声明式事务管理<ul>
<li>基于xml配置文件实现</li>
<li>基于注解实现</li>
</ul>
</li>
</ul>
<h3 id="api介绍"><a href="#api介绍" class="headerlink" title="api介绍"></a>api介绍</h3><p>Spring事务管理高层抽象主要包含3个接口</p>
<ul>
<li>PlatformTransactionManager事务管理器</li>
<li>TransactionDefinition事务定义信息</li>
<li>TransactionStatus事务具体运行状态</li>
</ul>
<p>PlatformTransactionManager针对不同的dao层，提供了不同的接口实现类</p>
<table>
<thead>
<tr>
<th>事务</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.springframework.idbc.datasource.DataSourceTransactionManager</td>
<td>使用Spring JDBC或iBatis进行持久化数据时使用</td>
</tr>
<tr>
<td>org.springframework.orm.hibernate5.HibernateTransactionManger</td>
<td>使用Hibernate5.0版本进行持久化数据时使用</td>
</tr>
<tr>
<td>org.springframework.orm.jpa.JpaTransactionManager</td>
<td>使用JPA进行持久化</td>
</tr>
<tr>
<td>org.springframework.jdo.JdoTransactionManager</td>
<td>当持久化机制是Jdo时使用</td>
</tr>
<tr>
<td>org.springframework.transaction.ita.JtaTransactionManager</td>
<td>使用一个JTA实现来管理事务，在一个事务跨越多个资源时必须使用</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log4j使用]]></title>
      <url>http://youngxhui.top/2017/02/19/Log4j%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>通过log4j可以看到程序运行时候更加详细的信息。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li>导入log4j的jar包</li>
<li>复制log4j的配置文件</li>
</ol>
<p>一个简单的log4j的配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">### 设置日志等级 ###</div><div class="line">log4j.rootLogger=info, stdout</div><div class="line">### 输出到控制台 ###</div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.stdout.Target=System.err</div><div class="line">#log4j.appender.stdout=System.err</div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</div><div class="line">### 输出到日至文件</div><div class="line">log4j.appender.file=org.apache.log4j.FileAppender</div><div class="line">log4j.appender.file.File=/home/youngxhui/IdeaProjects/SpringDemo/spring-aop-xml/src/mylog.log</div><div class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.file.layout.ConversionPattern=%&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</div></pre></td></tr></table></figure>
<h1 id="设置日志级别"><a href="#设置日志级别" class="headerlink" title="设置日志级别"></a>设置日志级别</h1><ul>
<li>info：基本信息</li>
<li>debug：更详细的信息</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/log4j.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring学习(一)]]></title>
      <url>http://youngxhui.top/2017/02/08/Spring%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>Spring学习笔记，仅供自己参考。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol>
<li>Spring是开源的轻量级框架。</li>
<li>Spring核心主要为两部分：<br>(1).AOP:面向切面编程<br>(2).IOC：控制反转：<br> 把对象的创建不是通过new的方式实现，而是交给spring配置创建类对象</li>
<li>Spring是一站式框架。<br>Spring在JavaEE三层结构中，每一层都提供不同的解决技术。<ul>
<li>web层：SpringMVC</li>
<li>service层：Spring的ioc</li>
<li>dao层：Spring的jdbcTemplate</li>
</ul>
</li>
<li>Spring版本：4.x</li>
</ol>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul>
<li>用于沟通的中介勿的抽象化。</li>
<li>对外声明。</li>
<li>Java 8中接口可以拥有方法体。</li>
</ul>
<h1 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h1><ul>
<li>结构设计中，分清层次及调用关系，每层只能向外提供一组功能接口，更层次仅依赖接口而非实现类。</li>
<li>接口实现的变动不影响各层的调用。</li>
<li>隐藏具体实现和实现多态性的组件。</li>
</ul>
<h1 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h1><h2 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h2><p>控制权的转移，应用程序本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护。<br>把对象的创建交给spring进行管理</p>
<h2 id="IOC操作的两种操作"><a href="#IOC操作的两种操作" class="headerlink" title="IOC操作的两种操作"></a>IOC操作的两种操作</h2><ul>
<li>IOC的基于配置文件方式</li>
<li>IOC的注解方式</li>
</ul>
<h2 id="IOC的底层原理"><a href="#IOC的底层原理" class="headerlink" title="IOC的底层原理"></a>IOC的底层原理</h2><ol>
<li>xml的配置文件</li>
<li>dom4j解决xml</li>
<li>工厂设计模式</li>
<li>反射</li>
</ol>
<h2 id="IOC案例"><a href="#IOC案例" class="headerlink" title="IOC案例"></a>IOC案例</h2><ol>
<li>导入jar包</li>
</ol>
<ul>
<li>核心jar包<br><code>Beans</code> <code>Core</code> <code>Context</code>, <code>SpEL</code></li>
<li>支持日志输出的jar包</li>
</ul>
<ol>
<li>创建类，在类里面创建方法</li>
<li>创建spring的配置文件，配置创建类</li>
</ol>
<ul>
<li>建议放到src下面 </li>
</ul>
<ol>
<li>测试对象创建</li>
</ol>
<h2 id="Spring的Bean管理-xml"><a href="#Spring的Bean管理-xml" class="headerlink" title="Spring的Bean管理(xml)"></a>Spring的Bean管理(xml)</h2><h3 id="实例化三种方式"><a href="#实例化三种方式" class="headerlink" title="实例化三种方式"></a>实例化三种方式</h3><ul>
<li>使用类的无参构造(主要使用方式)</li>
<li>静态工厂创建</li>
<li>实例工厂创建</li>
</ul>
<h3 id="Bean标签常用属性"><a href="#Bean标签常用属性" class="headerlink" title="Bean标签常用属性"></a>Bean标签常用属性</h3><ul>
<li>id属性<br> 起名称，id的属性值可以是任意命名，但是不能包含特殊符号</li>
<li>class属性<br> 创建对象所在类的全路径  </li>
<li>name属性<br> 功能和id属性是一样的，但是name属性可以包含特殊符号。  </li>
<li>scope属性<br> <code>singleton</code>:默认值，单例对象。<br> <code>prototupe</code>:多例。<br> <code>request</code>:创建了对象，把对象放到request域里面。<br> <code>session</code>:创建对象，把对象放到session里面。<br> <code>globalSession</code>:创建对象，把对象放到globalSession里面。</li>
</ul>
<h2 id="Spring的Bean的管理-注解"><a href="#Spring的Bean的管理-注解" class="headerlink" title="Spring的Bean的管理(注解)"></a>Spring的Bean的管理(注解)</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul>
<li>代码里面的特殊标记，使用注解可以完成功能。</li>
<li>注解写法<code>@注解名称(属性名称=属性值)</code>。</li>
<li>注解使用在类上面，方法上面和属性上面。</li>
</ul>
<p>在<code>xml</code>需要配置一下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.young.anno"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Bean管理常用注解"><a href="#Bean管理常用注解" class="headerlink" title="Bean管理常用注解"></a>Bean管理常用注解</h3><ul>
<li>Component<br>– 在Spring中提供的<code>@Component</code>三个衍生注解<ul>
<li>@Controller WEB层</li>
<li>@Service    业务层</li>
<li>@Repository 持久层<br>这四个注解目前的功能是一样的，都是创建对象。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(value = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"add...."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Scope<br>用于单例与多例等配置,写在<code>Component</code>的下面。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(value = <span class="string">"user"</span>)</div><div class="line"><span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>) </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"add...."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>Autowired<br>注入属性</p>
</li>
<li><p>Resource<br>name属性写创建dao对象的value值</p>
</li>
</ul>
<h1 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI 依赖注入"></a>DI 依赖注入</h1><p>创建对象并且组装对象之间的关系</p>
<h2 id="有参构造注入"><a href="#有参构造注入" class="headerlink" title="有参构造注入"></a>有参构造注入</h2><p>采用<code>constructor-arg</code>来进行,<code>name</code>和<code>value</code>进行对构造器的值进行注入。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"preperty"</span> <span class="attr">class</span>=<span class="string">"com.young.property.PrepertyDemo1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h2><p>使用<code>property</code>标签进行注入，<code>name</code>定义类里面定义的属性的名称，<code>value</code>设置具体的值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.young.property.Book"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookname"</span> <span class="attr">value</span>=<span class="string">"one"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>spring框架只支持set方法注入和构造器注入 </li>
</ul>
<h2 id="注入对象类型属性"><a href="#注入对象类型属性" class="headerlink" title="注入对象类型属性"></a>注入对象类型属性</h2><ul>
<li>创建service类dao类</li>
<li>在service把dao作为类型属性</li>
<li>生成dao类型的set方法</li>
</ul>
<h3 id="xml配置方式"><a href="#xml配置方式" class="headerlink" title="xml配置方式"></a>xml配置方式</h3><ul>
<li>UserService.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> UserDao userDao;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"service"</span>);</div><div class="line">        userDao.add();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"service"</span> <span class="attr">class</span>=<span class="string">"com.young.ioc.UserService"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--不能写value属性，要写ref,dao配置bean标签的id值--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userdao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userdao"</span> <span class="attr">class</span>=<span class="string">"com.young.ioc.UserDao"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注解注入方式"><a href="#注解注入方式" class="headerlink" title="注解注入方式"></a>注解注入方式</h3><ol>
<li>Autowired</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(value = <span class="string">"userservice"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserDao userDao;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"service"</span>);</div><div class="line">        userDao.add();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>Resure</li>
</ol>
<p>UserDao.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(value = <span class="string">"userdao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"UserDao"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h2><ul>
<li><p>数组</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--数组类型--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"args"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小马<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小宋<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小王<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小李子<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>list类型</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>map类型</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>properties</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"name"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="xml和注解比较"><a href="#xml和注解比较" class="headerlink" title="xml和注解比较"></a>xml和注解比较</h2><table>
<thead>
<tr>
<th>比较项</th>
<th>xml</th>
<th>注解</th>
</tr>
</thead>
<tbody>
<tr>
<td>添加</td>
<td><code>&lt;Bean id=&quot;&quot; class=&quot;&quot;/&gt;</code></td>
<td>@Component</td>
</tr>
<tr>
<td>多例/单例</td>
<td><code>&lt;Bean scope=&quot;prototype/&gt;&quot;</code></td>
<td>@Scope</td>
</tr>
<tr>
<td>对象类型注入</td>
<td><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;  &lt;property name=&quot;&quot;ref=&quot;&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></td>
<td>@Resource</td>
</tr>
</tbody>
</table>
<h2 id="配置文件与注解混合使用"><a href="#配置文件与注解混合使用" class="headerlink" title="配置文件与注解混合使用"></a>配置文件与注解混合使用</h2><p>案例：</p>
<p>BookDao.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"bookDao"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OrderDao.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"bookDao"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>BookService.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"bookDao"</span>)</div><div class="line">    <span class="keyword">private</span> BookDao bookDao;</div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"ordlerDao"</span>)</div><div class="line">    <span class="keyword">private</span> OrderDao ordersDao;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"service"</span>);</div><div class="line">        bookDao.book();</div><div class="line">        ordersDao.buy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.young.xmlanno"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookservice"</span> <span class="attr">class</span>=<span class="string">"com.young.xmlanno.BookService"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"com.young.xmlanno.BookDao"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ordlerDao"</span> <span class="attr">class</span>=<span class="string">"com.young.xmlanno.OrderDao"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="meta">@org</span>.junit.<span class="function">Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testxmlAnno</span><span class="params">()</span>&#123;</div><div class="line">        ApplicationContext context =</div><div class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bea2.xml"</span>);</div><div class="line">        BookService bookService= (BookService) context.getBean(<span class="string">"bookservice"</span>);</div><div class="line">        bookService.service();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Junit单元测试]]></title>
      <url>http://youngxhui.top/2017/01/19/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="什么是Junit"><a href="#什么是Junit" class="headerlink" title="什么是Junit"></a>什么是Junit</h1><p>什么是Junit，Junit是用于java代码单元测试的框架。</p>
<h1 id="为什么要用Junit"><a href="#为什么要用Junit" class="headerlink" title="为什么要用Junit"></a>为什么要用Junit</h1><p>简单的说，我们在写java代码的时候每次写完一个类，都要写一个<code>public static void main(String args[])</code>的方法来进行方法的调用，写完之后再删除，如果类比较多那么我们所创建的方法也比较多，操作起来比较麻烦。而Junit就是为了解决这种情况，他可以在一个类里面创建多个可运行的方法，来进行测试，这便是我们所使用Junit的原因。</p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>我们在我们的项目中使用Junit需要先下载<code>junit.jar</code>包和<code>hamcrest-core.jar</code>并添加<a href="https://github.com/junit-team/junit4/wiki/Download-and-Install" target="_blank" rel="noopener">Github地址</a>。<br>这样我们就可以进行使用了。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>我们创建了一个<code>HelloWorld</code>的类，类里面有<code>sayHello</code>这个方法，我们要对这个方法进行测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们写一个类进行测试。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        HelloWorld helloWorld = <span class="keyword">new</span> HelloWorld();</div><div class="line">        helloWorld.sayHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以这样对<code>sayHello</code>方法就行测试。</p>
<p>但是，我们创建这个方法要满足一下要求。</p>
<ol>
<li>方法必须是公用且无返回值(<code>public void</code>)</li>
<li>方法必须可以抛出异常<code>throws Exception</code></li>
<li>方法必须用<code>@test</code>注解</li>
</ol>
<p>这样我们就创建好了一个测试方法，并且我们可以在该类下写无数个这个的方法用于不同的测试。</p>
<h1 id="IDEA演示"><a href="#IDEA演示" class="headerlink" title="IDEA演示"></a>IDEA演示</h1><ul>
<li>版本IDEA U 2016.3.1</li>
</ul>
<p>首先我们先写好我们的<code>HelloWorld</code>类<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/helloworld.png" alt=""><br>针对我们的sayHello方法进行测试，快捷键<code>ctrl+shift+t</code><br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/GIF.gif" alt=""><br>这样我们就可以测试我们的方法了。</p>
<p>一般为了方便，我们会新建一个test文件夹。标记为test目录，这样自动生成的test类就会放到test目录中，不影响我们正常编写的代码。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E6%A0%87%E8%AE%B0%E7%9B%AE%E5%BD%95.png" alt=""></p>
<p>结果如下<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%94%9F%E6%88%90test.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven入门]]></title>
      <url>http://youngxhui.top/2017/01/10/Maven%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h1><p><code>Maven</code>是一个<strong>跨平台</strong>的项目管理工具，主要用于基于<code>Java</code>平台的项目构建，依赖管理。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="maven的生命周期和功能"></p>
<p>maven之前的项目管理一般为 <code>ant</code>。</p>
<h1 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h1><p><code>Maven</code>的出现时为了解决项目的一些问题：</p>
<ol>
<li>如果有好几个项目，这好几个项目中，需要用到很多相同的jar包，<br>能不能只建立一个仓库来解决这个问题？</li>
<li>测试方法能不能全部运行呢？</li>
<li>怎么样把一个模块的功能放入到仓库中</li>
</ol>
<h1 id="Maven的安装和配置"><a href="#Maven的安装和配置" class="headerlink" title="Maven的安装和配置"></a>Maven的安装和配置</h1><h2 id="Maven的安装"><a href="#Maven的安装" class="headerlink" title="Maven的安装"></a>Maven的安装</h2><h3 id="Jdk要求"><a href="#Jdk要求" class="headerlink" title="Jdk要求"></a>Jdk要求</h3><p>jdk要求1.7+</p>
<h3 id="下载Maven"><a href="#下载Maven" class="headerlink" title="下载Maven"></a>下载Maven</h3><p>从<a href="http://maven.apache.org/" target="_blank" rel="noopener">Maven官网</a>上下载最新版本的<code>Maven</code></p>
<h3 id="设定环境变量"><a href="#设定环境变量" class="headerlink" title="设定环境变量"></a>设定环境变量</h3><p>将下载好的<code>Maven</code>的<code>bin</code>追加到环境变量<code>path</code>中。</p>
<h3 id="检查Maven是否配置成功"><a href="#检查Maven是否配置成功" class="headerlink" title="检查Maven是否配置成功"></a>检查Maven是否配置成功</h3><p>在cmd中运行<code>mvn -v</code>，当出现下面的提示证明配置正确</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/mvn-v.png" alt=""></p>
<p><strong>注意：要用管理员权限运行cmd，否则会报错</strong></p>
<h2 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h2><p><code>Maven</code>的很大作用就是导入<code>jar</code>包,所以我们建立一个仓库来放置项目所用的jar包，在需要的时候进行管理。</p>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>Maven的仓库默认路径是<code>C:\Users\UserName\.m2</code> ,<strong>注：UserName为个人电脑名称</strong></p>
<h1 id="Maven的约定"><a href="#Maven的约定" class="headerlink" title="Maven的约定"></a>Maven的约定</h1><table>
<thead>
<tr>
<th>路径</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>src/main/java</td>
<td>存放项目的java文件</td>
</tr>
<tr>
<td>src/main/resources</td>
<td>存放项目的资源文件，如spring，hibernate的配置文件</td>
</tr>
<tr>
<td>    src/test/java</td>
<td>存放所有的测试的java文件</td>
</tr>
<tr>
<td>src/test/resources</td>
<td>存放测试用的资源文件</td>
</tr>
<tr>
<td>target</td>
<td>项目输出位置</td>
</tr>
<tr>
<td>pom.xml</td>
<td>文件</td>
</tr>
</tbody>
</table>
<p>必须按照这个约定放置</p>
<h1 id="Maven项目"><a href="#Maven项目" class="headerlink" title="Maven项目"></a>Maven项目</h1><p>知道了Maven的约定，那么我们就可以根据约定来进行创建第一个项目。<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%9B%AE%E5%BD%95.png" alt=""><br>在<code>HelloWorld.java</code>文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.young.maven.model;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"HelloWorld"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>HelloWorldTest.java</code>文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.young.maven.model;</div><div class="line"><span class="keyword">import</span> org.junit.*;</div><div class="line"><span class="keyword">import</span> org.junit.Assert.*;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span></span>&#123;</div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</div><div class="line">    Assert.assertEquals(<span class="string">"HelloWorld"</span>,<span class="keyword">new</span> HelloWorld().sayHello());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>pom.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.young.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在根目录下执行命令<code>mvn compile</code><br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/comile.png" alt=""><br>这样就会编译成功。</p>
<h1 id="Maven构建命令"><a href="#Maven构建命令" class="headerlink" title="Maven构建命令"></a>Maven构建命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>mvn -v</td>
<td>查看maven版本</td>
</tr>
<tr>
<td>compile</td>
<td>编译</td>
</tr>
<tr>
<td>test</td>
<td>测试</td>
</tr>
<tr>
<td>package</td>
<td>打包</td>
</tr>
<tr>
<td>clean</td>
<td>删除target</td>
</tr>
<tr>
<td>install</td>
<td>安装jar到本地仓库</td>
</tr>
</tbody>
</table>
<h1 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在Mevan中这三个就是基础坐标也是唯一的表示，可以快速定位到任何一个包</p>
<h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><ul>
<li>本地仓库</li>
<li>远程仓库</li>
<li>镜像仓库</li>
<li>如果<code>Maven</code>在本地仓库找不到构建，那么就会去<code>Maven</code>的中央仓库去寻找，如果<code>Maven</code>的中央仓库没有，就会报错。因为Maven的远程仓库在国外,常常无法访问或者很慢,这是我们就要使用一些镜像仓库,来帮助我们。<br>在”~\apache-maven-3.3.9\conf\settings.xml”文件中，找到<code>mirrors</code>,我们可以修改这里进行镜像设置。</li>
</ul>
<p><a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven中央仓库</a></p>
<blockquote>
<p>中央仓库地址: <a href="http://repo.maven.apache.org/" target="_blank" rel="noopener">http://repo.maven.apache.org/</a></p>
</blockquote>
<h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><ul>
<li><code>project</code>是包含了pom的约束信息</li>
<li><code>modelVersion</code>指定了当前pom的版本</li>
<li><code>groupId</code>当前maven输入那个项目，包名+项目名</li>
<li><code>artifactId</code>项目名+模块名<br><code>version</code>版本号，第一个0表示大版本号，第二个0表示分支版本号，第三个0表示小版本号。<code>snapshot</code>快照，<code>alpha</code>内部测试版本，<code>beta</code>公测版本，<code>Relese</code>稳定版本，<code>GA</code>正式发布版本。</li>
<li><code>packaging</code>打包方式，默认为jar包，可以为war，zip</li>
<li><code>name</code> 项目描述</li>
<li><code>url</code>项目地址，项目描述</li>
<li><code>developers</code> 开发人员信息</li>
<li><code>licenses</code> 许可信息</li>
<li><code>organization</code>组织信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>依赖范围<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--设置依赖是否可选--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--排除依赖传递列表--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h1><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p> <code>scope</code> 控制依赖和三种classpath的关系。</p>
<blockquote>
<p> 三种classpath</p>
<ol>
<li>编译</li>
<li>测试</li>
<li>运行</li>
</ol>
</blockquote>
<p><code>scope</code>一共有6个值分别为<code>compile</code>,<code>provided</code>,<code>runtime</code>,<code>test</code>,<code>system</code>,<code>import</code>。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>compile</code></td>
<td>默认的范围，编译测试运行都要效。</td>
</tr>
<tr>
<td><code>provided</code></td>
<td>在编译和测试有效，运行时无效。</td>
</tr>
<tr>
<td><code>runtime</code></td>
<td>在测试和运行时有效</td>
</tr>
<tr>
<td><code>test</code></td>
<td>仅仅在测试有效</td>
</tr>
<tr>
<td><code>system</code></td>
<td>在本系统有效，移植性非常差</td>
</tr>
<tr>
<td><code>improt</code></td>
<td>导入范围，它只是用在dependencyManagement中，表示从其他pom.xml继承的依赖。</td>
</tr>
</tbody>
</table>
<h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><p>例如<code>MavenB</code>项目依赖<code>MavenA</code>,而<code>MavenC</code>依赖于<code>MavenB</code>，这样的活那么<code>MavenC</code>就会依赖于<code>MavenA</code>。</p>
<h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>A和B依赖不同版本但是相同的构建，就会出现冲突。</p>
<p>处理原则：</p>
<ul>
<li>断路优先<br>A-&gt;B -&gt; C -&gt;X(jar)<br>A-&gt;D-&gt;X(jar)<br>会优先解析路径短的。</li>
<li>先声明先优先<br>如果两条路径一样，那么先声明的会先依赖。</li>
</ul>
<h1 id="Maven创建JavaWeb"><a href="#Maven创建JavaWeb" class="headerlink" title="Maven创建JavaWeb"></a>Maven创建JavaWeb</h1><ul>
<li>Maven</li>
<li>IDEA</li>
</ul>
<p>创建Maven项目,选择webapp<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/ideawebapp.png" alt=""><br>填写好 <code>GroupId</code>和<code>ArtifacetId</code>之后next。<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/id%E5%A1%AB%E5%86%99.png" alt=""><br>这样我们就完成了一次创建。<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%AE%8C%E6%88%90.png" alt=""><br>因为只为我们创建了resource目录，按照Maven的约定，我们需要创建其他目录。</p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016年终总结]]></title>
      <url>http://youngxhui.top/2016/12/30/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>忙完了考试，课程设计，大创答辩，终于可以静下心来写一写今年的年终总结。</p>
<h1 id="0x01-概况"><a href="#0x01-概况" class="headerlink" title="0x01 概况"></a>0x01 概况</h1><hr>
<p>只能感叹时光飞逝，一年又一年啊，记得去年写这个总结的时候还是在宿舍，午后阳光。那时刚好，今年写总结的地点已经变为了实验室。来说说这一年是怎么过来的吧。</p>
<h1 id="0x02-蓝桥杯"><a href="#0x02-蓝桥杯" class="headerlink" title="0x02 蓝桥杯"></a>0x02 蓝桥杯</h1><hr>
<p>去年元旦刚过，大一的我还不太懂事，那时的我应该是在准备蓝桥杯吧。比较紧张，也想着在这次比赛中获得一个好的成绩，虽说距离<strong>蓝桥杯</strong>还有一段时间，毕竟大一，想着准备充足一些，有种初生牛犊不怕虎的感觉。在准备蓝桥杯的同时也在准备考试。<strong>蓝桥杯</strong>的最后是没有任何名次……仅仅限于我，我不清楚最后改题是在我离开考场后改题，还是就没有通知，总之我是没有拿到任何名次，当时的感受都记录在这个博客里。</p>
<p><a href="http://youngxhui.github.io/2016/04/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%84%9F%E5%8F%97/" target="_blank" rel="noopener">第一次参加蓝桥杯的感受</a></p>
<h1 id="0x03-实验室"><a href="#0x03-实验室" class="headerlink" title="0x03 实验室"></a>0x03 实验室</h1><hr>
<p>实验室的加入对于我个人来说还是有所提升的，在大一学完<code>c语言</code>后，能每周写代码的人我觉得不超过20%，甚至比这个还少。很多人学完<code>c语言</code>后电脑就成了电视机，游戏机。也许我如果没有加入实验室可能会成为他们的一名。<br>加入实验室的过程我还记得，比较痛苦的经历，熬了两天，把慕课网上的<a href="http://www.imooc.com/learn/85" target="_blank" rel="noopener">Java入门</a>看完，勉勉强强的加入了实验室。大一上学期的我感觉是对程序刚刚有个了解而已，连入门都不敢说。加入实验室后，自己搭建了<code>github</code>+<code>hexo</code>博客，顺便了学会了<code>git</code>，<code>github</code>。认识<code>github</code>之后，真的如网上大神所说，打开了一个新世界的大门。实验室其实给我更多的是一种激励。说实话，在实验室仍然靠自学，自学能力提高了一个很高的程度，不仅仅在编程方面。我的小伙伴常常和我说：我感觉上了大学很多人的脑子都不动了，感觉他们退化了，变笨了。当然实验室的收获不仅仅是这点点。</p>
<h1 id="0x04-Git-Github"><a href="#0x04-Git-Github" class="headerlink" title="0x04 Git/Github"></a>0x04 Git/Github</h1><hr>
<p>可以毫不虚心的说，在我们这个这一届的实验室我是第一个了解并且使用<code>GitHub</code>的人，所以我写了一个关于<a href="http://youngxhui.github.io/tags/GitHub/" target="_blank" rel="noopener"><code>Github入门系列</code></a>的教程。不仅仅是为了实验室的同学，也是为了我与和我一样想学习<code>Github</code>难找到教程的人。也收获了每个月我的博客访问量达到了3000+。赠人玫瑰，手有余香。</p>
<h1 id="0x05-Android"><a href="#0x05-Android" class="headerlink" title="0x05 Android"></a>0x05 Android</h1><hr>
<p>暑假前曾经一度想参加<strong>华北五省计算机应用大赛</strong>。于是开始了一个暑假的<code>Android</code>学习,学习过程并没有我想的那么一帆风顺，尤其是在新的控件学习中，在一个月的学习之后开始于小伙本尝试的做我们的应用，才发现我们仍旧什么都不会，直到现在，还是一种越学越多的感觉，总感觉还有很多新的知识要学习。</p>
<h1 id="0x06-项目组"><a href="#0x06-项目组" class="headerlink" title="0x06 项目组"></a>0x06 项目组</h1><hr>
<p>加入实验室之后，我发现越来越多的比赛想去尝试，想去报名，很多比赛需要一个团队去一起努力，组建一个团队是我大二一开始就出现的想法，也和好几个人讨论过，每次总是讨论到最后没有什么结论。知道上个月底，我开始了最后的突击。因为马上2016就要过去了，再不确立这一年过去，2017也会和这一样，一直拖。还好，最后项目组成立了。四个人可以负责两个前段，两个后端。项目组的组建应该说是刚刚赶上，为时不晚。</p>
<h1 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h1><hr>
<p>2016年马上就要离去，总结2016的收获其实不少，缺失也是有的，唯有2017努力了。</p>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ArrayList源码分析]]></title>
      <url>http://youngxhui.top/2016/11/27/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p><code>ArrayList</code> 是我们常用的一种数据结构。仔细分析 <code>ArrayList</code> 这个类和类所包含的方法。</p>
<h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><p>ArrayList继承了AbstractList 和使用了List RandomAccess Cloneable和Serializable四个接口。</p>
<p><code>AbstractList</code>该接口的作用是用于 <code>AbstractList</code> 提供了 <code>List</code> 接口的默认实现，在<code>AbstractList</code>中已经使用了<code>List</code>接口，为什么还会在<code>ArrayList</code>中使用的<code>List</code>接口，目测是为了让大家更加明白清楚的知道这个类是List这个集合。<br><code>RandomAccess</code> 是</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><code>ArrayList</code>只有两个私有变量，分别是<code>size</code>和<code>elementData</code>。<br><code>elementData</code>这个是来记录传入<code>ArrayList</code>的元素。而<code>size</code>是用来记录传入的元素的个数。</p>
<h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><p>该类里面一共有三个构造器</p>
<ul>
<li>ArrayList()</li>
<li>ArrayList(int)</li>
<li>ArrayList(Collection)</li>
</ul>
<p>下面就详细的分析一下三个构造器的使用。</p>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList()"></a>ArrayList()</h2><p>ArrayList无参的构造器,使用这个无参构造器会默认有一个长度为10的数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ArrayList-int"><a href="#ArrayList-int" class="headerlink" title="ArrayList(int)"></a>ArrayList(int)</h2><p>传入一个int值，这个值为<code>ArrayList</code>的初始容量。如果等于0则会默认使用<code>EMPTY_ELEMENTDATA</code>生成一个空的集合。如果输入为非负数的话会抛出一个<code>IllegalArgumentException</code>(非法参数)异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                           initialCapacity);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ArrayList-Collection"><a href="#ArrayList-Collection" class="headerlink" title="ArrayList(Collection)"></a>ArrayList(Collection)</h2><p>这个构造函数是传入一个集合,<code>toArray</code>是将这个集合转化为一个实际的数组，下面的程序就是和传入<code>int</code>类型是差不多的，判断数组长度是否为0，如果等于0则会默认使用<code>EMPTY_ELEMENTDATA</code>生成一个空数组。在不为空的时候，将<code>Collection</code>的值copy到<code>ArrayList</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        elementData = c.toArray();</div><div class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// replace with empty array.</span></div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="trimToSize"><a href="#trimToSize" class="headerlink" title="trimToSize()"></a>trimToSize()</h2><p>该方法主要是用于将<code>ArrayList</code>实际容量调整为列表当前大小。这里它实用了一个三目运算<strong><code>?  :</code></strong>。</p>
<ul>
<li><code>modCount</code>这个变量在<code>AbstractList</code>这个类里面,其中定义<code>int</code>这个变量使用了<code>transient</code>。</li>
</ul>
<blockquote>
<p>protected transient int modCount = 0;</p>
</blockquote>
<p><code>transient</code> 当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中。</p>
<ul>
<li>三目运算和<code>if else</code>的区别，三目运算是会有一个返回值的，<code>if else</code>没有返回值。如果非要写成<code>if else</code>应该也可以。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line">       modCount++;</div><div class="line">       <span class="keyword">if</span> (size &lt; elementData.length) &#123;</div><div class="line">           elementData = (size == <span class="number">0</span>)</div><div class="line">             ? EMPTY_ELEMENTDATA</div><div class="line">             : Arrays.copyOf(elementData, size);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="ensureCapacity"><a href="#ensureCapacity" class="headerlink" title="ensureCapacity()"></a>ensureCapacity()</h2><p>如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所指定的元素数。<br> DEFAULT_CAPACITY=10是一个常量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void ensureCapacity(int minCapacity) &#123;</div><div class="line">        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</div><div class="line">            // any size if not default element table</div><div class="line">            ? 0</div><div class="line">            // larger than default for default empty table. It&apos;s already</div><div class="line">            // supposed to be at default size.</div><div class="line">            : DEFAULT_CAPACITY;</div><div class="line"></div><div class="line">        if (minCapacity &gt; minExpand) &#123;</div><div class="line">            ensureExplicitCapacity(minCapacity);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><p>返回此列表中首次出现的指定元素的索引，或如果此列表不包含元素，则返回 -1。更确切地讲，返回满足 (o==null ? get(i)==null : o.equals(get(i))) 的最低索引 i ，如果不存在此类索引，则返回 -1。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="contains"><a href="#contains" class="headerlink" title="contains()"></a>contains()</h2><p>如果此列表中包含指定的元素，则返回 true。更确切地讲，当且仅当此列表包含至少一个满足 (o==null ? e==null : o.equals(e)) 的元素 e 时，则返回 true。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p><code>lastIndexOf</code>用于返回此列表中最后一次出现的指定元素的索引，或如果此列表不包含索引，则返回 -1。<br>这里<code>if</code>和<code>else</code>里面采用了两种不同的比较方法。<code>if</code>代码块里面是采用了<code>==</code>说明比较的是对象，而<code>else</code>的代码块采用的是<code>equals</code>比较。为什么这里采用两种比较方法呢？</p>
<p><strong>这里产生一个疑问？</strong></p>
<blockquote>
<p><code>null</code>是对象还是值？</p>
</blockquote>
<p><a href="https://segmentfault.com/q/1010000007268433" target="_blank" rel="noopener">正在技术论坛上提问</a></p>
<hr>
<p><a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.9" target="_blank" rel="noopener">Keywords</a></p>
<blockquote>
<p>50 character sequences, formed from ASCII letters, are reserved for use as keywords and cannot be used as identifiers (§3.8).<br>Keyword: one of</p>
</blockquote>
<pre><code>abstract  continue   for          new         switch
assert     default    if           package     synchronized
boolean    do         goto         private     this
break      double     implements   protected   throw
byte       else       import       public      throws
case       enum       instanceof   return      transient
catch      extends    int          short       try
char       final      interface    static      void
class      finally    long         strictfp    volatile
const      float      native       super       while
</code></pre><blockquote>
<p>The keywords const and goto are reserved, even though they are not currently used. This may allow a Java compiler to produce better error messages if these C++ keywords incorrectly appear in programs.<br>While true and false might appear to be keywords, they are technically Boolean literals (§3.10.3). Similarly, while null might appear to be a keyword, it is technically the null literal (§3.10.7).</p>
</blockquote>
<hr>
<p>在这个50个关键字中没有<code>null</code>，但是下面的一行字写了。</p>
<blockquote>
<p>While true and false might appear to be keywords, they are technically Boolean literals (§3.10.3). Similarly, while null might appear to be a keyword, it is technically the null literal (§3.10.7).</p>
</blockquote>
<p>虽然<code>true</code>和<code>false</code><strong>可能看起来</strong>是关键字，但它们在技术上是<strong>布尔值</strong>（§3.10.3）。类似地，虽然<code>null</code><strong>可能看起来</strong>是一个关键字，但在技术上是<code>null</code><strong>值</strong>（§3.10.7）。</p>
<p>java的官方文档里写着<code>true</code>,<code>false</code>,<code>null</code>是一个值，也就是说java有50个关键字，3个特殊的值。<br>竟然是值，为什么在比较的时候会报错？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String a = <span class="keyword">null</span>;</div><div class="line">        String b = <span class="keyword">null</span>;</div><div class="line">        System.out.println(a == b);</div><div class="line">        System.out.println(a.equals(b));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">true</span></div><div class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException</div><div class="line">	at Main.Main.main(Main.java:<span class="number">14</span>)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</div><div class="line">	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class="number">147</span>)</div><div class="line"></div><div class="line">Process finished with exit code <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>第二个方法抛出一个空指针异常。<br>竟然是一个值，那么应该两种都会显示<code>ture</code>。</p>
<p>这样也就说明了为什么和<code>null</code>比较时要用<code>==</code>而不是<code>equals</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p>返回此 ArrayList 实例的浅表复制。（不复制这些元素本身。） </p>
<p><strong>什么是浅表复制(shallow copy)</strong><br>对于shallow copy的翻译很多，有叫浅表复制，浅复制，影子复制，与它向对的是深度复制。<br><strong>浅表复制</strong><br>被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">    * Returns a shallow copy of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance.  (The</div><div class="line">    * elements themselves are not copied.)</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span> a clone of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</div><div class="line">           v.elementData = Arrays.copyOf(elementData, size);</div><div class="line">           v.modCount = <span class="number">0</span>;</div><div class="line">           <span class="keyword">return</span> v;</div><div class="line">       &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">           <span class="comment">// this shouldn't happen, since we are Cloneable</span></div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="add-E"><a href="#add-E" class="headerlink" title="add(E)"></a>add(E)</h2><p>该方法是用于添加将指定元素添加到末尾，通过<code>ensureCapacityInternal()</code>这个方法来为ArrayList扩容，在为<code>elementData</code>的末尾添加指定元素。代码的注释也强调了，是增加<code>modCount</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        elementData[size++] = e;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="add-int-E"><a href="#add-int-E" class="headerlink" title="add(int,E)"></a>add(int,E)</h2><p>这个方法的一开始就调用了<code>rangCheckForAdd()</code>这个方法，这个私有方法主要是用来判断传入的索引，如果传入的数值大于最大值或者小于零会抛出一个越界异常。<code>System.arraycopy()</code>是用来复制数组的，将要添加位置之后的数组整体后移一位。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        rangeCheckForAdd(index);</div><div class="line"></div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</div><div class="line">                         size - index);</div><div class="line">        elementData[index] = element;</div><div class="line">        size++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="remove-Object"><a href="#remove-Object" class="headerlink" title="remove(Object)"></a>remove(Object)</h2><p>移除此列表中首次出现的指定元素（如果存在）。如果列表不包含此元素，则列表不做改动。更确切地讲，移除满足 (o==null ? get(i)==null : o.equals(get(i))) 的最低索引的元素（如果存在此类元素）。如果列表中包含指定的元素，则返回 true（或者等同于这种情况：如果列表由于调用而发生更改，则返回 true）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</div><div class="line">                    fastRemove(index);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</div><div class="line">                    fastRemove(index);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>通过一个循环将<code>ArrayList</code>中的元素赋值为<code>null</code>，最后将<code>size</code>赋值为0，这样应该就会保证没有浪费内存。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">       modCount++;</div><div class="line"></div><div class="line">       <span class="comment">// clear to let GC do its work</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">           elementData[i] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">       size = <span class="number">0</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator()"></a>ListIterator()</h2><p>用于集合遍历，如果索引大于最大值或者小于0，抛出异常，否者使用ListItr()进行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="ListItr"><a href="#ListItr" class="headerlink" title="ListItr()"></a><del>ListItr()</del></h2><p>这是一个私有的内部类，继承了Iterator这个接口，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></div><div class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></div><div class="line">        <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor != size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">if</span> (i &gt;= size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            cursor = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">                cursor = lastRet;</div><div class="line">                lastRet = -<span class="number">1</span>;</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</div><div class="line">            Objects.requireNonNull(consumer);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</div><div class="line">                consumer.accept((E) elementData[i++]);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></div><div class="line">            cursor = i;</div><div class="line">            lastRet = i - <span class="number">1</span>;</div><div class="line">            checkForComodification();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a><del>replaceAll()</del></h2><p>这个方法是用来替换所有的匹配项</p>
<p>传入的参数是<code>UnaryOperator</code>是在java 8引入的lambda表达式，具体如何使用以后再说。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</div><div class="line">     Objects.requireNonNull(operator);</div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</div><div class="line">         elementData[i] = operator.apply((E) elementData[i]);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">     &#125;</div><div class="line">     modCount++;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a><del>sort()</del></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">       Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</div><div class="line">       <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">       &#125;</div><div class="line">       modCount++;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MD5加密]]></title>
      <url>http://youngxhui.top/2016/10/27/MD5%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="什么是MD5加密"><a href="#什么是MD5加密" class="headerlink" title="什么是MD5加密"></a>什么是MD5加密</h1><p>MD5加密即Message-Digest Algorithm5，历经了MD2，MD4发展，在1991年提出。</p>
<ul>
<li>中文名：消息摘要算法第五版</li>
<li>英文名：Message-Digest Algorithm5</li>
<li>提出时间：1991年</li>
</ul>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>MD5就是byte值和一个int的255进行<code>与</code>运算，得到一个int值，再将这个int值转化为十六进制的值，这样就完成了一个MD5加密。</p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>只能从明文加密为密文，不能把密文在转化为明文。加密后是不可逆性。确保明文的加密性。</p>
<h1 id="MD5加密代码"><a href="#MD5加密代码" class="headerlink" title="MD5加密代码"></a>MD5加密代码</h1><p>通过MD5的密文进行加密。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.security.MessageDigest;</div><div class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String passWord = <span class="string">"123456"</span>;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="comment">//获取数据摘要器</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</div><div class="line">            <span class="comment">//将一个byte数组进行加密操作，返回的是一个加密的byte数组，二进制的哈西计算，md5加密的第一步</span></div><div class="line">            <span class="keyword">byte</span>[] digest = messageDigest.digest(passWord.getBytes());</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digest.length; i++) &#123;</div><div class="line">                <span class="keyword">int</span> result = digest[i] &amp; <span class="number">0xff</span>;</div><div class="line">                <span class="comment">//将得到的int类型的值转化为16进制的值</span></div><div class="line">                String hexString = Integer.toHexString(result);</div><div class="line">                <span class="keyword">if</span> (hexString.length()&lt;<span class="number">2</span>)&#123;<span class="comment">//系统会自动把0省略，所以添加0</span></div><div class="line">                   sb.append(<span class="string">"0"</span>);</div><div class="line">                &#125;</div><div class="line">                sb.append(hexString);</div><div class="line">            &#125;</div><div class="line">            System.out.println(sb.toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;<span class="comment">//找不到加密方式异常</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果为：<br><code>e10adc3949ba59abbe56e057f20f883e</code></p>
<h1 id="防破解"><a href="#防破解" class="headerlink" title="防破解"></a>防破解</h1><p>上面的代码可以对<code>123456</code>进行加密，但是目前网上有好多破解网站，他们的破解原理就是将一些常见的<code>MD5</code>加密密文保存到数据库中，通过比对来达到所谓的破解。所以通过下面的方法进行加密会完全是网上</p>
<h2 id="不规则加密-加盐"><a href="#不规则加密-加盐" class="headerlink" title="不规则加密(加盐)"></a>不规则加密(加盐)</h2><p>通过对十六进制变量后进行不规则操作加密,在13行代码后边加数，进行不规则加密。这样会的话几乎已经无法完成破解了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.security.MessageDigest;</div><div class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String passWord = <span class="string">"123456"</span>;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</div><div class="line">            <span class="keyword">byte</span>[] digest = messageDigest.digest(passWord.getBytes());</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digest.length; i++) &#123;</div><div class="line">                <span class="keyword">int</span> result = digest[i] &amp; <span class="number">0xff</span>;</div><div class="line">                String hexString = Integer.toHexString(result)+<span class="number">1</span>;<span class="comment">//不规则加密，俗称加盐</span></div><div class="line">                <span class="keyword">if</span> (hexString.length()&lt;<span class="number">2</span>)&#123;</div><div class="line">                   sb.append(<span class="string">"0"</span>);</div><div class="line">                &#125;</div><div class="line">                sb.append(hexString);</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"密码为 123456\n 加密后"</span>);</div><div class="line">            System.out.println(sb.toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加密结果<br><code>e11a1dc1391491ba1591ab1be1561e01571f21f18813e1</code></p>
<h2 id="银行系统MD5加密方式"><a href="#银行系统MD5加密方式" class="headerlink" title="银行系统MD5加密方式"></a>银行系统MD5加密方式</h2><p>这种是银行等系统要求安全性非常高的系统，一般会对加密后的密文再次进行一次MD5加密，这样进行10-30次，达到一个无法破解的密文。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.security.MessageDigest;</div><div class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</div><div class="line">    <span class="comment">//银行 银行卡 6位数 将密码进行十到三十次MD5加密</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String passWord = <span class="string">"123456"</span>;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">10</span>; h++) &#123; <span class="comment">//进行多次循环加密</span></div><div class="line">                <span class="keyword">byte</span>[] digest = messageDigest.digest(passWord.getBytes());</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digest.length; i++) &#123;</div><div class="line">                    <span class="keyword">int</span> result = digest[i] &amp; <span class="number">0xff</span>;</div><div class="line">                    String hexString = Integer.toHexString(result)+<span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span> (hexString.length() &lt; <span class="number">2</span>) &#123;</div><div class="line">                        sb.append(<span class="string">"0"</span>);</div><div class="line">                    &#125;</div><div class="line">                    sb.append(hexString);</div><div class="line">                &#125;</div><div class="line">                passWord = sb.toString();</div><div class="line">                sb.delete(<span class="number">0</span>, sb.length());</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            System.out.println(passWord);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加密后结果：<br><code>6912c1901801301e61951b01281ca1f21ca1dd1dc17e12a1</code></p>
<p>补充 <code>Kotlin</code> 版本</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.security.MessageDigest</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * md5 加密工具类用于加密密码</div><div class="line"> * 默认没有加盐</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">object</span> Md5Utils &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> salt: <span class="built_in">Int</span> = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">md5</span><span class="params">(message: <span class="type">String</span>)</span></span>: String &#123;</div><div class="line">        <span class="keyword">val</span> sb = StringBuilder()</div><div class="line">        <span class="keyword">val</span> messageDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>)</div><div class="line">        <span class="keyword">val</span> digest: ByteArray = messageDigest.digest(message.toByteArray())</div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until digest.size) &#123;</div><div class="line">            <span class="keyword">val</span> result: <span class="built_in">Int</span> = digest[i].toInt() and (<span class="number">0xff</span>)</div><div class="line">            <span class="keyword">val</span> hexString = Integer.toHexString(result) + salt</div><div class="line">            <span class="keyword">if</span> (hexString.length &lt; <span class="number">2</span>) &#123;</div><div class="line">                sb.append(<span class="string">"0"</span>)</div><div class="line">            &#125;</div><div class="line">            sb.append(hexString)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 加密 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[StringBuilder源码分析]]></title>
      <url>http://youngxhui.top/2016/10/25/StringBuilder%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>#StringBuilder源码分析</p>
<hr>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p><a href="https://wevan.github.io/about/" target="_blank" rel="noopener">wevan</a><br><a href="http://youngxhui.github.io/about/" target="_blank" rel="noopener">youngxhui</a></p>
<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>一个可变的字符序列。此类提供一个与 <code>StringBuffer</code> 兼容的 <code>API</code>，但不保证同步。该类被设计用作 <code>StringBuffer</code> 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 <code>StringBuffer</code> 要快。 </p>
<h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></div><div class="line"><span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></div><div class="line"><span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></div></pre></td></tr></table></figure>
<p>可以看到StringBuilder继承了  </p>
<ol>
<li>Serializable：可以序列化的标志。</li>
<li>CharSequence接口：包含了charAt()、length() 、subSequence()、toString()这几个方法，String类也实现了这个接口。</li>
<li>抽象类AbstractStringBuilder，这个类封装了StringBuilder和StringBuffer大部分操作的实现</li>
</ol>
<hr>
<h2 id="CharSequence接口"><a href="#CharSequence接口" class="headerlink" title="CharSequence接口"></a>CharSequence接口</h2><p>这个接口是代表一个有序字符集合，使用该接口的方法一共有四个：<code>CharBuffer</code>、<code>String</code>、<code>StringBuffer</code>、<code>StringBuilder</code>。</p>
<h2 id="AbstractStringBuilder类"><a href="#AbstractStringBuilder类" class="headerlink" title="AbstractStringBuilder类"></a>AbstractStringBuilder类</h2><p>变量及构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>[] value;</div><div class="line"><span class="keyword">int</span> count;</div><div class="line">AbstractStringBuilder() &#123;&#125;</div><div class="line">AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</div><div class="line">    value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AbstractStringBuilder内部用一个char[]数组保存字符串，可以在构造的时候指定初始容量方法。</p>
<hr>
<h3 id="append-方法"><a href="#append-方法" class="headerlink" title="append()方法"></a>append()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> appendNull();</div><div class="line">    <span class="keyword">int</span> len = str.length();</div><div class="line">    ensureCapacityInternal(count + len);</div><div class="line">    str.getChars(<span class="number">0</span>, len, value, count);</div><div class="line">    count += len;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>append()方法用于追加字符，如果str是null,则会调用appendNull()方法。这个方法其实是追加了’n’、’u’、’l’、’l’这几个字符。如果不是null，则首先扩容，然后调用String的getChars()方法将str追加到value末尾。最后返回对象本身，所以append()可以连续调用。</p>
<hr>
<h2 id="Stringbuilder构造器"><a href="#Stringbuilder构造器" class="headerlink" title="Stringbuilder构造器"></a>Stringbuilder构造器</h2><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder()"></a>StringBuilder()</h3><p>这个构造器的作用是构造一个初始化不带参数的，初始化字节为<code>16</code>字节。</p>
<h3 id="StringBuilder-int"><a href="#StringBuilder-int" class="headerlink" title="StringBuilder(int)"></a>StringBuilder(int)</h3><p>构造一个其中不带字符的字符串生成器，初始容量由传入的 <code>int</code> 值指定。</p>
<h3 id="StringBuilder-String"><a href="#StringBuilder-String" class="headerlink" title="StringBuilder(String)"></a>StringBuilder(String)</h3><p>构造一个字符串生成器，并初始化为指定的字符串内容。该字符串生成器的初始容量为 16 加上字符串参数的长度。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</div><div class="line">        append(str);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>如果传入的字符串问 <code>null</code> 则会抛出空指针 <code>NullPointerException</code> 异常。</p>
<p><strong>示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderApi</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String str=<span class="keyword">null</span>;</div><div class="line">        StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder(str);</div><div class="line">        System.out.println(stringBuilder);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<blockquote>
<p>Exception in thread “main” java.lang.NullPointerException<br>    at java.lang.StringBuilder.<init>(StringBuilder.java:112)<br>    at StringBuilderApi.main(StringBuilderApi.java:7)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)</init></p>
</blockquote>
<h3 id="StringBulider-CharSequence"><a href="#StringBulider-CharSequence" class="headerlink" title="StringBulider(CharSequence)"></a>StringBulider(CharSequence)</h3><p>构造一个字符串生成器，包含与指定的 <code>CharSequence</code> 相同的字符。该字符串生成器的初始容量为 <code>16</code> 加上 <code>CharSequence</code> 参数的长度。 </p>
<hr>
<h2 id="append-方法-1"><a href="#append-方法-1" class="headerlink" title="append()方法"></a>append()方法</h2><p>该方法一共用13个重载函数,用于实现不同的数据类型。<code>Object</code>,<code>String</code>,<code>StringBuffer</code>,<code>CharSequence</code>,<code>char[]</code>,<code>boolen</code>,<code>int</code> ,<code>long</code>,<code>float</code>,<code>double</code> 等,但是他们的作用是一直的。那就是将参数添加到字符串中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.append(str);</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(CharSequence s)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.append(s);</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Stringbulider的appen()方法显然直接调用的父类AbstractStringBuilder中的该方法。</p>
<hr>
<h2 id="appendCodePoint-方法"><a href="#appendCodePoint-方法" class="headerlink" title="appendCodePoint()方法"></a>appendCodePoint()方法</h2><p>该方法是附加一个Uncode字符在字符串末尾。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * <span class="doctag">@since</span> 1.5</div><div class="line">    */</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">appendCodePoint</span><span class="params">(<span class="keyword">int</span> codePoint)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.appendCodePoint(codePoint);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="delete-方法"><a href="#delete-方法" class="headerlink" title="delete()方法"></a>delete()方法</h2><p>该方法是删除所字符串中的字符，所传入的参数为其实点和结束点。直接使用父类(<code>AbstractStringBuilder</code>)的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * <span class="doctag">@throws</span> StringIndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line">    */</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.delete(start, end);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h2><p>toString()方法返回了一个新的String对象，与原来的对象不共享内存。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// Create a copy, don't share the array</span></div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> String(value, <span class="number">0</span>, count);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h2><p><code>replace</code> 方法仍旧继承了父类的 <code>replace</code> 方法,是替换字符<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.replace(start, end, str);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="insert-方法"><a href="#insert-方法" class="headerlink" title="insert()方法"></a>insert()方法</h2><p>该方法是插入字符串。该方法重载了12个方法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该类所有的方法都是通过父类( <code>AbstractStringBuilder</code> )来实现。该方法与<code>String</code>和<code>StringBuffer</code>的区别在于，<code>String</code>是不可修改的，<code>StringBuffer</code>和<code>StringBuilder</code>是可以修改的，但是<code>StringBuffer</code>是线程安全的，<code>StringBuilder</code>是线程不安全的，但是在效率上， <code>StringBuffer</code> 因为对方法做了同步，所以一般是低于 <code>StringBuilder</code>的.</p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[String源码剖析]]></title>
      <url>http://youngxhui.top/2016/09/11/String%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>String是java程序中出现比较多的对象，分析一下String<br>首先String是由final修饰的。因此String不可变，无法继承。</p>
<blockquote>
<p>将方法或类声明为final主要目的是：确保它们不会再子类中改变语义。String类是final类，这意味着不允许任何人定义String的子类。换言之，如果有一个String的引用，它引用的一定是一个String对象，而不可能是其他类的对象。<br>——《Java核心技术 卷I》<br>作者：R eversal<br>链接：<a href="https://www.zhihu.com/question/31345592/answer/51639967" target="_blank" rel="noopener">https://www.zhihu.com/question/31345592/answer/51639967</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<h1 id="String不可变性及其原因"><a href="#String不可变性及其原因" class="headerlink" title="String不可变性及其原因"></a>String不可变性及其原因</h1><h2 id="String的不可变性"><a href="#String的不可变性" class="headerlink" title="String的不可变性"></a>String的不可变性</h2><p>什么叫String的不可变性呢？让我们来看一个例子。<br>​        String s=“abcd“；<br>上面的语句定义了一个字符串变量s，该变量指向字符串“abcd”，当初始化变量s时，会在堆中为s非配内容空间，当将字符串变量，赋值给另一个字符串变量时，例如：String s2=s；<br>此时，s2和s是相同的字符串对象，它们指向堆中的同一个内存空间。<br>当一个字符串连接其他字符时，他就指向了新的字符串对象，例如，s=s.concat(“ef“）， 此时，s=”abcdef”;它在内存中又指向了一个新的储存空间，存放字符串”abcdef”。<br>当一个字符串在堆中被分配内容时，它就是不可变的，任何String的方法都无法改变字符串本身，但它可以返回一个新的字符串对象。<br>由于String是不可变的，所以他们的空间可以共享。例如String str = “abc”;就和<br>JAVA<br>​        char data[] = {‘a’, ‘b’, ‘c’};<br>​        String str = new String(data);  </p>
<p>是等价的，它们共享一个存储空间。如果需要可以修改的字符串对象，可以使用StringBuffer和StringBuilder，StringBuffer是线程安全的，由于StringBuilder不需要进行同步操作，StringBuilder是比较快速的。  </p>
<ul>
<li>String不可变性的原因  <ul>
<li>源码中String的本质是一个final类型的char数组，既然是final类型，那个该数组引用value就不允许再指向其他对象了，因此只从类的设计角度讲：如果jdk源码中并没有提供对value本身的修改，那么理论上来讲String是不可变的</li>
<li>字符串池（String pool）的需求 在Java中，当初始化一个字符串变量时，如果字符串已经存在，就不会创建一个新的字符串变量，而是返回存在字符串的引用。 例如： String string1=”abcd”; String string2=”abcd”; 这两行代码在堆中只会创建一个字符串对象。如果字符串是可变的，改变另一个字符串变量，就会使另一个字符串变量指向错误的值。  </li>
<li>缓存字符串hashcode码的需要 字符串的hashcode是经常被使用的，字符串的不变性确保了hashcode的值一直是一样的，在需要hashcode时，就不需要每次都计算，这样会很高效。   </li>
<li>出于安全性考虑 字符串经常作为网络连接、数据库连接等参数，不可变就可以保证连接的安全性。</li>
</ul>
</li>
</ul>
<h1 id="签名（signature）"><a href="#签名（signature）" class="headerlink" title="签名（signature）"></a>签名（signature）</h1><hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span></div></pre></td></tr></table></figure>
<p>String使用了</p>
<ul>
<li>标记接口 java.io.Serializable</li>
<li>标记接口 Comparable</li>
<li>标记接口 CharSequenc</li>
</ul>
<h2 id="Compareable接口"><a href="#Compareable接口" class="headerlink" title="Compareable接口"></a>Compareable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此接口强行对实现它的每个类的对象进行整体排序。此排序被称为该类的自然排序，类的 <code>compareTo</code> 方法被称为它的自然比较方法 。</p>
<h2 id="CharSequence接口"><a href="#CharSequence接口" class="headerlink" title="CharSequence接口"></a>CharSequence接口</h2><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com//charsequence.png" alt=""><br>CharSequence的所有成员变量和方法。</p>
<h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><ul>
<li>private final char value[];//这是用于存储String字符的数组  </li>
<li>private final int offset;//这是value数组的第一个有效的字符的index  </li>
<li>private final int count;//这是String中的字符个数  </li>
<li>private int hash; // 存储String的hashcode，默认是0  </li>
<li>private static final long serialVersionUID = -6849794470754667710L;//在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常</li>
</ul>
<hr>
<h1 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p><code>String</code>类的构造器有十六个，除了提供了一个无参构造函数之外，还有十五个带参构造器。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/String%E6%9E%84%E9%80%A0%E5%99%A8.png" alt=""></p>
<h3 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.value = <span class="string">""</span>.value;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>初始化一个新创建的 String 对象，使其表示一个空字符序列。注意，由于 String 是不可变的，所以无需使用此构造方法</p>
<h3 id="String-String"><a href="#String-String" class="headerlink" title="String(String)"></a>String(String)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = original.value;</div><div class="line">    <span class="keyword">this</span>.hash = original.hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化一个新创建的 String对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。由于 String 是不可变的，所以无需使用此构造方法，除非需要 original 的显式副本。</p>
<h3 id="String-char"><a href="#String-char" class="headerlink" title="String(char)"></a>String(char)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。该字符数组的内容已被复制；后续对字符数组的修改不会影响新创建的字符串。 </p>
<h3 id="String-char-int-int"><a href="#String-char-int-int" class="headerlink" title="String(char,int,int)"></a>String(char,int,int)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (offset &lt;= value.length) &#123;</div><div class="line">                <span class="keyword">this</span>.value = <span class="string">""</span>.value;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>作用为分配一个新的value，将传入的char数组进行一次复制，offset是开始索引位置，count表示数组长度。</p>
<h3 id="String-int-int-int"><a href="#String-int-int-int" class="headerlink" title="String(int,int,int)"></a>String(int,int,int)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (offset &lt;= codePoints.length) &#123;</div><div class="line">                <span class="keyword">this</span>.value = <span class="string">""</span>.value;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></div><div class="line">        <span class="keyword">if</span> (offset &gt; codePoints.length - count) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> end = offset + count;</div><div class="line"></div><div class="line">        <span class="comment">// Pass 1: Compute precise size of char[]</span></div><div class="line">        <span class="keyword">int</span> n = count;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; end; i++) &#123;</div><div class="line">            <span class="keyword">int</span> c = codePoints[i];</div><div class="line">            <span class="keyword">if</span> (Character.isBmpCodePoint(c))</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Character.isValidCodePoint(c))</div><div class="line">                n++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(Integer.toString(c));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Pass 2: Allocate and fill in char[]</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">char</span>[] v = <span class="keyword">new</span> <span class="keyword">char</span>[n];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = offset, j = <span class="number">0</span>; i &lt; end; i++, j++) &#123;</div><div class="line">            <span class="keyword">int</span> c = codePoints[i];</div><div class="line">            <span class="keyword">if</span> (Character.isBmpCodePoint(c))</div><div class="line">                v[j] = (<span class="keyword">char</span>)c;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                Character.toSurrogates(c, v, j++);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.value = v;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="checkBounds-方法"><a href="#checkBounds-方法" class="headerlink" title="checkBounds()方法"></a>checkBounds()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkBounds</span><span class="params">(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (length &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(length);</div><div class="line">        <span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</div><div class="line">        <span class="keyword">if</span> (offset &gt; bytes.length - length)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + length);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这是一个私有的静态方法用于检查边界的方法。</p>
<h3 id="length-方法"><a href="#length-方法" class="headerlink" title="length()方法"></a>length()方法</h3><p>获得长度的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> value.length;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="isEmpty-方法"><a href="#isEmpty-方法" class="headerlink" title="isEmpty()方法"></a>isEmpty()方法</h3><p>检查字符串长度是否是0，当长度为0返回true，否则返回false。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> value.length == <span class="number">0</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="charAt-方法"><a href="#charAt-方法" class="headerlink" title="charAt()方法"></a>charAt()方法</h3><p>该方法返回的值为char数组中的其中一个。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> value[index];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="codePointAt-方法"><a href="#codePointAt-方法" class="headerlink" title="codePointAt()方法"></a>codePointAt()方法</h3><p>用于返回指定索引处的字符，与<code>codePointBefore</code>方法类似，<code>codePointBefore</code>返回的的是索引之前的值</p>
<p><strong>codePointAt</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Character.codePointAtImpl(value, index, value.length);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>codePointBefore</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointBefore</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> ((i &lt; <span class="number">0</span>) || (i &gt;= value.length)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Character.codePointBeforeImpl(value, index, <span class="number">0</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h3><p>首先<code>equals</code>返回的为一个<code>boolean</code>值。<br><code>instanceof</code>是一个<code>java</code>的二元操作符，作用是检查左面是否为右面的实例化。返回值是<code>boolean</code>类型。<br>该方法是将一个传入对象进行一次复制，将复制对象的字符数组与原对象的字符数组进行比较。<br>这样就确保<code>equals</code>比较的是内容。这样就和<code>==</code>有了区分</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</div><div class="line">            String anotherString = (String)anObject;</div><div class="line">            <span class="keyword">int</span> n = value.length;</div><div class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</div><div class="line">                <span class="keyword">char</span> v1[] = value;</div><div class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="compareTo-方法"><a href="#compareTo-方法" class="headerlink" title="compareTo()方法"></a>compareTo()方法</h3><p>按字典顺序比较两个字符串,如果相通返回0，如果不同返回他们之间的差值。<br>同样是通过字符数组进行比较。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len1 = value.length;</div><div class="line">        <span class="keyword">int</span> len2 = anotherString.value.length;</div><div class="line">        <span class="keyword">int</span> lim = Math.min(len1, len2);</div><div class="line">        <span class="keyword">char</span> v1[] = value;</div><div class="line">        <span class="keyword">char</span> v2[] = anotherString.value;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (k &lt; lim) &#123;</div><div class="line">            <span class="keyword">char</span> c1 = v1[k];</div><div class="line">            <span class="keyword">char</span> c2 = v2[k];</div><div class="line">            <span class="keyword">if</span> (c1 != c2) &#123;</div><div class="line">                <span class="keyword">return</span> c1 - c2;</div><div class="line">            &#125;</div><div class="line">            k++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> len1 - len2;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><del>### compare()方法</del></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CaseInsensitiveComparator</span></span></div><div class="line">            <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line">        <span class="comment">// use serialVersionUID from JDK 1.2.2 for interoperability</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8575799808933029326L</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> n1 = s1.length();</div><div class="line">            <span class="keyword">int</span> n2 = s2.length();</div><div class="line">            <span class="keyword">int</span> min = Math.min(n1, n2);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min; i++) &#123;</div><div class="line">                <span class="keyword">char</span> c1 = s1.charAt(i);</div><div class="line">                <span class="keyword">char</span> c2 = s2.charAt(i);</div><div class="line">                <span class="keyword">if</span> (c1 != c2) &#123;</div><div class="line">                    c1 = Character.toUpperCase(c1);</div><div class="line">                    c2 = Character.toUpperCase(c2);</div><div class="line">                    <span class="keyword">if</span> (c1 != c2) &#123;</div><div class="line">                        c1 = Character.toLowerCase(c1);</div><div class="line">                        c2 = Character.toLowerCase(c2);</div><div class="line">                        <span class="keyword">if</span> (c1 != c2) &#123;</div><div class="line">                            <span class="comment">// No overflow because of numeric promotion</span></div><div class="line">                            <span class="keyword">return</span> c1 - c2;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> n1 - n2;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/** Replaces the de-serialized object. */</span></div><div class="line">        <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> CASE_INSENSITIVE_ORDER; &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="startsWith-方法"><a href="#startsWith-方法" class="headerlink" title="startsWith()方法"></a>startsWith()方法</h3><p>检查前缀是否匹配。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix, <span class="keyword">int</span> toffset)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> ta[] = value;</div><div class="line">        <span class="keyword">int</span> to = toffset;</div><div class="line">        <span class="keyword">char</span> pa[] = prefix.value;</div><div class="line">        <span class="keyword">int</span> po = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pc = prefix.value.length;</div><div class="line">        <span class="comment">// Note: toffset might be near -1&gt;&gt;&gt;1.</span></div><div class="line">        <span class="keyword">if</span> ((toffset &lt; <span class="number">0</span>) || (toffset &gt; value.length - pc)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (--pc &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (ta[to++] != pa[po++]) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a>hashCode()方法</h3><p>返回String的hashCode，hashCode的计算方法是<code>s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> h = hash;</div><div class="line">        <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">char</span> val[] = value;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</div><div class="line">                h = <span class="number">31</span> * h + val[i];</div><div class="line">            &#125;</div><div class="line">            hash = h;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> h;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="indexOf方法"><a href="#indexOf方法" class="headerlink" title="indexOf方法"></a>indexOf方法</h3><p><code>indexOf</code>一共有六个构造方法。<br>返回字符出现在字符串中第一次的位置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> max = value.length;</div><div class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">            fromIndex = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fromIndex &gt;= max) &#123;</div><div class="line">            <span class="comment">// Note: fromIndex might be near -1&gt;&gt;&gt;1.</span></div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) &#123;</div><div class="line">            <span class="comment">// handle most cases here (ch is a BMP code point or a</span></div><div class="line">            <span class="comment">// negative value (invalid code point))</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">char</span>[] value = <span class="keyword">this</span>.value;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = fromIndex; i &lt; max; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (value[i] == ch) &#123;</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> indexOfSupplementary(ch, fromIndex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="substring-方法"><a href="#substring-方法" class="headerlink" title="substring()方法"></a>substring()方法</h3><p>截取代码中的片段，值得注意的是在最后的返回值中它会new一个新String类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> subLen = endIndex - beginIndex;</div><div class="line">        <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span></div><div class="line">                : <span class="keyword">new</span> String(value, beginIndex, subLen);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h3><p>该方法主要用于连接字符串，Api文档中的例子</p>
<blockquote>
<p>“cares”.concat(“s”) returns “caress”</p>
</blockquote>
<p>从功能上看<code>concat</code>和<code>+</code>是类似的。但是他们之间使用区别的。<br><code>concat</code>只能连接字符串，如果要连接其他类型要转化为String。<br><code>+</code>可以连接非字符串。<br>如果长度为0返回原来的数组，否则就new一个数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> otherLen = str.length();</div><div class="line">       <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">int</span> len = value.length;</div><div class="line">       <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</div><div class="line">       str.getChars(buf, len);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><del>### replace()方法</del> </p>
<p>replace用于替换String中的字符。<br>先用if来判断，来减少不必要的循环。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (oldChar != newChar) &#123;</div><div class="line">            <span class="keyword">int</span> len = value.length;</div><div class="line">            <span class="keyword">int</span> i = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">char</span>[] val = value; <span class="comment">/* avoid getfield opcode */</span></div><div class="line"></div><div class="line">            <span class="keyword">while</span> (++i &lt; len) &#123;</div><div class="line">                <span class="keyword">if</span> (val[i] == oldChar) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i &lt; len) &#123;</div><div class="line">                <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[len];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">                    buf[j] = val[j];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">                    <span class="keyword">char</span> c = val[i];</div><div class="line">                    buf[i] = (c == oldChar) ? newChar : c;</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><del>### split</del></p>
<p><del>### replaceAll</del></p>
<h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h3><p>这个是jdk1.8的新方法，让我们分析一下。<br>join的作用：通过一个字符或字符串来连接其他字符<br>注释文档的例子：</p>
<blockquote>
<p>String message = String.join(“-“, “Java”, “is”, “cool”);<br>  ​       // message returned is: “Java-is-cool”</p>
</blockquote>
<p>官方文档中的注释提示</p>
<blockquote>
<p><strong> Note that if an element is null, then {@code “null”} is added.</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">join</span><span class="params">(CharSequence delimiter, CharSequence... elements)</span> </span>&#123;</div><div class="line">       Objects.requireNonNull(delimiter);</div><div class="line">       Objects.requireNonNull(elements);</div><div class="line">       <span class="comment">// Number of elements not likely worth Arrays.stream overhead.</span></div><div class="line">       StringJoiner joiner = <span class="keyword">new</span> StringJoiner(delimiter);</div><div class="line">       <span class="keyword">for</span> (CharSequence cs: elements) &#123;</div><div class="line">           joiner.add(cs);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> joiner.toString();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><del>### toLowerCase()方法</del></p>
<p>该方法是将传入的字符串转化为一个小写的字符串。<br>这里有一个<code>scan</code>，这个<code>scan</code>是一个标签，用于跳出循环。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">(Locale locale)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (locale == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> firstUpper;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> len = value.length;</div><div class="line">    <span class="comment">/* Now check if there are any characters that need to be changed. */</span></div><div class="line">    scan: &#123;</div><div class="line">        <span class="keyword">for</span> (firstUpper = <span class="number">0</span> ; firstUpper &lt; len; ) &#123;</div><div class="line">            <span class="keyword">char</span> c = value[firstUpper];</div><div class="line">            <span class="keyword">if</span> ((c &gt;= Character.MIN_HIGH_SURROGATE)</div><div class="line">                    &amp;&amp; (c &lt;= Character.MAX_HIGH_SURROGATE)) &#123;</div><div class="line">                <span class="keyword">int</span> supplChar = codePointAt(firstUpper);</div><div class="line">                <span class="keyword">if</span> (supplChar != Character.toLowerCase(supplChar)) &#123;</div><div class="line">                    <span class="keyword">break</span> scan;</div><div class="line">                &#125;</div><div class="line">                firstUpper += Character.charCount(supplChar);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (c != Character.toLowerCase(c)) &#123;</div><div class="line">                    <span class="keyword">break</span> scan;</div><div class="line">                &#125;</div><div class="line">                firstUpper++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[len];</div><div class="line">    <span class="keyword">int</span> resultOffset = <span class="number">0</span>;  <span class="comment">/* result may grow, so i+resultOffset</span></div><div class="line">                            * is the write location in result */</div><div class="line"></div><div class="line">    <span class="comment">/* Just copy the first few lowerCase characters. */</span></div><div class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, firstUpper);</div><div class="line"></div><div class="line">    String lang = locale.getLanguage();</div><div class="line">    <span class="keyword">boolean</span> localeDependent =</div><div class="line">            (lang == <span class="string">"tr"</span> || lang == <span class="string">"az"</span> || lang == <span class="string">"lt"</span>);</div><div class="line">    <span class="keyword">char</span>[] lowerCharArray;</div><div class="line">    <span class="keyword">int</span> lowerChar;</div><div class="line">    <span class="keyword">int</span> srcChar;</div><div class="line">    <span class="keyword">int</span> srcCount;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = firstUpper; i &lt; len; i += srcCount) &#123;</div><div class="line">        srcChar = (<span class="keyword">int</span>)value[i];</div><div class="line">        <span class="keyword">if</span> ((<span class="keyword">char</span>)srcChar &gt;= Character.MIN_HIGH_SURROGATE</div><div class="line">                &amp;&amp; (<span class="keyword">char</span>)srcChar &lt;= Character.MAX_HIGH_SURROGATE) &#123;</div><div class="line">            srcChar = codePointAt(i);</div><div class="line">            srcCount = Character.charCount(srcChar);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            srcCount = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (localeDependent ||</div><div class="line">            srcChar == <span class="string">'\u03A3'</span> || <span class="comment">// GREEK CAPITAL LETTER SIGMA</span></div><div class="line">            srcChar == <span class="string">'\u0130'</span>) &#123; <span class="comment">// LATIN CAPITAL LETTER I WITH DOT ABOVE</span></div><div class="line">            lowerChar = ConditionalSpecialCasing.toLowerCaseEx(<span class="keyword">this</span>, i, locale);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            lowerChar = Character.toLowerCase(srcChar);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((lowerChar == Character.ERROR)</div><div class="line">                || (lowerChar &gt;= Character.MIN_SUPPLEMENTARY_CODE_POINT)) &#123;</div><div class="line">            <span class="keyword">if</span> (lowerChar == Character.ERROR) &#123;</div><div class="line">                lowerCharArray =</div><div class="line">                        ConditionalSpecialCasing.toLowerCaseCharArray(<span class="keyword">this</span>, i, locale);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (srcCount == <span class="number">2</span>) &#123;</div><div class="line">                resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                lowerCharArray = Character.toChars(lowerChar);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/* Grow result if needed */</span></div><div class="line">            <span class="keyword">int</span> mapLen = lowerCharArray.length;</div><div class="line">            <span class="keyword">if</span> (mapLen &gt; srcCount) &#123;</div><div class="line">                <span class="keyword">char</span>[] result2 = <span class="keyword">new</span> <span class="keyword">char</span>[result.length + mapLen - srcCount];</div><div class="line">                System.arraycopy(result, <span class="number">0</span>, result2, <span class="number">0</span>, i + resultOffset);</div><div class="line">                result = result2;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; mapLen; ++x) &#123;</div><div class="line">                result[i + resultOffset + x] = lowerCharArray[x];</div><div class="line">            &#125;</div><div class="line">            resultOffset += (mapLen - srcCount);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result[i + resultOffset] = (<span class="keyword">char</span>)lowerChar;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(result, <span class="number">0</span>, len + resultOffset);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="trim-方法"><a href="#trim-方法" class="headerlink" title="trim()方法"></a>trim()方法</h3><p>trim方法是去除前或后无效空格。<br>通过两个循环，一个从前开始，一个从后开始来寻找空格。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = value.length;</div><div class="line">        <span class="keyword">int</span> st = <span class="number">0</span>;</div><div class="line">        <span class="keyword">char</span>[] val = value;    <span class="comment">/* avoid getfield opcode */</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[st] &lt;= <span class="string">' '</span>)) &#123;</div><div class="line">            st++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[len - <span class="number">1</span>] &lt;= <span class="string">' '</span>)) &#123;</div><div class="line">            len--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ((st &gt; <span class="number">0</span>) || (len &lt; value.length)) ? substring(st, len) : <span class="keyword">this</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="toCharArray-方法"><a href="#toCharArray-方法" class="headerlink" title="toCharArray()方法"></a>toCharArray()方法</h3><p>该方法是用于将字符串复制为一个新的字符数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray() &#123;</div><div class="line">        <span class="comment">// Cannot use Arrays.copyOf because of class initialization order issues</span></div><div class="line">        <span class="keyword">char</span> result[] = <span class="keyword">new</span> <span class="keyword">char</span>[value.length];</div><div class="line">        System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, value.length);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="intern方法"><a href="#intern方法" class="headerlink" title="intern方法"></a>intern方法</h3><p>native关键字是一个用于修饰原生态方法。作用是实现其他接口的语言如(c/c++)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub for Windows使用教程(四)]]></title>
      <url>http://youngxhui.top/2016/08/28/GitHub-for-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Github-for-windows使用教程-四"><a href="#Github-for-windows使用教程-四" class="headerlink" title="Github for windows使用教程(四)"></a>Github for windows使用教程(四)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上述的几个教程里讲解了一些Github的基础使用，现在开始讲解一些使用技巧。</p>
<h2 id="查找内容"><a href="#查找内容" class="headerlink" title="查找内容"></a>查找内容</h2><p>在github页面上是没有搜索的按钮，如何搜索呢。<br>在网页上按 <code>T</code>就会出现。<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E6%9F%A5%E6%89%BET.png" alt=""><br>这样我们就能很方便的查找到我们需要的代码了。</p>
<h2 id="评论小表情"><a href="#评论小表情" class="headerlink" title="评论小表情"></a>评论小表情</h2><p>常常在<strong>版本描述</strong>或者<strong>pull request</strong>时我们需要对伙伴的代码进行一下评论与说明，光是文字有点很死板，其实github给我有<strong>emoji</strong>，如何使用呢？其实很简单，只需要<strong>冒号</strong>就可以 <code>：</code>，这样我们就可以看到emoji表情，当然默认会显示五个常用的，你也可以继续敲下emoji的名字，出现更多（<a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">这里有所有的表情</a>）。<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%AE%A2%E6%88%B7%E7%AB%AFemoji.png" alt=""><br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/emoji.png" alt=""></p>
<h2 id="忽略不想上传的文件"><a href="#忽略不想上传的文件" class="headerlink" title="忽略不想上传的文件"></a>忽略不想上传的文件</h2><p>有些在github中的文件我们是不想上传的，我们如何过滤掉它们呢？<br>在github中对不想上传的文件点击右键。就会出现下面选项。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%BF%BD%E7%95%A5.png" alt=""><br><strong>Ignore file</strong>忽略这个文件<br><strong>Ignore all.txt files</strong> 忽略所有的以.txt结尾的文件<br>这样就可以过滤掉你不想上传的文件</p>
<h2 id="搜索项目"><a href="#搜索项目" class="headerlink" title="搜索项目"></a>搜索项目</h2><p>如何高效的搜索一个你想要的库呢？<br>我们常常评判一个项目的标准有star数目，fork数目和跟新时间。<br>通过搜索命令</p>
<p><strong>stars</strong></p>
<pre><code>stars:&gt;1000
</code></pre><p>表示star数目大于1000。</p>
<p><strong>fork</strong></p>
<pre><code>fork:&gt;1000
</code></pre><p>表示fork数目大于1000。</p>
<p><strong>语言搜索</strong></p>
<p>java，html等等</p>
<p>综合一下就是，比如你要查找一个stars大于1000的，fork大于200的java代码。</p>
<pre><code>stars:&gt;1000 fork:&gt;200 java
</code></pre><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E6%90%9C%E7%B4%A2.png" alt=""></p>
<p>就是这样。</p>
<h2 id="查看项目中的语言类型"><a href="#查看项目中的语言类型" class="headerlink" title="查看项目中的语言类型"></a>查看项目中的语言类型</h2><p>一个项目中，可能使用了多种语言，我们如何一下子就能看到一个项目使用了什么语言？其实很简单，Github已经为我们统计好了。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%9C%8B.png" alt=""></p>
<p>也行你注意过，但是没有发现它有什么用。<br>点击下面的彩条</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/BaiduShurufa_2016-9-4_22-25-50.png" alt=""></p>
<p>github已经为我们统计好这个项目所有的语言及其比例。</p>
<p>一些常见的代码表示颜色</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/BaiduShurufa_2016-9-24_17-7-2.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>码字不易，终于写完了，如果觉得对你有帮助，我的目的就达到了。<br>谢谢<br>如有错误，还望指正。</p>
]]></content>
      
        
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基本操作]]></title>
      <url>http://youngxhui.top/2016/08/13/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="下载安装Git客户端"><a href="#下载安装Git客户端" class="headerlink" title="下载安装Git客户端"></a>下载安装Git客户端</h2><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/git.png" alt="Git"></p>
<p><a href="https://git-scm.com/download" target="_blank" rel="noopener">git</a>下载</p>
<h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p>装完成后，还需要最后一步设置，在命令行输入：</p>
<blockquote>
<p>   $ git config –global user.name “Your Name”<br>   $ git config –global user.email “email@example.com”</p>
</blockquote>
<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p>
<h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><blockquote>
<p>   $ git init</p>
</blockquote>
<h2 id="添加-add"><a href="#添加-add" class="headerlink" title="添加 add"></a>添加 add</h2><h3 id="把文件添加到仓库："><a href="#把文件添加到仓库：" class="headerlink" title="把文件添加到仓库："></a>把文件添加到仓库：</h3><blockquote>
<p>   $ git add readme.txt</p>
</blockquote>
<p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<h3 id="把文件提交到仓库："><a href="#把文件提交到仓库：" class="headerlink" title="把文件提交到仓库："></a>把文件提交到仓库：</h3><blockquote>
<p>   $ git commit -m “add readme”</p>
</blockquote>
<p><code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<h2 id="同步到Github"><a href="#同步到Github" class="headerlink" title="同步到Github"></a>同步到Github</h2><h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><p>例如我们给一个叫Test的仓库同步</p>
<blockquote>
<p>   $ git remote add origin git@github.com:youngxhui/Test.git</p>
</blockquote>
<p>现在可以push到你的仓库了</p>
<blockquote>
<p>   $ git push -u origin master</p>
</blockquote>
<p>第一次推送时，我们要添加<code>-u</code></p>
<p>之后我们可以这条命令</p>
<blockquote>
<p>   $ git push origin master</p>
<h3 id="下载到github"><a href="#下载到github" class="headerlink" title="下载到github"></a>下载到github</h3><p>从github上下载到本地</p>
<pre><code>$ git clone git@github.com:youngxhui/nuc_JavaLab.git
</code></pre></blockquote>
<h2 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h2><h3 id="分支的创建"><a href="#分支的创建" class="headerlink" title="分支的创建"></a>分支的创建</h3><p>创建分支</p>
<blockquote>
<p>   $ git checkout -b dev</p>
</blockquote>
<p><code>-b</code> 参数表示创建并切换</p>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p>用git branch命令查看当前分支：</p>
<blockquote>
<pre><code>$ git branch
* dev
master
</code></pre></blockquote>
<p>git branch命令会列出所有分支，<strong>当前分支</strong>前面会标一个<code>*</code>号。</p>
<p>我们就可以在dev分支上正常提交</p>
<blockquote>
<p>   $ git add readme.txt </p>
<p>   $ git commit -m “branch test”</p>
</blockquote>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>切换回master分支：</p>
<blockquote>
<p>   $ git checkout master</p>
</blockquote>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>把<code>dev</code>分支合并到<code>master</code></p>
<blockquote>
<p>   $ git merge dev</p>
</blockquote>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><blockquote>
<p>   $ git branch -d dev</p>
</blockquote>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>http://youngxhui.top/2016/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><blockquote>
<p><a href="http://baike.baidu.com/link?url=Os-gO7uRt5qvqvM1ibNbtqYJw6ABNumxNHTGVmJZP7JSUy3mCygBSnhUN-zQG6s3X1G3jK47uXqH4jzojaTbGa" target="_blank" rel="noopener">正则表达式，又称<strong>正规表示法</strong>、<strong>常规表示法</strong>（英语：<em>Regular Expression</em>，在代码中常简写为<em>regex、regexp</em>或<em>RE</em>），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。</a></p>
</blockquote>
<p>正则表达式可以对字符串进行查找，提取，分割，替换等操作。</p>
<h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><p>正则表达式就是一个用于匹配字符串的模板，可以匹配一串字符串，所以创造正则表达式就是创建一个特殊字符串。<br><strong>正则表达式所支持的合法字符</strong></p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:right">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td style="text-align:right">字符x（x可代表任何合法的字符）</td>
</tr>
<tr>
<td>\0mnn</td>
<td style="text-align:right">八进制数用\0mnn</td>
</tr>
<tr>
<td>\xhh</td>
<td style="text-align:right">十六进制值0xhh所表示的字符</td>
</tr>
<tr>
<td>\xhhh</td>
<td style="text-align:right">十六进制值0xhhhh所表示的Unicode字符</td>
</tr>
<tr>
<td>\t</td>
<td style="text-align:right">制表符（’\u0009’）</td>
</tr>
<tr>
<td>\n</td>
<td style="text-align:right">新行（换行）符(‘\u000A’)</td>
</tr>
<tr>
<td>\r</td>
<td style="text-align:right">回车符（’\u000D’）</td>
</tr>
<tr>
<td>\f</td>
<td style="text-align:right">换页符（’\u000C’）</td>
</tr>
<tr>
<td>\a</td>
<td style="text-align:right">报警（bell）符（’\u0007’）</td>
</tr>
<tr>
<td>\e</td>
<td style="text-align:right">Escape符（’\u001B’）</td>
</tr>
<tr>
<td>\cx</td>
<td style="text-align:right">x对应的控制符。例如，\cM 匹配ctrl-M。x值必须为A-Z或者a~z之一</td>
</tr>
</tbody>
</table>
<p><strong>正则表达式中的特殊字符</strong></p>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th style="text-align:right">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$</td>
<td style="text-align:right">匹配一行的结尾。要匹配\$字符本身</td>
</tr>
<tr>
<td>^</td>
<td style="text-align:right">匹配一行的开头。要匹配^字符本身</td>
</tr>
<tr>
<td>()</td>
<td style="text-align:right">标记子表达式的开始和结束位置。要用匹配这些字符。</td>
</tr>
<tr>
<td>[]</td>
<td style="text-align:right">用于确定中括号表达式的开始和结束位置。</td>
</tr>
<tr>
<td>{}</td>
<td style="text-align:right">用于标记前面子表达式的出现频率</td>
</tr>
<tr>
<td>*</td>
<td style="text-align:right">指定前面子表达式出现零次或多次</td>
</tr>
<tr>
<td>+</td>
<td style="text-align:right">指定前面子表达式可以出现一次或多次</td>
</tr>
<tr>
<td>?</td>
<td style="text-align:right">指定前面子表达式可以出现零次或一次</td>
</tr>
<tr>
<td>.</td>
<td style="text-align:right">匹配除换行符\n之外的任何单字符</td>
</tr>
<tr>
<td>\</td>
<td style="text-align:right">用于转义下一个字符，或指定八进制，十六进制字符。</td>
</tr>
<tr>
<td>\</td>
<td style="text-align:right">指定两项之间任选一项</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[底部导航按钮]]></title>
      <url>http://youngxhui.top/2016/08/05/%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%8C%89%E9%92%AE/</url>
      <content type="html"><![CDATA[<h1 id="关于底部按钮的实现"><a href="#关于底部按钮的实现" class="headerlink" title="关于底部按钮的实现"></a>关于底部按钮的实现</h1><p>关于底部导航按钮网上实现底部按钮的方法有很多，在这里RadioGroup+ViewPager+fragmnt实现的。</p>
<p>底部导航支持底部点击和滑动。</p>
<p>上图</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/S60805-173456.jpg" alt="效果图"></p>
<p>布局代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RadioGroup</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rg_tab_bar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"56dp"</span></div><div class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/bg_white"</span></div><div class="line">        <span class="attr">android:elevation</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/rb_channel"</span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/tab_menu_item"</span></div><div class="line">            <span class="attr">android:drawableTop</span>=<span class="string">"@drawable/tab_menu_doc"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@string/tab_menu_doc"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/rb_message"</span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/tab_menu_item"</span></div><div class="line">            <span class="attr">android:drawableTop</span>=<span class="string">"@drawable/tab_menu_camera"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@string/tab_menu_camera"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/rb_better"</span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/tab_menu_item"</span></div><div class="line">            <span class="attr">android:drawableTop</span>=<span class="string">"@drawable/tab_menu_user"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@string/tab_menu_user"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/div_tab_bar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"2px"</span></div><div class="line">        <span class="attr">android:layout_above</span>=<span class="string">"@id/rg_tab_bar"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/div_white"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/vpager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_above</span>=<span class="string">"@id/div_tab_bar"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>activity代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">RadioGroup</span>.<span class="title">OnCheckedChangeListener</span>,</span></div><div class="line">        <span class="title">ViewPager</span>.<span class="title">OnPageChangeListener</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">//UI Objects</span></div><div class="line">    <span class="keyword">private</span> RadioGroup rg_tab_bar;</div><div class="line">    <span class="keyword">private</span> RadioButton rb_channel;</div><div class="line">    <span class="keyword">private</span> RadioButton rb_message;</div><div class="line">    <span class="keyword">private</span> RadioButton rb_better;</div><div class="line">    <span class="keyword">private</span> ViewPager vpager;</div><div class="line">    <span class="keyword">private</span> MyFragmentPagerAdapter mAdapter;</div><div class="line"></div><div class="line">    <span class="comment">//几个代表页面的常量</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_ONE = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_TWO = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_THREE = <span class="number">2</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mAdapter = <span class="keyword">new</span> MyFragmentPagerAdapter(getSupportFragmentManager());</div><div class="line">        bindViews();</div><div class="line">        rb_channel.setChecked(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindViews</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        rg_tab_bar = (RadioGroup) findViewById(R.id.rg_tab_bar);</div><div class="line">        rb_channel = (RadioButton) findViewById(R.id.rb_channel);</div><div class="line">        rb_message = (RadioButton) findViewById(R.id.rb_message);</div><div class="line">        rb_better = (RadioButton) findViewById(R.id.rb_better);</div><div class="line">        rg_tab_bar.setOnCheckedChangeListener(<span class="keyword">this</span>);</div><div class="line">        vpager = (ViewPager) findViewById(R.id.vpager);</div><div class="line">        vpager.setAdapter(mAdapter);</div><div class="line">        vpager.setCurrentItem(<span class="number">0</span>);</div><div class="line">        vpager.addOnPageChangeListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (checkedId) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.rb_channel:</div><div class="line">                vpager.setCurrentItem(PAGE_ONE);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.rb_message:</div><div class="line">                vpager.setCurrentItem(PAGE_TWO);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.rb_better:</div><div class="line">                vpager.setCurrentItem(PAGE_THREE);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//重写ViewPager页面切换的处理方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">        <span class="comment">//state的状态有三个，0表示什么都没做，1正在滑动，2滑动完毕</span></div><div class="line">        <span class="keyword">if</span> (state == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">switch</span> (vpager.getCurrentItem()) &#123;</div><div class="line">                <span class="keyword">case</span> PAGE_ONE:</div><div class="line">                    rb_channel.setChecked(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PAGE_TWO:</div><div class="line">                    rb_message.setChecked(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PAGE_THREE:</div><div class="line">                    rb_better.setChecked(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FragmentPagerAdapter数据适配器</p>
<p>MyFragmentPagerAdapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGER_COUNT = <span class="number">3</span>;</div><div class="line">    <span class="keyword">private</span> DocFRAG docFRAG = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> CameraFRAG cameraFRAG = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> UserFRAG userFRAG = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFragmentPagerAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        docFRAG = <span class="keyword">new</span> DocFRAG();</div><div class="line">        cameraFRAG = <span class="keyword">new</span> CameraFRAG();</div><div class="line">        userFRAG = <span class="keyword">new</span> UserFRAG();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> PAGER_COUNT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup vg, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.instantiateItem(vg, position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"position Destory"</span> + position);</div><div class="line">        <span class="keyword">super</span>.destroyItem(container, position, object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Fragment fragment = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">switch</span> (position) &#123;</div><div class="line">            <span class="keyword">case</span> MainActivity.PAGE_ONE:</div><div class="line">                fragment = docFRAG;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MainActivity.PAGE_TWO:</div><div class="line">                fragment = cameraFRAG;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MainActivity.PAGE_THREE:</div><div class="line">                fragment = userFRAG;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fragment;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FlaotActionButton详解]]></title>
      <url>http://youngxhui.top/2016/08/05/FlaotActionButton%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<pre><code>今天把Android的学习的一些东西记录一下，方便日后使用。
</code></pre><h1 id="FlaotActionButton详解"><a href="#FlaotActionButton详解" class="headerlink" title="FlaotActionButton详解"></a>FlaotActionButton详解</h1><p>FlaotActionButton是android的一个很好用的控件。<br>在看了很多源码后逐步掌握一些知识了。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/5798408d91ee074073000000.gif" alt=""></p>
<h2 id="导入依赖项"><a href="#导入依赖项" class="headerlink" title="导入依赖项"></a>导入依赖项</h2><p>首先要在build.gradle中导入依赖项</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:24.1.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.getbase:floatingactionbutton:1.10.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="noopener">GitHub地址</a></p>
<p>代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionsMenu</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_alignParentEnd</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"31dp"</span></div><div class="line">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"32dp"</span></div><div class="line">        <span class="attr">app:fab_addButtonSize</span>=<span class="string">"normal"</span></div><div class="line">        <span class="attr">app:fab_labelStyle</span>=<span class="string">"@style/menu_labels_style"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab_carm"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:backgroundTint</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">            <span class="attr">app:fabSize</span>=<span class="string">"mini"</span></div><div class="line">            <span class="attr">app:fab_title</span>=<span class="string">"拍照"</span></div><div class="line">            <span class="attr">fab:fab_icon</span>=<span class="string">"@drawable/ic_add_a_photo_black_24dp"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab_etid"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:fabSize</span>=<span class="string">"mini"</span></div><div class="line">            <span class="attr">app:fab_title</span>=<span class="string">"录入"</span></div><div class="line">            <span class="attr">fab:fab_icon</span>=<span class="string">"@drawable/ic_border_color_black_24dp"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab_pic"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:fabSize</span>=<span class="string">"mini"</span></div><div class="line">            <span class="attr">app:fab_title</span>=<span class="string">"识别图片"</span></div><div class="line">            <span class="attr">fab:fab_icon</span>=<span class="string">"@drawable/ic_photo_black_24dp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">com.getbase.floatingactionbutton.FloatingActionsMenu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>要适配<code>menu_labels_style</code>才可以使用FloatingActionsMenu</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"menu_labels_style"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@drawable/fab_label_background<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>适配<code>fab_label_background</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/black_semi_transparent"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">padding</span></span></div><div class="line">        <span class="attr">android:left</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:top</span>=<span class="string">"4dp"</span></div><div class="line">        <span class="attr">android:right</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:bottom</span>=<span class="string">"4dp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">corners</span></span></div><div class="line">        <span class="attr">android:radius</span>=<span class="string">"2dp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="解析FloatActionButton代码"><a href="#解析FloatActionButton代码" class="headerlink" title="解析FloatActionButton代码"></a>解析FloatActionButton代码</h2><p>FloatActionButton中<br>通过<strong>app:fabSize</strong>来确定大小<strong>normal</strong>，<strong>mini</strong>，<strong>auto</strong>。<br>通过<strong>app:fab_title</strong>设置文字。<br><strong>fab:fab_icon</strong>设置图标。</p>
]]></content>
      
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何提高Android虚拟机的运行速度]]></title>
      <url>http://youngxhui.top/2016/07/17/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98Android%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h1 id="关于Android-virtual-Device"><a href="#关于Android-virtual-Device" class="headerlink" title="关于Android virtual Device"></a>关于Android virtual Device</h1><p>Android virtual Device（AVD）是Google推出的可以在x86,x64,AMD设备上运行的虚拟机。我们可以在Android Studio中创建并且使用。</p>
<p><img src="" alt="AVD Manager"></p>
<p>在我们一般创建时，都再用默认的设置，这样会导致AVD使用时很卡，卡到爆……</p>
<p>下面我们就来一起设置，使它流畅的运行起来。</p>
<h1 id="下载安装Intel-HAXM"><a href="#下载安装Intel-HAXM" class="headerlink" title="下载安装Intel HAXM"></a>下载安装Intel HAXM</h1><ol>
<li><p>打开SDK Manger，在SDK Tools目录下，选择并下载Intel HAXM。</p>
<p><img src="leanote://file/getImage?fileId=5782246bc2c9522ae1000001" alt="Inter HAXM"></p>
</li>
<li><p>下载好并不代表安装，我们需要打卡SDK目录进行安装。</p>
</li>
</ol>
<blockquote>
<p>…\extras\intel\Hardware_Accelerated_Execution_Manager\intelhaxm-android.exe</p>
</blockquote>
<p>安装只需要next就好。也可以适当的分配一点大的内存。</p>
<ol>
<li>重启你的电脑。</li>
</ol>
<h1 id="添加AVD"><a href="#添加AVD" class="headerlink" title="添加AVD"></a>添加AVD</h1><p>我们打开AVD Manager。行创建一个AVD</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/16-7-17/68978086.jpg" alt=""></p>
<p>行创建一个AVD</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/16-7-17/27837587.jpg" alt=""></p>
<p>选择一个你喜欢的机型，我在这里选择6P。</p>
<p><img src="leanote://file/getImage?fileId=578226dbc2c9522ae1000004" alt=""></p>
<p>按照你的电脑选择API和ABI</p>
<p><img src="leanote://file/getImage?fileId=57822739c2c9522ae1000005" alt=""></p>
<p>Next-&gt;Finish</p>
<p>此时我们就添加好一个虚拟机了。</p>
<h2 id="运行并修改参数"><a href="#运行并修改参数" class="headerlink" title="运行并修改参数"></a>运行并修改参数</h2><p>我们点击运行<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/16-7-17/59566680.jpg" alt=""></p>
<p>此时我们需要观察Android Studio的输出日志。其中有一条值得我们注意</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/16-7-17/65640645.jpg" alt=""></p>
<p>这一条警告提示我们VM heap低于最低值384M，要求我们去设置为384M。</p>
<p>此时我们打开编辑，修改VM heap为他所要求的值，我们的AVD就可以流畅的运行了。</p>
<p><strong>基于Android　Studio 2.1，Intel X64 RAM 8G</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Activity启动的两种方式]]></title>
      <url>http://youngxhui.top/2016/07/04/Activity%E5%90%AF%E5%8A%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>今天学习Android的Intent的使用</p>
<h2 id="显示使用"><a href="#显示使用" class="headerlink" title="显示使用"></a>显示使用</h2><p>显示Intent就是指定Activity。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.myapplication;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        findViewById(R.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, MyAty.class));</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Intent直接指定一个Activity</p>
<h2 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h2><p>创建一个Intent，但是并不指定启动的Activiy，有很多启动方式。</p>
<h3 id="配置AndroidManiFest-xml中的activity"><a href="#配置AndroidManiFest-xml中的activity" class="headerlink" title="配置AndroidManiFest.xml中的activity"></a>配置AndroidManiFest.xml中的activity</h3><blockquote>
<p>AndroidManiFest.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.example.myapplication"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MyAty"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"asdasd"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在AndroidManiFest.xml中配置文件，添加intent-filter标签，并添加一个字符串。</p>
<blockquote>
<p>MainActivity.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.myapplication;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        findViewById(R.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="comment">//直接通过字符串启动</span></div><div class="line">                startActivity(<span class="keyword">new</span> Intent(<span class="string">"asdasd"</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>注意</strong><br><strong>这里的字符串虽然可以说是任意格式，但是有一个约定俗成的规定</strong><br><strong>包名.intent.action.Action名</strong></p>
<hr>
<p>所以上述的<em>asdasd</em>我们应该命名为<em>com.example.myapplication.intent.activity.MyAty</em><br>为了方便，我们不出错。<br>我们会在代码的前面的添加一个静态常量。</p>
<blockquote>
<p>MyAty.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.myapplication;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.PersistableBundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAty</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION = <span class="string">"com.example.myapplication.intent.activity.MyAty"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState, PersistableBundle persistentState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState, persistentState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_my_aty);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>MainActivity.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.myapplication;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        findViewById(R.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                startActivity(<span class="keyword">new</span> Intent(MyAty.ACTION));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就很方便的使用，让我们不出错。</p>
<p>优势：<br>可以启动其他应用的页面，如在A应用中启动B应用中的某个Actio。<br>Demo</p>
<p>新建一个Module。</p>
<blockquote>
<p>MainActivity.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.app1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        findViewById(R.id.btnStartMyaty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="comment">// 通过字符串直接启动另一个app的页面。</span></div><div class="line">                startActivity(<span class="keyword">new</span> Intent(<span class="string">"com.example.myapplication.intent.activity.MyAty"</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Intent过滤器"><a href="#Intent过滤器" class="headerlink" title="Intent过滤器"></a>Intent过滤器</h2><p>多个Activity拥有同一个Intent Action<br>新建Activity命名为MyAct1<br>之后的代码一样</p>
<blockquote>
<p>AndroidManiFest.xml</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    package="com.example.myapplication"&gt;</div><div class="line"></div><div class="line">    &lt;application</div><div class="line">        android:allowBackup="true"</div><div class="line">        android:icon="@mipmap/ic_launcher"</div><div class="line">        android:label="@string/app_name"</div><div class="line">        android:supportsRtl="true"</div><div class="line">        android:theme="@style/AppTheme"&gt;</div><div class="line">        &lt;activity android:name=".MainActivity"&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name="android.intent.action.MAIN" /&gt;</div><div class="line"></div><div class="line">                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line">        &lt;activity android:name=".MyAty"</div><div class="line">            android:label="MyAty"&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;category android:name="android.intent.category.DEFAULT" /&gt;</div><div class="line"></div><div class="line">                &lt;action android:name="com.example.myapplication.intent.activity.MyAty" /&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line">        &lt;activity android:name=".MyAty1"</div><div class="line">            android:label="@string/title_activity_my_aty1"&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;category android:name="android.intent.category.DEFAULT"&gt;&lt;/category&gt;</div><div class="line">                &lt;action android:name="com.example.myapplication.intent.activity.MyAty"&gt;&lt;/action&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line">    &lt;/application&gt;</div><div class="line"></div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
<p>此时我们在运行启动。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/10084251.jpg" alt="10084251.jpg"></p>
<p>会弹出提示，让我们选择启动哪一个Activity。</p>
]]></content>
      
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java集合遍历]]></title>
      <url>http://youngxhui.top/2016/05/23/Java%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<h1 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h1><h2 id="使用Iterator"><a href="#使用Iterator" class="headerlink" title="使用Iterator"></a>使用Iterator</h2><p>Iterator主要用于遍历集合中的Collection元素，因此Iterator创建的对象是一个迭代器。</p>
<hr>
<h3 id="Iterator提供的四个方法"><a href="#Iterator提供的四个方法" class="headerlink" title="Iterator提供的四个方法"></a>Iterator提供的四个方法</h3><ul>
<li>boolean hasNext(): 如果迭代器的集合还没有被遍历完，返回ture。</li>
<li>Object next():返回集合里的下一个元素。</li>
<li>void remove():删除集合里上一次next方法返回的元素。</li>
<li>void forEachRemaining(Consumer action)：这个是java 8为Iterator新增的默认方法，该方法可使用Lambda表达式遍历所有的集合元素。</li>
</ul>
<hr>
<h3 id="next方法"><a href="#next方法" class="headerlink" title="next方法"></a>next方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 晓辉 on 2016/5/23.</div><div class="line"> * 使用jdk8中的iterator遍历集合；</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteraorTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List books=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        books.add(<span class="string">"fengk"</span>);</div><div class="line">        books.add(<span class="string">"niaho"</span>);</div><div class="line">        Iterator it=books.iterator();</div><div class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</div><div class="line">            it.next();</div><div class="line">            <span class="keyword">if</span>(books.equals(<span class="string">"fengk"</span>))&#123;</div><div class="line">                it.remove();</div><div class="line">            &#125;</div><div class="line">            System.out.println(it.next());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&gt; 输出结果</div><div class="line">&gt;niaho</div></pre></td></tr></table></figure>
<p>Iterator只用于遍历集合，本身本身并不具有承装对象的能力。如果需要就要创建Iterator对象，则必须有一个被迭代的集合。Iterator必须依附于Collection对象，若有一个Iterator对象，则必然有一个与之关联的Collection对象。</p>
<h2 id="使用Lambda表达式遍历Iterator"><a href="#使用Lambda表达式遍历Iterator" class="headerlink" title="使用Lambda表达式遍历Iterator"></a>使用Lambda表达式遍历Iterator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 晓辉 on 2016/5/23.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorEach</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建一个集合</span></div><div class="line">        Collection books=<span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        books.add(<span class="string">"java"</span>);</div><div class="line">        books.add(<span class="string">"c#"</span>);</div><div class="line">        Iterator it=books.iterator();</div><div class="line">        <span class="comment">// 使用Lambda表达式遍历所有的集合</span></div><div class="line">        it.forEachRemaining(obj-&gt;System.out.println(obj));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果<br>c#<br>java</p>
</blockquote>
<p><strong>注意：</strong>这里的输出是倒序。</p>
<hr>
<p>##使用foreach遍历集合元素<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeachTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建一个集合</span></div><div class="line">        Collection books=<span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        books.add(<span class="string">"java"</span>);</div><div class="line">        books.add(<span class="string">"c#"</span>);</div><div class="line">        <span class="keyword">for</span>(Object obj:books)&#123;</div><div class="line"><span class="comment">//            此处的books变量也不是集合的本身元素</span></div><div class="line">            String book=(String)obj;</div><div class="line">            System.out.println(book);</div><div class="line">            <span class="keyword">if</span> (book.equals(<span class="string">"java"</span>))&#123;</div><div class="line">                books.remove(book);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(books);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>for循环中的迭代变量也不是集合元素本身，系统只是以此把集合元素的值赋值给迭代变量，因此for循环中修改的迭代变量的值是也是没有任何意义。</p>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub for windows使用教程（三）]]></title>
      <url>http://youngxhui.top/2016/05/15/GitHub-for-windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="团队协作流程"><a href="#团队协作流程" class="headerlink" title="团队协作流程"></a>团队协作流程</h1><h2 id="认识Flow"><a href="#认识Flow" class="headerlink" title="认识Flow"></a>认识Flow</h2><p><strong><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener">GitHub Flow</a></strong>是一个轻量级的，基于分支的工作流程，支持团队和部署在那里的定期做项目。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/1.png" alt=""></p>
<h2 id="为团队成员写入权限"><a href="#为团队成员写入权限" class="headerlink" title="为团队成员写入权限"></a>为团队成员写入权限</h2><p>在我们的队友添加一个写的权限，这样我们的队友才能很好的修改代码。<br>我们打开网页上的<a href="http://www.github.com" target="_blank" rel="noopener">GitHub</a>,点击<strong>settings</strong>,</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/2.png" alt=""></p>
<p>之后我们找到<strong>collaborators</strong>，这里会让我们验证密码，之后就有添加合作者的选项。这样我们就能添加我们的小伙伴了！</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/3.png" alt=""></p>
<p>这样我们就添加了新的小伙伴，新的小伙伴有着同样的权限去修改和管理代码。<br>此时我们就会看到我的小伙伴wevan的github主页上就会出现关于我创建的First的各种通知。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/9.png" alt=""></p>
<h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>在我们创建一个叫<strong>add new function</strong>的分支。</p>
<p> 创建一个分支</p>
<blockquote>
<p><em>Create a branch</em></p>
</blockquote>
<p>当你工作的一个项目，你会在任何给定的时间有一堆不同的功能或正在进行的想法 - 其中一些是蓄势待发，而另一些则不是。分支的存在是为了帮助你管理这个工作流程。</p>
<blockquote>
<p><em>When you’re working on a project, you’re going to have a bunch of different features or ideas in progress at any given time – some of which are ready to go, and others which are not. Branching exists to help you manage this workflow.</em></p>
</blockquote>
<p>当您在项目中创建一个分支，你创造一个环境，在那里你可以尝试新的想法。你让一个分支的更改不会影响主分支，让你可以自由进行实验，并提交更改，在你的分支将不会被合并，直到它准备好知识安全的人所正在与合作进行审查。</p>
<blockquote>
<p><em>When you create a branch in your project, you’re creating an environment where you can try out new ideas. Changes you make on a branch don’t affect the master branch, so you’re free to experiment and commit changes, safe in the knowledge that your branch won’t be merged until it’s ready to be reviewed by someone you’re collaborating with.</em></p>
</blockquote>
<p><strong>ProTip</strong></p>
<p>分支在Git中是一个核心概念，整个GitHub的流量是基于它。这里只有一个规则：在任何主分支总是部署。</p>
<blockquote>
<p><em>Branching is a core concept in Git, and the entire GitHub Flow is based upon it. There’s only one rule: anything in the master branch is always deployable.</em></p>
</blockquote>
<p>正因为如此，这是非常重要的一个功能或修复工作时，你的新分支关老爷的创建。您的分支名应该是描述（例如，重构的身份验证，用户的内容缓存键，使视网膜-化身），以便其他人可以看到正在处理。</p>
<blockquote>
<p><em>Because of this, it’s extremely important that your new branch is created off of master when working on a feature or a fix. Your branch name should be descriptive (e.g., refactor-authentication, user-content-cache-key, make-retina-avatars), so that others can see what is being worked on.</em><br><strong><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener">来自GitHub Flow</a></strong></p>
</blockquote>
<h2 id="添加提交"><a href="#添加提交" class="headerlink" title="添加提交"></a>添加提交</h2><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/4.png" alt=""></p>
<p>我们首先把分支切换到新的分支上<strong>add new function</strong></p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/5.png" alt=""></p>
<p>修改新的版本</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/6.png" alt=""></p>
<p>填写好新的<strong>Summary</strong>和<strong>Description</strong>，提交新的版本并同步。<br>这样小伙伴登陆到<strong>GitHub</strong>上就看到了就可以清楚的看到一切的修改。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/7.png" alt=""></p>
<p>添加提交</p>
<blockquote>
<p><em>Add commits</em></p>
</blockquote>
<p> 一旦你的分支已经建立，现在是时候开始进行更改。无论何时添加，编辑或删除一个文件，你作出承诺，并将其添加到您的分支。提交加入这一过程保持你的进步轨迹，你在一个特性分支工作。</p>
<blockquote>
<p><em>Once your branch has been created, it’s time to start making changes. Whenever you add, edit, or delete a file, you’re making a commit, and adding them to your branch. This process of adding commits keeps track of your progress as you work on a feature branch.</em></p>
</blockquote>
<p>还承诺创建工作的透明历史，其他人可以按照理解你做了什么，以及为什么。每次提交都有一个关联的提交信息，这是解释为什么一个特定的变化作出了说明。此外，每次提交被认为是变革的一个独立单元。这使您可以回滚的变化，如果发现错误，或者如果你决定在一个不同的方向前进。</p>
<blockquote>
<p><em>Commits also create a transparent history of your work that others can follow to understand what you’ve done and why. Each commit has an associated commit message, which is a description explaining why a particular change was made. Furthermore, each commit is considered a separate unit of change. This lets you roll back changes if a bug is found, or if you decide to head in a different direction.</em></p>
</blockquote>
<p><strong>ProTip</strong></p>
<p>提交信息是重要的，特别是因为Git跟踪更改，然后将它们显示为承诺一旦他们推到服务器。通过字迹清晰提交信息，你可以更容易为其他人跟着，并提供反馈。</p>
<blockquote>
<p><em>Commit messages are important, especially since Git tracks your changes and then displays them as commits once they’re pushed to the server. By writing clear commit messages, you can make it easier for other people to follow along and provide feedback.</em><br><strong><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener">来自GitHub Flow</a></strong></p>
</blockquote>
<h2 id="打开一个pull请求"><a href="#打开一个pull请求" class="headerlink" title="打开一个pull请求"></a>打开一个pull请求</h2><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/8.png" alt=""><br>这个是整个流程中比较关键的一步，发布<strong>Pull Request</strong>。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/10.png" alt=""></p>
<p>点击客户端或者网页上的<strong>Pull Request</strong>发布。<br>我们这里点击<strong>Pull Request</strong></p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/11.png" alt="客户端/网页版"><br>我们填写好必要的说明性文字<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/12.png" alt=""><br>点击<strong>Send Pull Request</strong><br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/13.png" alt=""><br>他既然让我们到GitHub上看，我们就听他的，点击，进入。<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/14.png" alt=""><br>我们发现小伙伴已经在下面留言了！</p>
<h3 id="讨论和审核你的代码"><a href="#讨论和审核你的代码" class="headerlink" title="讨论和审核你的代码"></a>讨论和审核你的代码</h3><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/15.png" alt=""></p>
<p>你的小伙伴开始对你的代码讨论，修改，迭代。</p>
<p>讨论和审查你的代码</p>
<blockquote>
<p><em>Discuss and review your code</em></p>
</blockquote>
<p>一旦拉入请求已被打开，人或团队审查您的变化可能有疑问或意见。也许编码风格不匹配项目的指导方针，改变缺少单元测试，或者也许一切看起来不错，道具都是为了。引入请求旨在鼓励并捕获这种类型的对话。</p>
<blockquote>
<p><em>Once a Pull Request has been opened, the person or team reviewing your changes may have questions or comments. Perhaps the coding style doesn’t match project guidelines, the change is missing unit tests, or maybe everything looks great and props are in order. Pull Requests are designed to encourage and capture this type of conversation.</em></p>
</blockquote>
<p>您还可以继续推送到你的分支在你提交的讨论和反馈光。如果有人评论说，你忘了做某件事，或者如果在代码中的错误，你可以在你的分支修复它，推高的变化。GitHub上会显示新的提交和其他任何意见，你可能会收到统一拉请求视图。</p>
<blockquote>
<p><em>You can also continue to push to your branch in light of discussion and feedback about your commits. If someone comments that you forgot to do something or if there is a bug in the code, you can fix it in your branch and push up the change. GitHub will show your new commits and any additional feedback you may receive in the unified Pull Request view.</em></p>
</blockquote>
<p><strong>ProTip</strong></p>
<p>拉请求的意见都写在降价，所以你可以插入图片和表情符，使用预先格式化的文本块，等轻质格式。</p>
<blockquote>
<p><em>Pull Request comments are written in Markdown, so you can embed images and emoji, use pre-formatted text blocks, and other lightweight formatting.</em></p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/16.png" alt=""></p>
<p>部署</p>
<blockquote>
<p><em>Deploy</em></p>
</blockquote>
<p>一旦你拉的请求进行了审查和部门通过你的测试，您可以部署您的更改，以验证他们的生产。如果你的分支造成的问题，您可以通过部署现有的主投产回滚</p>
<blockquote>
<p><em>Once your pull request has been reviewed and the branch passes your tests, you can deploy your changes to verify them in production. If your branch causes issues, you can roll it back by deploying the existing master into production.</em></p>
</blockquote>
<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/17.png" alt=""></p>
<p>合并分支我们之前已经说过，这里就不再赘述。</p>
<p>合并</p>
<blockquote>
<p><em>Merge</em></p>
</blockquote>
<p>现在，您的更改在生产中得到了验证，现在是时候你的代码合并到主分支。</p>
<blockquote>
<p><em>Now that your changes have been verified in production, it is time to merge your code into the master branch.</em></p>
</blockquote>
<p>合并后，引入请求保护的历史变迁到您的代码记录。因为他们是搜索的，他们不让任何人回去的时间理解为什么以及如何决定了。</p>
<blockquote>
<p><em>Once merged, Pull Requests preserve a record of the historical changes to your code. Because they’re searchable, they let anyone go back in time to understand why and how a decision was made.</em></p>
</blockquote>
<p><strong>ProTip</strong></p>
<p>通过将某些关键字到您的拉请求的文本，你可以用代码相关联的问题。当你拉入请求合并，相关问题也将被关闭。例如，输入短语关闭＃32将关闭在仓库中发行数量32。欲了解更多信息，请查看我们的帮助文章。</p>
<blockquote>
<p><em>By incorporating certain keywords into the text of your Pull Request, you can associate issues with code. When your Pull Request is merged, the related issues are also closed. For example, entering the phrase Closes #32 would close issue number 32 in the repository. For more information, check out our help article.</em></p>
</blockquote>
<p><strong>注意：英文翻译为机器翻译，可能有翻译错误的地方，建议大家尽可能看英文</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基本的GitHub教程就算写完了，已有如果在有就是一些GitHub上的一些使用小技巧了。</p>
]]></content>
      
        
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub for Windows使用教程(二)]]></title>
      <url>http://youngxhui.top/2016/05/13/GitHub-for-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h1 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>我们创建第一个分支取名为<strong>“new masterh”</strong>,点击<strong>Create new branch</strong>创建第一个分支。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF.png" alt="新建分支.png"></p>
<p>我们发现此时的分支已经切换到了我们刚刚创建的分支<strong>new masterch</strong></p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png" alt=""></p>
<p>我们来修改<strong>new masterch</strong>分支上的内容。<br>我们仍旧打开<strong>FirstDemo.txt</strong>进行编辑。输入以下内容</p>
<blockquote>
<p>创建的第一个分支。</p>
</blockquote>
<p>打开github进行，填写<strong>Summary</strong>和<strong>Description</strong></p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E4%BF%AE%E6%94%B9%E5%88%86%E6%94%AF%E5%86%85%E5%AE%B9.png" alt=""></p>
<p>之后我们点击<strong>Commit to new-master</strong><br>在<strong>History</strong>目录下，我们可以看到会有两条主线，分别是<strong>master</strong>和<strong>new-master</strong>并且在<strong>new-master</strong>的分支下又一个蓝色的<strong>实线空心圈</strong>和一个<strong>虚线空心圈</strong>。<br><strong>实线圈</strong>表示当前的节点，<strong>空心圈</strong>表示下一次修改时的节点。<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E6%8E%A8%E9%80%81%E5%88%86%E6%94%AF.png" alt=""><br><strong>红线</strong>标示的部分就是当前的分支<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%BA%A2%E7%BA%BF%E5%BC%BA%E8%B0%83.png" alt=""></p>
<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>点击<strong>红色</strong>划线部分就会出现分支的列表<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/5d9c09b750eec11d.png" alt=""><br>我们点击<strong>master</strong>就会切换到<strong>master</strong>分支。</p>
<h2 id="上传-同步分支"><a href="#上传-同步分支" class="headerlink" title="上传/同步分支"></a>上传/同步分支</h2><p>这个操作和同步仓库是一个操作，点击<strong>Publish/Sync</strong>上传或同步分支。</p>
<h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>首先要把分支切换到你要删除的分支下，如我们要删除<strong>new master</strong>，将分支切换到<strong>new master</strong>点击右上角齿轮就会出现<strong>Delete new master</strong></p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF.png" alt=""></p>
<p>点击<strong>Delete new master</strong>就会弹出一个对话框，询问删除的内容。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%A1%AE%E8%AE%A4%E5%88%A0%E9%99%A4.png" alt=""></p>
<p>第一个<strong>yes ，Delete both</strong>是将本地与网页全部删除；<br>第二个<strong>Delete local only</strong>仅仅是删除本地。<br>第三个是取消。</p>
<h2 id="合并两个分支"><a href="#合并两个分支" class="headerlink" title="合并两个分支"></a>合并两个分支</h2><p>将一个分支与<strong>master</strong>分支进行合并。<br>我们首先把分支切换到<strong>master</strong>下，点击<strong>Update from new-branch</strong>进行分支的合并。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C.png" alt=""></p>
<p>此时我们查看<strong>history</strong>目录下就会</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub for Windows使用教程（一）]]></title>
      <url>http://youngxhui.top/2016/05/03/GitHub-for-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>鉴于网上目前的教材都太落后，github for windows已经更新了多个版本，好多界面都发生了变化，所以来写这个教程。目的是为了帮助和我一样初学github，但是苦于找不到教程的同学，为了写最详细的教程。配备了大量的图文介绍。该教程是基于<strong>GitHub for windows (3.0.17.0)</strong></p>
<h1 id="什么是Github"><a href="#什么是Github" class="headerlink" title="什么是Github"></a>什么是Github</h1><p>说到什么事github，我们先看wikipedia的描述“<a href="https://zh.wikipedia.org/wiki/GitHub" target="_blank" rel="noopener">GitHub是一个利用Git进行版本控制、专门用于存放软件代码与内容的共享虚拟主机服务。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。</a>”</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li><p>下载<a href="https://desktop.github.com/" target="_blank" rel="noopener">github for windows</a>，安装这里不赘述。</p>
</li>
<li><p><a href="https://github.com/" target="_blank" rel="noopener">注册github账号</a></p>
</li>
</ol>
<p><img src="http://i3.piimg.com/2513fb0c843f35c9.png" alt=""></p>
<ol>
<li>登陆到github for windows。</li>
</ol>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%99%BB%E9%99%86.png" alt=""></p>
<hr>
<p>准备工作都完了，我们开始正式学习。^_^</p>
<h1 id="创建第一个代码库"><a href="#创建第一个代码库" class="headerlink" title="创建第一个代码库"></a>创建第一个代码库</h1><h2 id="认识界面"><a href="#认识界面" class="headerlink" title="认识界面"></a>认识界面</h2><p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E4%BB%93%E5%BA%93%E7%95%8C%E9%9D%A2.png" alt=""></p>
<p>github for windows的界面非常清爽，的确符合geek的性质，个人表示非常喜欢。<br>我们来建立第一个仓库，点击左上角的<strong>+号</strong>，初次建立他会有一圈圈的涟漪，非常漂亮哦。<br>打开之后有三个选项，Add，Create，Clone。<br><img src="http://i3.piimg.com/cf0b5eb355dfb4cf.png" alt=""><br>我们分别来介绍一下这三个功能。</p>
<h3 id="Add功能"><a href="#Add功能" class="headerlink" title="Add功能"></a>Add功能</h3><p>如果本地有工程，就可以使用Add添加</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/Add%E5%8A%9F%E8%83%BD.png" alt=""></p>
<h3 id="Clone功能"><a href="#Clone功能" class="headerlink" title="Clone功能"></a>Clone功能</h3><p>这个功能其实最好理解了，克隆这名字通俗易懂好理解。<br>如何使用Clone功能呢？</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/clone%E5%8A%9F%E8%83%BD.png" alt=""></p>
<p>就是将在浏览器上已经创建好的项目导入到本地，换句话说就是下载到本地。</p>
<h3 id="Create功能"><a href="#Create功能" class="headerlink" title="Create功能"></a>Create功能</h3><p>创建一个代码库，<br>Name填写你的仓库名字。Local path写你将要保存在本地路径。我们主要从这个功能开始github之旅。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/create%E5%8A%9F%E8%83%BD.png" alt=""></p>
<p>我们在这里填写First，来创建第一个我们自己的repository。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%88%9B%E5%BB%BAfrist.png" alt=""></p>
<h1 id="开始使用第一个代码库"><a href="#开始使用第一个代码库" class="headerlink" title="开始使用第一个代码库"></a>开始使用第一个代码库</h1><h2 id="修改第一个代码库中内容"><a href="#修改第一个代码库中内容" class="headerlink" title="修改第一个代码库中内容"></a>修改第一个代码库中内容</h2><p>我们来找到刚刚创建的代码库在本地的位置。就是刚刚在local path的地址路径，当然如果你忘了，请右键点击First。<br><img src="http://i3.piimg.com/0e76cd4dde922713.png" alt=""><br>选择Open in Explorer。这样我们就可以转到刚刚的路径下。<br>我们新建一个文本文档。在里面编辑。<br>如下<br><img src="http://i3.piimg.com/ce9841870311a76d.png" alt=""><br>此时的github就会变成这个样子(Changs)：<br><img src="http://i3.piimg.com/2f8f72a1976e5986.png" alt=""><br>你会发现此时github会出现刚刚编辑的内容。</p>
<ol>
<li>这个是测试文本</li>
<li>你好</li>
</ol>
<p>并且前面会有<strong>蓝色标识</strong>，那么这个<strong>蓝色标识</strong>是什么用呢？<br>其实这个蓝色标识是提示你会上改变的文本。比如我第一次只想改变<br><strong>这个是测试文本</strong>并不想把<strong>你好</strong>上传。<br>这时我们点击一下<strong>你好</strong>的前面的<strong>蓝色标识</strong>。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E6%B5%8B%E8%AF%95%E6%96%87%E6%9C%AC.png" alt=""></p>
<p>你会发现<strong>你好</strong>前面的蓝色标识没有了。<br>我们填写好<strong>Summer</strong>和<strong>Description</strong><br>Summer就是这次改动的总结，我们也可以理解为标题<em>（必填）</em>，而Description可以理解为详细概况<em>（选填）</em></p>
<hr>
<p>我们这里只选择第一个修改对象，也就是<strong>这个是测试文本</strong>就行修改。summer我们填写为<em>第一次修改</em>，Description我们填写为<em>增加了这个是测试文本</em>的内容，之后点击<strong>Commit to master</strong>。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E8%BF%99%E6%98%AF%E8%BF%99%E6%98%AF%E6%96%87%E6%9C%AC.png" alt=""></p>
<p>切换到<strong>History</strong>目录下</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/History%E7%9B%AE%E5%BD%95.png" alt=""></p>
<p>我们会发现他改变了。<br>这次我们把<strong>你好</strong>进行添加。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%AC%AC%E4%BA%8C%E6%AC%A1.png" alt=""></p>
<p>在<strong>History</strong>目录下发生了这样的改变。会在<strong>History</strong>目录下形成一天时间线，来指出每一次的修改标题和内容，同时会把修改的内容用<strong>绿色标识</strong>标出。<br>我们打开本地的文本，删除刚刚添加的第一行<strong>这个是测试文本</strong>。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E8%BF%99%E4%B8%AA%E6%98%AF%E6%B5%8B%E8%AF%95%E6%96%87%E6%9C%AC.png" alt=""></p>
<p>此时你就会发现github发生了变化。<br>很多人说这里会出现乱码,这个是编码问题,如果不修改编码,只是在客户端上显示乱码,但是上传后不会出现乱码,为了保险起见,建议大家还是把文本编码修改为 utf-8 .<br><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E5%88%A0%E9%99%A4%E7%BA%A2%E8%89%B2%E6%A0%87%E8%AF%86.png" alt=""></p>
<p>此时的<strong>红色标识</strong>标识删除。我们写好Summer和Description并点击Commit to master。<br>这样我们就删除了第一行。同时在<strong>History</strong>目录下又多了一条时间轴。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%BA%A2%E8%89%B2%E6%A0%87%E8%AF%86.png" alt=""></p>
<p>这样我们就完成了删除。</p>
<h2 id="上传与同步"><a href="#上传与同步" class="headerlink" title="上传与同步"></a>上传与同步</h2><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>此时，当我们打开github网页，就会发现此时你的修改的内容并没有出现在这里。这是因为你没有进行同步，仅仅是在本地就行了修改。此时我们仅仅需要点击右上角的<strong>publish</strong></p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E4%B8%8A%E4%BC%A0.png" alt=""></p>
<p>此时你就会本地内容已经上传到网页上。</p>
<p><img src="https://island-hexo.oss-cn-beijing.aliyuncs.com/%E7%BD%91%E9%A1%B5.png" alt=""></p>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>当你的代码库上传后就会发现，原来的<strong>publish</strong>以及变为了<strong>Sync</strong>。</p>
<p><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-5-3/66610926.jpg" alt=""></p>
<p>点击<strong>Sync</strong>同步代码库！</p>
]]></content>
      
        
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大学？大学？大学？]]></title>
      <url>http://youngxhui.top/2016/04/27/%E5%A4%A7%E5%AD%A6%EF%BC%9F%E5%A4%A7%E5%AD%A6%EF%BC%9F%E5%A4%A7%E5%AD%A6%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h1 id="大学？大学？-大学？"><a href="#大学？大学？-大学？" class="headerlink" title="大学？大学？ 大学？"></a>大学？大学？ 大学？</h1><p><strong>仅仅写给自己</strong></p>
<hr>
<h2 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h2><p>生活在这个大学里那种迷茫有时候只有自己知道，有时候的动力其实是为0的，只能按照自己的想法去走，可是一个人搞了两个晚上的东西，还是没有成功，有些事情只能自己去做，没人会对自己的事情感兴趣，更不会去帮你。当一个问题查阅了百度，google后仍旧没有解决，那种失落或许没人能懂！<br>连续两个晚上都在弄，看来百度，查了google，连youtube上的视频看了，然而问题依旧，只能靠自己慢慢去搞。然而MinwgM，Cmake对于一个刚刚接触软件工程的人来说，没有任何人的帮助，自己慢慢的去看，略知皮毛，然而Clion的报错让我已经筋疲力尽。</p>
<p>昨晚开始配置Clion，从MinWG开始，然后是Cmake，都是一个个的新名词，一次又一次的失败W，刚刚开始连Cmake都无法使用，后来helloworld都无法运行。这次是MinGM的报错，百度了，google了，看了youtube，这个问题不是我一个人遇到，然而我却看不到解决的方法，满是英文的屏幕看的非常吃力，当没有答案时，只能自己去创造答案。自己一个人去看报错的文档，然而我又一次高估了自己的能力……晦涩难懂的英文和路径，一头雾水。<br>同时IDEA也让我感到了无力，深深的无力。为什么，他们家的IDE要让开发者把时间都放在大量的配置上去。最后还是投靠了eclipse。但让clion我会继续研究下去的。</p>
<hr>
<p>或许有时候是太高估自己了，要走和别人不一样的道路，就用个编译器都要标新立异。从github+hexo的博客搭建到今天的Clion和Idea，真的很浪费时间，收获感觉微乎其微，达不到什么实质性的东西，包括现在学习github，好像是一个错误的想法，而且重要的是把别人往沟里带，让别人按自己的想法走，多可笑啊。是该好好整理一下自己的想法了，有时候该问问那些过来的人，多听听他们的建议，不要给自己多走弯路。</p>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LinkList特有的方法]]></title>
      <url>http://youngxhui.top/2016/04/23/LinkList%E7%89%B9%E6%9C%89%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="LinkList特有的方法"><a href="#LinkList特有的方法" class="headerlink" title="LinkList特有的方法"></a>LinkList特有的方法</h1><blockquote>
<p>addFirst();<br>addLast();</p>
</blockquote>
<p>添加元素，第一个或最后一个。</p>
<hr>
<blockquote>
<p>getList();<br>getFirst();</p>
</blockquote>
<p>获取元素，但是不会删除。如果集合中没有元素，会抛出<strong>NoSuchElementException</strong>。</p>
<hr>
<blockquote>
<p>removeFirst();<br>removeLast();</p>
</blockquote>
<p>获取元素，但是元素被删除。如果集合中没有元素，就会出现<strong>NoSuchElementException</strong>。</p>
<hr>
<p>在jdk1.6中出现了替代的方法：</p>
<blockquote>
<p>offerFirst();<br> offerLast();</p>
</blockquote>
<p>添加元素。</p>
<hr>
<blockquote>
<p>peekFirst();<br>peekLast();</p>
</blockquote>
<p>获取元素，但是元素不被删除。如果集合中没有元素，会返回<strong>null</strong>。</p>
<hr>
<blockquote>
<p>pollFirst();<br>pollLast();</p>
</blockquote>
<p>获取元素，但是元素被删除。如果集合中没有元素，会返回<strong>null</strong>。</p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[清除右键无效项]]></title>
      <url>http://youngxhui.top/2016/04/21/%E6%B8%85%E9%99%A4%E5%8F%B3%E9%94%AE%E6%97%A0%E6%95%88%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p> 清除右键无效项</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有时在安装一些程序时，当程序卸载后会留下一些右键无效项，对于强迫症处女座来说，这是一件万万不能的。</p>
<hr>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ul>
<li><p>新建一个文本文档，复制下面的代码到文本里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@ ECHO OFF</div><div class="line">@ ECHO.</div><div class="line">@ ECHO.</div><div class="line">@ ECHO. 说 明</div><div class="line">@ ECHO -----------------------------------------------------------------------</div><div class="line">@ ECHO </div><div class="line">@ ECHO 可能杀毒软件会提示威胁项，允许运行就好！</div><div class="line">@ ECHO </div><div class="line">@ ECHO -----------------------------------------------------------------------</div><div class="line">@ Echo.</div><div class="line">PAUSE</div><div class="line">regsvr32 /u /s igfxpph.dll</div><div class="line">reg delete HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers /f</div><div class="line">reg add HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\new /ve /d &#123;D969A300-E7FF-11d0-A93B-00A0C90F2719&#125;</div><div class="line">reg delete HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v HotKeysCmds /f</div><div class="line">reg delete HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v IgfxTray /f</div></pre></td></tr></table></figure>
</li>
<li><p>将文本的后缀改为<strong><em>.cmd</em></strong>。</p>
</li>
<li>双击运行这个脚本。<br>此时，你就会发现那些没用的右键选项都没有了 ^ ^</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一次参加蓝桥杯感受]]></title>
      <url>http://youngxhui.top/2016/04/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%84%9F%E5%8F%97/</url>
      <content type="html"><![CDATA[<p>  作为一名大一新生，这是我第一次参加这样的比赛，比赛前也没要指望要得什么奖项，抱着锻炼的态度，还好有所收获。<br>  下面会列出我做的题和做题时的感受</p>
<hr>
<blockquote>
<h2 id="1-煤球数目"><a href="#1-煤球数目" class="headerlink" title="1.煤球数目"></a>1.煤球数目</h2><p>有一堆煤球，堆成三角棱锥形。具体：<br> 第一层放1个，<br>第二层3个（排列成三角形），<br>第三层6个（排列成三角形），<br>第四层10个（排列成三角形），<br>….<br>如果一共有100层，共有多少个煤球？<br>请填表示煤球总数目的数字。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>这个题的第一反应我是用excel做，用excel生成有序的数列，结果建立了excel后出现的是小树，瞬间懵逼…………只好一步一步的写代码，按理说这应该是一个简单的代码，可是我还是写错了，在我记忆里好像写的是5050……额，好心痛……</p>
<hr>
<blockquote>
<h2 id="2-生日蜡烛"><a href="#2-生日蜡烛" class="headerlink" title="2.生日蜡烛"></a>2.生日蜡烛</h2><p>某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。<br>现在算起来，他一共吹熄了236根蜡烛。<br>请问，他从多少岁开始过生日party的？<br>请填写他开始过生日party的年龄数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>这个题的第一反应还是excel表，最后我的确是用excel做出来了，也是这次比赛中唯一做对的题目。虽然用excel比较麻烦，但是对于我这种第一时间没有一个很好的明确思路的我来说，这样很快。</p>
<hr>
<blockquote>
<h2 id="3-凑算式"><a href="#3-凑算式" class="headerlink" title="3.凑算式"></a>3.凑算式</h2><p><img src="http://img.blog.csdn.net/20160320152805039" alt="图1.1"><br>这个算式中A~I代表1~9的数字，不同的字母代表不同的数字。<br>比如：<br>6+8/3+952/714 就是一种解法，<br>5+3/1+972/486 是另一种解法。<br>这个算式一共有多少种解法？<br>注意：你提交应该是个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>很简单的暴力求解，为什么我没有做对呢…………开始的时候题的要求是0~9，后来改为1~9，可惜，我们考场没有收到任何通知…………我按0~9算的……悲哀的人生</p>
<hr>
<p>做到这里的时候好像时间就过去了一个半小时了，实在是太慢了，也侧面说面对算法不熟练……</p>
<hr>
<blockquote>
<h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.快速排序"></a>4.快速排序</h2><p>排序在各种场合经常被用到。<br>快速排序是十分常用的高效率的算法。<br>其思想是：先选一个“标尺”，<br>用它把整个队列过一遍筛子，<br>以保证：其左边的元素都不大于它，其右边的元素都不小于它。<br>这样，排序问题就被分割为两个子区间。<br>再分别对子区间排序就可以了。<br>下面的代码是一种实现，请分析并填写划线部分缺少的代码。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t = a[i];</div><div class="line">    a[i] = a[j];</div><div class="line">    a[j] = t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = p;</div><div class="line">    <span class="keyword">int</span> j = r + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> x = a[p];</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">while</span>(i&lt;r &amp;&amp; a[++i]&lt;x);</div><div class="line">        <span class="keyword">while</span>(a[--j]&gt;x);</div><div class="line">        <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</div><div class="line">        swap(a,i,j);</div><div class="line">    &#125;</div><div class="line">    ______________________;</div><div class="line">    <span class="keyword">return</span> j;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(p&lt;r)&#123;</div><div class="line">        <span class="keyword">int</span> q = partition(a,p,r);</div><div class="line">        quicksort(a,p,q<span class="number">-1</span>);</div><div class="line">        quicksort(a,q+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">5</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">19</span>,<span class="number">27</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">17</span>&#125;;</div><div class="line">    <span class="keyword">int</span> N = <span class="number">12</span>;</div><div class="line"></div><div class="line">    quicksort(a, <span class="number">0</span>, N<span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实第一眼看到快速排序就有点后悔，因为之前看过，但是没有记住，当时并没有重视。so，这个题自然是做错了。</p>
<hr>
<blockquote>
<p>##5.抽签<br>X星球要派出一个5人组成的观察团前往W星。<br>其中：<br>A国最多可以派出4人。<br>B国最多可以派出2人。<br>C国最多可以派出2人。<br>….<br>那么最终派往W星的观察团会有多少种国别的不同组合呢？<br>下面的程序解决了这个问题。<br>数组a[] 中既是每个国家可以派出的最多的名额。<br>程序执行结果为：<br>DEFFF<br>CEFFF<br>CDFFF<br>CDEFF<br>CCFFF<br>CCEFF<br>CCDFF<br>CCDEF<br>BEFFF<br>BDFFF<br>BDEFF<br>BCFFF<br>BCEFF<br>BCDFF<br>BCDEF<br>….<br>(以下省略，总共101行)</p>
</blockquote>
<p>没做出来</p>
<hr>
<blockquote>
<h2 id="6-方格填数"><a href="#6-方格填数" class="headerlink" title="6.方格填数"></a>6.方格填数</h2><p><img src="http://img.blog.csdn.net/20160320154048055" alt="1.2"><br>填入0~9的数字。要求：连续的两个数字不能相邻。<br>（左右、上下、对角都算相邻）<br>一共有多少种可能的填数方案？<br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>这个题我是把每个格子标了序号，用暴力求解满足条件，好像我算的是400。额，有错了，好吧，我仅仅是做到这里。</p>
<hr>
<p>虽然我没有做完吧，甚至只做对了一道题，但是我想说，大一才刚刚开始，权当锻炼，而且还有很大的收获，以后要努力喽。</p>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我一直都在]]></title>
      <url>http://youngxhui.top/2016/04/20/%E6%88%91%E4%B8%80%E7%9B%B4%E9%83%BD%E5%9C%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我没有最烈的酒，<br>我没有阳光和宇宙。<br>讲真儿，我从来没走，<br>所以也不需要留。<br>我在你身后。<br>不要愁，不要愁，<br>风雨与你共舟</p>
</blockquote>
<p>谢谢你！<br>加油，共勉！</p>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
